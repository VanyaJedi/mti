{
.appVersion = "3306";
.formatVersion = 3;
DisplayStrings = (
A,
"/.notdef",
"Ãƒ"
);
customParameters = (
{
name = vendorID;
value = NONE;
},
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
29,
31,
33,
35,
38
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
A,
Aacute,
Abreve,
uni01CD,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Cdotaccent,
D,
Eth,
Dcaron,
Dcroat,
E,
Eacute,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
F,
G,
Gbreve,
uni0122,
Gdotaccent,
H,
Hbar,
I,
IJ,
Iacute,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
J,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
Z,
Zacute,
Zcaron,
Zdotaccent,
a,
aacute,
abreve,
uni01CE,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
b,
c,
cacute,
ccaron,
ccedilla,
cdotaccent,
d,
eth,
dcaron,
dcroat,
e,
eacute,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
f,
g,
gbreve,
uni0123,
gdotaccent,
h,
hbar,
i,
dotlessi,
iacute,
icircumflex,
idieresis,
i.loclTRK,
igrave,
ij,
imacron,
iogonek,
j,
uni0237,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
z,
zacute,
zcaron,
zdotaccent,
a.ss01,
aacute.ss01,
abreve.ss01,
uni01CE.ss01,
acircumflex.ss01,
adieresis.ss01,
agrave.ss01,
amacron.ss01,
aogonek.ss01,
aring.ss01,
atilde.ss01,
c.ss01,
cacute.ss01,
ccaron.ss01,
ccedilla.ss01,
cdotaccent.ss01,
d.ss01,
dcaron.ss01,
dcroat.ss01,
e.ss01,
eacute.ss01,
ecaron.ss01,
ecircumflex.ss01,
edieresis.ss01,
edotaccent.ss01,
egrave.ss01,
emacron.ss01,
eogonek.ss01,
g.ss01,
gbreve.ss01,
uni0123.ss01,
gdotaccent.ss01,
f_b,
f_f_i,
f_f_l,
f_h,
f_i,
f_l,
q_j,
ordfeminine,
ordmasculine,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
space,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
cent,
dollar,
Euro,
sterling,
yen,
plus,
minus,
multiply,
divide,
equal,
greater,
less,
asciitilde,
asciicircum,
percent,
perthousand,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek
);
}
);
date = "2022-07-30 15:19:26 +0000";
familyName = "Instrument Serif";
featurePrefixes = (
{
code = "lookup SUB_14 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_14;
lookup SUB_15 {
	sub periodcentered by periodcentered.loclCAT.case;
} SUB_15;
lookup SUB_17 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_17;
lookup SUB_3 {
	sub i by dotlessi;
	sub j by uni0237;
} SUB_3;
lookup SUB_4 {
	sub i by dotlessi;
	sub j by uni0237;
} SUB_4;
lookup SUB_5 {
	sub iogonek by dotlessi uni0328;
} SUB_5;
";
name = Prefix;
},
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CAT;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn MOL;
languagesystem latn ROM;
languagesystem latn TAT;
languagesystem latn TRK;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature ordn;
feature case;
feature ss01;
";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	@SUB_2_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub [i j]' lookup SUB_3 @SUB_2_0_LA_0;
	sub [i j]' lookup SUB_4 [uni0327 uni0328] @SUB_2_0_LA_0;
	sub iogonek' lookup SUB_5 @SUB_2_0_LA_0;
} SUB_2;
script latn;
language dflt;
lookup SUB_2;
language AZE;
lookup SUB_2;
language CAT;
lookup SUB_2;
language CRT;
lookup SUB_2;
language KAZ;
lookup SUB_2;
language MOL;
lookup SUB_2;
language ROM;
lookup SUB_2;
language TAT;
lookup SUB_2;
language TRK;
lookup SUB_2;
";
tag = ccmp;
},
{
code = "script latn;
language AZE;
lookup SUB_6 {
	sub i by i.loclTRK;
} SUB_6;
language CRT;
lookup SUB_7 {
	sub i by i.loclTRK;
} SUB_7;
language KAZ;
lookup SUB_8 {
	sub i by i.loclTRK;
} SUB_8;
language TAT;
lookup SUB_9 {
	sub i by i.loclTRK;
} SUB_9;
language TRK;
lookup SUB_10 {
	sub i by i.loclTRK;
} SUB_10;
language ROM;
lookup SUB_11 {
	sub Scedilla by uni0218;
	sub scedilla by uni0219;
} SUB_11;
language MOL;
lookup SUB_12 {
	sub Scedilla by uni0218;
	sub scedilla by uni0219;
} SUB_12;
language CAT;
lookup SUB_13 {
	sub l periodcentered' lookup SUB_14 l;
	sub L periodcentered' lookup SUB_15 L;
} SUB_13;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	@SUB_16_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_16_0_BT_0 [A a]' lookup SUB_17;
	@SUB_16_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_16_1_BT_0 [O o]' lookup SUB_17;
} SUB_16;
script latn;
language dflt;
lookup SUB_16;
language AZE;
lookup SUB_16;
language CAT;
lookup SUB_16;
language CRT;
lookup SUB_16;
language KAZ;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TAT;
lookup SUB_16;
language TRK;
lookup SUB_16;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_18 {
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
} SUB_18;
script latn;
language dflt;
lookup SUB_18;
language AZE;
lookup SUB_18;
language CAT;
lookup SUB_18;
language CRT;
lookup SUB_18;
language KAZ;
lookup SUB_18;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
language TAT;
lookup SUB_18;
language TRK;
lookup SUB_18;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	lookupflag IgnoreMarks;
	sub f b by f_b;
	sub f h by f_h;
	sub q j by q_j;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CAT;
lookup SUB_19;
language CRT;
lookup SUB_19;
language KAZ;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TAT;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = dlig;
},
{
code = "script DFLT;
language dflt;
lookup SUB_20 {
	lookupflag IgnoreMarks;
	sub f f i by f_f_i;
	sub f f l by f_f_l;
	sub f i by f_i;
	sub f l by f_l;
} SUB_20;
script latn;
language dflt;
lookup SUB_20;
language AZE;
lookup SUB_20;
language CAT;
lookup SUB_20;
language CRT;
lookup SUB_20;
language KAZ;
lookup SUB_20;
language MOL;
lookup SUB_20;
language ROM;
lookup SUB_20;
language TAT;
lookup SUB_20;
language TRK;
lookup SUB_20;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_21 {
	sub a by a.ss01;
	sub aacute by aacute.ss01;
	sub abreve by abreve.ss01;
	sub uni01CE by uni01CE.ss01;
	sub acircumflex by acircumflex.ss01;
	sub adieresis by adieresis.ss01;
	sub agrave by agrave.ss01;
	sub amacron by amacron.ss01;
	sub aogonek by aogonek.ss01;
	sub aring by aring.ss01;
	sub atilde by atilde.ss01;
	sub c by c.ss01;
	sub cacute by cacute.ss01;
	sub ccaron by ccaron.ss01;
	sub ccedilla by ccedilla.ss01;
	sub cdotaccent by cdotaccent.ss01;
	sub d by d.ss01;
	sub dcaron by dcaron.ss01;
	sub dcroat by dcroat.ss01;
	sub e by e.ss01;
	sub eacute by eacute.ss01;
	sub ecaron by ecaron.ss01;
	sub ecircumflex by ecircumflex.ss01;
	sub edieresis by edieresis.ss01;
	sub edotaccent by edotaccent.ss01;
	sub egrave by egrave.ss01;
	sub emacron by emacron.ss01;
	sub eogonek by eogonek.ss01;
	sub g by g.ss01;
	sub gbreve by gbreve.ss01;
	sub uni0123 by uni0123.ss01;
	sub gdotaccent by gdotaccent.ss01;
} SUB_21;
script latn;
language dflt;
lookup SUB_21;
language AZE;
lookup SUB_21;
language CAT;
lookup SUB_21;
language CRT;
lookup SUB_21;
language KAZ;
lookup SUB_21;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
language TAT;
lookup SUB_21;
language TRK;
lookup SUB_21;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup POS_1 {
	markClass uni0308 <anchor 205 510> @POS_1_0_MARK_0;
	markClass uni0307 <anchor 110 510> @POS_1_0_MARK_0;
	markClass gravecomb <anchor 178 510> @POS_1_0_MARK_0;
	markClass acutecomb <anchor 177 510> @POS_1_0_MARK_0;
	markClass uni030B <anchor 181 510> @POS_1_0_MARK_0;
	markClass uni0302 <anchor 217 510> @POS_1_0_MARK_0;
	markClass uni030C <anchor 217 510> @POS_1_0_MARK_0;
	markClass uni0306 <anchor 204 510> @POS_1_0_MARK_0;
	markClass uni030A <anchor 168 510> @POS_1_0_MARK_0;
	markClass tildecomb <anchor 226 510> @POS_1_0_MARK_0;
	markClass uni0304 <anchor 206 510> @POS_1_0_MARK_0;
	markClass uni0312 <anchor 115 510> @POS_1_0_MARK_0;
	markClass uni0326 <anchor 114 0> @POS_1_0_MARK_1;
	markClass uni0327 <anchor 154 0> @POS_1_0_MARK_1;
	markClass uni0328 <anchor 194 0> @POS_1_0_MARK_2;
	pos base A <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Aacute <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Abreve <anchor 229 940> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base uni01CD <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Acircumflex <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Adieresis <anchor 229 916> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Agrave <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Amacron <anchor 229 885> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Aogonek <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Aring <anchor 229 986> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base Atilde <anchor 229 928> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1 <anchor 421 0> mark @POS_1_0_MARK_2;
	pos base C <anchor 280 720> mark @POS_1_0_MARK_0 <anchor 276 0> mark @POS_1_0_MARK_1;
	pos base Cacute <anchor 280 950> mark @POS_1_0_MARK_0 <anchor 276 0> mark @POS_1_0_MARK_1;
	pos base Ccaron <anchor 280 950> mark @POS_1_0_MARK_0 <anchor 276 0> mark @POS_1_0_MARK_1;
	pos base Ccedilla <anchor 280 720> mark @POS_1_0_MARK_0 <anchor 273 -215> mark @POS_1_0_MARK_1;
	pos base Cdotaccent <anchor 280 920> mark @POS_1_0_MARK_0 <anchor 276 0> mark @POS_1_0_MARK_1;
	pos base D <anchor 255 720> mark @POS_1_0_MARK_0 <anchor 265 0> mark @POS_1_0_MARK_1;
	pos base Eth <anchor 255 720> mark @POS_1_0_MARK_0 <anchor 265 0> mark @POS_1_0_MARK_1;
	pos base Dcaron <anchor 255 950> mark @POS_1_0_MARK_0 <anchor 265 0> mark @POS_1_0_MARK_1;
	pos base Dcroat <anchor 255 720> mark @POS_1_0_MARK_0 <anchor 265 0> mark @POS_1_0_MARK_1;
	pos base E <anchor 227 720> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Eacute <anchor 227 950> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Ecaron <anchor 227 950> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Ecircumflex <anchor 227 950> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Edieresis <anchor 227 916> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Edotaccent <anchor 227 920> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Egrave <anchor 227 950> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Emacron <anchor 227 885> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base Eogonek <anchor 227 720> mark @POS_1_0_MARK_0 <anchor 227 0> mark @POS_1_0_MARK_1 <anchor 385 0> mark @POS_1_0_MARK_2;
	pos base G <anchor 291 720> mark @POS_1_0_MARK_0 <anchor 291 0> mark @POS_1_0_MARK_1;
	pos base Gbreve <anchor 291 940> mark @POS_1_0_MARK_0 <anchor 291 0> mark @POS_1_0_MARK_1;
	pos base uni0122 <anchor 291 720> mark @POS_1_0_MARK_0 <anchor 291 -305> mark @POS_1_0_MARK_1;
	pos base Gdotaccent <anchor 291 920> mark @POS_1_0_MARK_0 <anchor 291 0> mark @POS_1_0_MARK_1;
	pos base I <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base IJ <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Iacute <anchor 125 950> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Icircumflex <anchor 125 950> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Idieresis <anchor 125 916> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Idotaccent <anchor 125 920> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Igrave <anchor 125 950> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Imacron <anchor 125 885> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base Iogonek <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 125 0> mark @POS_1_0_MARK_1 <anchor 160 0> mark @POS_1_0_MARK_2;
	pos base K <anchor 248 720> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1;
	pos base uni0136 <anchor 248 720> mark @POS_1_0_MARK_0 <anchor 268 -305> mark @POS_1_0_MARK_1;
	pos base L <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 207 0> mark @POS_1_0_MARK_1;
	pos base Lacute <anchor 125 950> mark @POS_1_0_MARK_0 <anchor 207 0> mark @POS_1_0_MARK_1;
	pos base Lcaron <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 207 0> mark @POS_1_0_MARK_1;
	pos base uni013B <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 207 -305> mark @POS_1_0_MARK_1;
	pos base Lslash <anchor 125 720> mark @POS_1_0_MARK_0 <anchor 207 0> mark @POS_1_0_MARK_1;
	pos base N <anchor 270 720> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1;
	pos base Nacute <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1;
	pos base Ncaron <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1;
	pos base uni0145 <anchor 270 720> mark @POS_1_0_MARK_0 <anchor 270 -305> mark @POS_1_0_MARK_1;
	pos base Ntilde <anchor 270 928> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1;
	pos base O <anchor 270 720> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Oacute <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Ocircumflex <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Odieresis <anchor 270 916> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Ograve <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Ohungarumlaut <anchor 270 950> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Omacron <anchor 270 885> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Oslash <anchor 270 720> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base Otilde <anchor 270 928> mark @POS_1_0_MARK_0 <anchor 270 0> mark @POS_1_0_MARK_1 <anchor 486 10> mark @POS_1_0_MARK_2;
	pos base R <anchor 257 720> mark @POS_1_0_MARK_0 <anchor 277 0> mark @POS_1_0_MARK_1;
	pos base Racute <anchor 257 950> mark @POS_1_0_MARK_0 <anchor 277 0> mark @POS_1_0_MARK_1;
	pos base Rcaron <anchor 257 950> mark @POS_1_0_MARK_0 <anchor 277 0> mark @POS_1_0_MARK_1;
	pos base uni0156 <anchor 257 720> mark @POS_1_0_MARK_0 <anchor 277 -305> mark @POS_1_0_MARK_1;
	pos base S <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 209 0> mark @POS_1_0_MARK_1;
	pos base Sacute <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 209 0> mark @POS_1_0_MARK_1;
	pos base Scaron <anchor 229 950> mark @POS_1_0_MARK_0 <anchor 209 0> mark @POS_1_0_MARK_1;
	pos base Scedilla <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 206 -215> mark @POS_1_0_MARK_1;
	pos base uni0218 <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 209 -305> mark @POS_1_0_MARK_1;
	pos base T <anchor 231 720> mark @POS_1_0_MARK_0 <anchor 231 0> mark @POS_1_0_MARK_1;
	pos base Tcaron <anchor 231 950> mark @POS_1_0_MARK_0 <anchor 231 0> mark @POS_1_0_MARK_1;
	pos base uni021A <anchor 231 720> mark @POS_1_0_MARK_0 <anchor 231 -305> mark @POS_1_0_MARK_1;
	pos base U <anchor 288 720> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Uacute <anchor 288 950> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Ubreve <anchor 288 940> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Ucircumflex <anchor 288 950> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Udieresis <anchor 288 916> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Ugrave <anchor 288 950> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Uhungarumlaut <anchor 288 950> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Umacron <anchor 288 885> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Uogonek <anchor 288 720> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base Uring <anchor 288 986> mark @POS_1_0_MARK_0 <anchor 268 0> mark @POS_1_0_MARK_1 <anchor 334 0> mark @POS_1_0_MARK_2;
	pos base W <anchor 346 720> mark @POS_1_0_MARK_0 <anchor 326 0> mark @POS_1_0_MARK_1;
	pos base Wacute <anchor 346 950> mark @POS_1_0_MARK_0 <anchor 326 0> mark @POS_1_0_MARK_1;
	pos base Wcircumflex <anchor 346 950> mark @POS_1_0_MARK_0 <anchor 326 0> mark @POS_1_0_MARK_1;
	pos base Wdieresis <anchor 346 916> mark @POS_1_0_MARK_0 <anchor 326 0> mark @POS_1_0_MARK_1;
	pos base Wgrave <anchor 346 950> mark @POS_1_0_MARK_0 <anchor 326 0> mark @POS_1_0_MARK_1;
	pos base Y <anchor 259 720> mark @POS_1_0_MARK_0 <anchor 239 0> mark @POS_1_0_MARK_1;
	pos base Yacute <anchor 259 950> mark @POS_1_0_MARK_0 <anchor 239 0> mark @POS_1_0_MARK_1;
	pos base Ycircumflex <anchor 259 950> mark @POS_1_0_MARK_0 <anchor 239 0> mark @POS_1_0_MARK_1;
	pos base Ydieresis <anchor 259 916> mark @POS_1_0_MARK_0 <anchor 239 0> mark @POS_1_0_MARK_1;
	pos base Ygrave <anchor 259 950> mark @POS_1_0_MARK_0 <anchor 239 0> mark @POS_1_0_MARK_1;
	pos base Z <anchor 234 720> mark @POS_1_0_MARK_0 <anchor 214 0> mark @POS_1_0_MARK_1;
	pos base Zacute <anchor 234 950> mark @POS_1_0_MARK_0 <anchor 214 0> mark @POS_1_0_MARK_1;
	pos base Zcaron <anchor 234 950> mark @POS_1_0_MARK_0 <anchor 214 0> mark @POS_1_0_MARK_1;
	pos base Zdotaccent <anchor 234 920> mark @POS_1_0_MARK_0 <anchor 214 0> mark @POS_1_0_MARK_1;
	pos base a <anchor 200 510> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base aacute <anchor 200 740> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base abreve <anchor 200 730> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base uni01CE <anchor 200 740> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base acircumflex <anchor 200 740> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base adieresis <anchor 200 706> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base agrave <anchor 200 740> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base amacron <anchor 200 675> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base aogonek <anchor 200 510> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base aring <anchor 200 776> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base atilde <anchor 200 718> mark @POS_1_0_MARK_0 <anchor 200 0> mark @POS_1_0_MARK_1 <anchor 344 0> mark @POS_1_0_MARK_2;
	pos base c <anchor 208 510> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base cacute <anchor 208 740> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base ccaron <anchor 208 740> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base ccedilla <anchor 208 510> mark @POS_1_0_MARK_0 <anchor 179 -215> mark @POS_1_0_MARK_1;
	pos base cdotaccent <anchor 208 710> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base d <anchor 229 740> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1;
	pos base dcaron <anchor 229 740> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1;
	pos base dcroat <anchor 229 740> mark @POS_1_0_MARK_0 <anchor 229 0> mark @POS_1_0_MARK_1;
	pos base e <anchor 193 510> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base eacute <anchor 193 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base ecaron <anchor 193 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base ecircumflex <anchor 193 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base edieresis <anchor 193 706> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base edotaccent <anchor 193 710> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base egrave <anchor 193 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base emacron <anchor 193 675> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base eogonek <anchor 193 510> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 239 0> mark @POS_1_0_MARK_2;
	pos base g <anchor 196 510> mark @POS_1_0_MARK_0 <anchor 196 -205> mark @POS_1_0_MARK_1;
	pos base gbreve <anchor 196 730> mark @POS_1_0_MARK_0 <anchor 196 -205> mark @POS_1_0_MARK_1;
	pos base uni0123 <anchor 196 814> mark @POS_1_0_MARK_0 <anchor 196 -205> mark @POS_1_0_MARK_1;
	pos base gdotaccent <anchor 196 710> mark @POS_1_0_MARK_0 <anchor 196 -205> mark @POS_1_0_MARK_1;
	pos base i <anchor 112 0> mark @POS_1_0_MARK_1;
	pos base dotlessi <anchor 112 510> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base iacute <anchor 112 740> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base icircumflex <anchor 112 740> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base idieresis <anchor 112 706> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base i.loclTRK <anchor 112 710> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base igrave <anchor 112 740> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base ij <anchor 112 0> mark @POS_1_0_MARK_1;
	pos base imacron <anchor 112 675> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base iogonek <anchor 112 710> mark @POS_1_0_MARK_0 <anchor 112 0> mark @POS_1_0_MARK_1 <anchor 167 0> mark @POS_1_0_MARK_2;
	pos base k <anchor 226 740> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1;
	pos base uni0137 <anchor 226 740> mark @POS_1_0_MARK_0 <anchor 226 -305> mark @POS_1_0_MARK_1;
	pos base l <anchor 85 710> mark @POS_1_0_MARK_0 <anchor 110 0> mark @POS_1_0_MARK_1;
	pos base lacute <anchor 85 940> mark @POS_1_0_MARK_0 <anchor 110 0> mark @POS_1_0_MARK_1;
	pos base lcaron <anchor 85 710> mark @POS_1_0_MARK_0 <anchor 110 0> mark @POS_1_0_MARK_1;
	pos base uni013C <anchor 85 710> mark @POS_1_0_MARK_0 <anchor 110 -305> mark @POS_1_0_MARK_1;
	pos base lslash <anchor 111 710> mark @POS_1_0_MARK_0 <anchor 136 0> mark @POS_1_0_MARK_1;
	pos base n <anchor 235 510> mark @POS_1_0_MARK_0 <anchor 235 0> mark @POS_1_0_MARK_1;
	pos base nacute <anchor 235 740> mark @POS_1_0_MARK_0 <anchor 235 0> mark @POS_1_0_MARK_1;
	pos base ncaron <anchor 235 740> mark @POS_1_0_MARK_0 <anchor 235 0> mark @POS_1_0_MARK_1;
	pos base uni0146 <anchor 235 510> mark @POS_1_0_MARK_0 <anchor 235 -305> mark @POS_1_0_MARK_1;
	pos base ntilde <anchor 235 718> mark @POS_1_0_MARK_0 <anchor 235 0> mark @POS_1_0_MARK_1;
	pos base o <anchor 204 510> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base oacute <anchor 204 740> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base ocircumflex <anchor 204 740> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base odieresis <anchor 204 706> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base ograve <anchor 204 740> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base ohungarumlaut <anchor 204 740> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base omacron <anchor 204 675> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base oslash <anchor 204 510> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base otilde <anchor 204 718> mark @POS_1_0_MARK_0 <anchor 204 0> mark @POS_1_0_MARK_1 <anchor 367 10> mark @POS_1_0_MARK_2;
	pos base r <anchor 159 510> mark @POS_1_0_MARK_0 <anchor 109 0> mark @POS_1_0_MARK_1;
	pos base racute <anchor 159 740> mark @POS_1_0_MARK_0 <anchor 109 0> mark @POS_1_0_MARK_1;
	pos base rcaron <anchor 159 740> mark @POS_1_0_MARK_0 <anchor 109 0> mark @POS_1_0_MARK_1;
	pos base uni0157 <anchor 159 510> mark @POS_1_0_MARK_0 <anchor 109 -305> mark @POS_1_0_MARK_1;
	pos base s <anchor 154 510> mark @POS_1_0_MARK_0 <anchor 144 0> mark @POS_1_0_MARK_1;
	pos base sacute <anchor 154 740> mark @POS_1_0_MARK_0 <anchor 144 0> mark @POS_1_0_MARK_1;
	pos base scaron <anchor 154 740> mark @POS_1_0_MARK_0 <anchor 144 0> mark @POS_1_0_MARK_1;
	pos base scedilla <anchor 154 510> mark @POS_1_0_MARK_0 <anchor 141 -215> mark @POS_1_0_MARK_1;
	pos base uni0219 <anchor 154 510> mark @POS_1_0_MARK_0 <anchor 144 -305> mark @POS_1_0_MARK_1;
	pos base t <anchor 130 510> mark @POS_1_0_MARK_0 <anchor 150 0> mark @POS_1_0_MARK_1;
	pos base tcaron <anchor 130 510> mark @POS_1_0_MARK_0 <anchor 150 0> mark @POS_1_0_MARK_1;
	pos base uni021B <anchor 130 510> mark @POS_1_0_MARK_0 <anchor 150 -305> mark @POS_1_0_MARK_1;
	pos base u <anchor 216 510> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base uacute <anchor 216 740> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base ubreve <anchor 216 730> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base ucircumflex <anchor 216 740> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base udieresis <anchor 216 706> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base ugrave <anchor 216 740> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base uhungarumlaut <anchor 216 740> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base umacron <anchor 216 675> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base uogonek <anchor 216 510> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base uring <anchor 216 776> mark @POS_1_0_MARK_0 <anchor 226 0> mark @POS_1_0_MARK_1 <anchor 336 0> mark @POS_1_0_MARK_2;
	pos base w <anchor 311 510> mark @POS_1_0_MARK_0 <anchor 299 0> mark @POS_1_0_MARK_1;
	pos base wacute <anchor 311 740> mark @POS_1_0_MARK_0 <anchor 299 0> mark @POS_1_0_MARK_1;
	pos base wcircumflex <anchor 311 740> mark @POS_1_0_MARK_0 <anchor 299 0> mark @POS_1_0_MARK_1;
	pos base wdieresis <anchor 311 706> mark @POS_1_0_MARK_0 <anchor 299 0> mark @POS_1_0_MARK_1;
	pos base wgrave <anchor 311 740> mark @POS_1_0_MARK_0 <anchor 299 0> mark @POS_1_0_MARK_1;
	pos base y <anchor 201 510> mark @POS_1_0_MARK_0 <anchor 201 0> mark @POS_1_0_MARK_1;
	pos base yacute <anchor 201 740> mark @POS_1_0_MARK_0 <anchor 201 0> mark @POS_1_0_MARK_1;
	pos base ycircumflex <anchor 201 740> mark @POS_1_0_MARK_0 <anchor 201 0> mark @POS_1_0_MARK_1;
	pos base ydieresis <anchor 201 706> mark @POS_1_0_MARK_0 <anchor 201 0> mark @POS_1_0_MARK_1;
	pos base ygrave <anchor 201 740> mark @POS_1_0_MARK_0 <anchor 201 0> mark @POS_1_0_MARK_1;
	pos base z <anchor 203 510> mark @POS_1_0_MARK_0 <anchor 177 0> mark @POS_1_0_MARK_1;
	pos base zacute <anchor 203 740> mark @POS_1_0_MARK_0 <anchor 177 0> mark @POS_1_0_MARK_1;
	pos base zcaron <anchor 203 740> mark @POS_1_0_MARK_0 <anchor 177 0> mark @POS_1_0_MARK_1;
	pos base zdotaccent <anchor 203 710> mark @POS_1_0_MARK_0 <anchor 177 0> mark @POS_1_0_MARK_1;
	pos base c.ss01 <anchor 208 510> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base cacute.ss01 <anchor 208 740> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base ccaron.ss01 <anchor 208 740> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base ccedilla.ss01 <anchor 208 510> mark @POS_1_0_MARK_0 <anchor 179 -215> mark @POS_1_0_MARK_1;
	pos base cdotaccent.ss01 <anchor 208 710> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base d.ss01 <anchor 223 740> mark @POS_1_0_MARK_0 <anchor 223 0> mark @POS_1_0_MARK_1;
	pos base dcaron.ss01 <anchor 223 740> mark @POS_1_0_MARK_0 <anchor 223 0> mark @POS_1_0_MARK_1;
	pos base dcroat.ss01 <anchor 223 740> mark @POS_1_0_MARK_0 <anchor 223 0> mark @POS_1_0_MARK_1;
	pos base e.ss01 <anchor 178 510> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base eacute.ss01 <anchor 178 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base ecaron.ss01 <anchor 178 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base ecircumflex.ss01 <anchor 178 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base edieresis.ss01 <anchor 178 706> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base edotaccent.ss01 <anchor 178 710> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base egrave.ss01 <anchor 178 740> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base emacron.ss01 <anchor 178 675> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base eogonek.ss01 <anchor 178 510> mark @POS_1_0_MARK_0 <anchor 178 0> mark @POS_1_0_MARK_1 <anchor 266 10> mark @POS_1_0_MARK_2;
	pos base g.ss01 <anchor 198 510> mark @POS_1_0_MARK_0 <anchor 198 -205> mark @POS_1_0_MARK_1;
	pos base gbreve.ss01 <anchor 198 730> mark @POS_1_0_MARK_0 <anchor 198 -205> mark @POS_1_0_MARK_1;
	pos base uni0123.ss01 <anchor 198 814> mark @POS_1_0_MARK_0 <anchor 198 -205> mark @POS_1_0_MARK_1;
	pos base gdotaccent.ss01 <anchor 198 710> mark @POS_1_0_MARK_0 <anchor 198 -205> mark @POS_1_0_MARK_1;
	pos base cent <anchor 208 510> mark @POS_1_0_MARK_0 <anchor 182 0> mark @POS_1_0_MARK_1;
	pos base dollar <anchor 229 720> mark @POS_1_0_MARK_0 <anchor 209 0> mark @POS_1_0_MARK_1;
	pos base yen <anchor 277 720> mark @POS_1_0_MARK_0 <anchor 257 0> mark @POS_1_0_MARK_1;
} POS_1;
lookup POS_2 {
} POS_2;
script latn;
language dflt;
lookup POS_1;
lookup POS_2;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_3 {
	lookupflag UseMarkFilteringSet [uni0326 uni0327];
	markClass uni0326 <anchor 114 0> @POS_3_0_MARK_0;
	markClass uni0327 <anchor 154 0> @POS_3_0_MARK_0;
	pos mark uni0326 <anchor 114 -305> mark @POS_3_0_MARK_0;
	pos mark uni0327 <anchor 151 -215> mark @POS_3_0_MARK_0;
} POS_3;
lookup POS_4 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	markClass uni0308 <anchor 205 510> @POS_4_0_MARK_0;
	markClass uni0307 <anchor 110 510> @POS_4_0_MARK_0;
	markClass gravecomb <anchor 178 510> @POS_4_0_MARK_0;
	markClass acutecomb <anchor 177 510> @POS_4_0_MARK_0;
	markClass uni030B <anchor 181 510> @POS_4_0_MARK_0;
	markClass uni0302 <anchor 217 510> @POS_4_0_MARK_0;
	markClass uni030C <anchor 217 510> @POS_4_0_MARK_0;
	markClass uni0306 <anchor 204 510> @POS_4_0_MARK_0;
	markClass uni030A <anchor 168 510> @POS_4_0_MARK_0;
	markClass tildecomb <anchor 226 510> @POS_4_0_MARK_0;
	markClass uni0304 <anchor 206 510> @POS_4_0_MARK_0;
	markClass uni0312 <anchor 115 510> @POS_4_0_MARK_0;
	pos mark uni0308 <anchor 205 706> mark @POS_4_0_MARK_0;
	pos mark uni0307 <anchor 110 710> mark @POS_4_0_MARK_0;
	pos mark gravecomb <anchor 178 740> mark @POS_4_0_MARK_0;
	pos mark acutecomb <anchor 177 740> mark @POS_4_0_MARK_0;
	pos mark uni030B <anchor 181 740> mark @POS_4_0_MARK_0;
	pos mark uni0302 <anchor 217 740> mark @POS_4_0_MARK_0;
	pos mark uni030C <anchor 217 740> mark @POS_4_0_MARK_0;
	pos mark uni0306 <anchor 204 730> mark @POS_4_0_MARK_0;
	pos mark uni030A <anchor 168 776> mark @POS_4_0_MARK_0;
	pos mark tildecomb <anchor 226 718> mark @POS_4_0_MARK_0;
	pos mark uni0304 <anchor 206 675> mark @POS_4_0_MARK_0;
	pos mark uni0312 <anchor 115 814> mark @POS_4_0_MARK_0;
} POS_4;
script latn;
language dflt;
lookup POS_3;
lookup POS_4;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 990;
},
{
name = typoDescender;
value = -310;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 990;
},
{
name = winDescent;
value = 310;
},
{
name = hheaAscender;
value = 990;
},
{
name = hheaDescender;
value = -310;
},
{
name = strikeoutPosition;
value = 301;
},
{
name = strikeoutSize;
value = 38;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
23 1 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
12 8 1 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
20 6 1 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 8
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 3 values pushed */
832 1 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 9
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 3 values pushed */
64 1 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
14 6 1 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    76,
    76,
    25,
    25,
    720,
    0,
    740,
    510,
    0,
    \"-205\",
    730,
    \"-9\",
    740,
    516,
    \"-9\",
    \"-215\"
)";
}
);
id = m01;
metricValues = (
{
pos = 990;
},
{
pos = 720;
},
{
pos = 510;
},
{
},
{
pos = -310;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,-130,o),
(492,-122,qs),
(492,782,ls),
(492,790,o),
(484,790,qs),
(118,790,ls),
(110,790,o),
(110,782,qs),
(110,-122,ls),
(110,-130,o),
(118,-130,qs),
(484,-130,ls)
);
},
{
closed = 1;
nodes = (
(460,758,l),
(460,-98,l),
(142,-98,l),
(142,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
8 3 2 3 0 9 2 2 1 2 2 76 0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 15 14 13 12 0 11 0 11 21 5 6 23
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = .notdef;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,0,o),
(151,11,qs),
(151,20,o),
(134,23,qs),
(119,25,ls),
(74,31,o),
(89,88,qs),
(123,222,ls),
(130,248,o),
(156,248,qs),
(261,248,ls),
(288,248,o),
(294,222,qs),
(332,67,ls),
(337,45,o),
(328,27,o),
(311,25,qs),
(292,23,ls),
(275,22,o),
(275,11,qs),
(275,0,o),
(289,0,qs),
(460,0,ls),
(475,0,o),
(475,10,qs),
(475,20,o),
(461,23,qs),
(446,26,ls),
(427,30,o),
(409,52,o),
(402,80,qs),
(244,714,ls),
(242,724,o),
(233,730,o),
(228,730,qs),
(224,730,o),
(215,724,o),
(213,714,qs),
(58,89,ls),
(51,61,o),
(31,30,o),
(11,26,qs),
(-4,23,ls),
(-18,20,o),
(-18,10,qs),
(-18,0,o),
(-3,0,qs),
(137,0,ls)
);
},
{
closed = 1;
nodes = (
(140,295,q),
(207,563,l),
(212,563,l),
(276,295,ls),
(279,278,o),
(263,278,qs),
(153,278,ls),
(137,278,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
52 1 5 1 1 76 7 1 5 0 4 3 5 4 103 0 1 1 20 77 0 3 3 0 95 2 6 2 0 0 15 0 78 50 48 1 0 48 55 50 55 38 35 29 28 26 23 13 11 0 47 1 46 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
lastChange = "2025-08-12 15:18:49 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (52,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,940);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (25,210);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni01CD;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (12,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (12,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (24,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (51,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,885);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (23,210);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (227,0);
ref = uni0328;
}
);
width = 457;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,986);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (61,210);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = ogonek;
pos = (421,0);
},
{
name = top;
pos = (229,928);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (3,210);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernRight = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,0,o),
(163,11,qs),
(163,20,o),
(146,23,qs),
(130,25,ls),
(107,28,o),
(98,62,o),
(111,88,qs),
(241,348,l),
(245,358,o),
(257,358,qs),
(400,358,ls),
(414,358,o),
(414,344,qs),
(414,66,ls),
(414,45,o),
(401,31,o),
(380,27,qs),
(357,23,ls),
(344,20,o),
(344,11,qs),
(344,0,o),
(359,0,qs),
(710,0,ls),
(733,0,o),
(735,23,qs),
(745,201,ls),
(747,218,o),
(733,218,qs),
(721,218,o),
(718,205,qs),
(706,146,ls),
(692,76,o),
(621,25,o),
(571,25,qs),
(522,25,o),
(485,57,o),
(485,93,qs),
(485,344,ls),
(485,358,o),
(499,358,qs),
(548,358,ls),
(571,358,o),
(596,336,o),
(603,301,qs),
(613,252,ls),
(617,237,o),
(630,239,qs),
(641,241,o),
(641,256,qs),
(641,481,ls),
(641,496,o),
(630,498,qs),
(617,500,o),
(613,485,qs),
(603,435,ls),
(593,388,o),
(549,388,qs),
(499,388,ls),
(485,388,o),
(485,402,qs),
(485,643,ls),
(485,672,o),
(516,695,o),
(556,695,qs),
(616,695,o),
(684,632,o),
(695,564,qs),
(701,527,ls),
(703,514,o),
(715,514,qs),
(730,514,o),
(728,531,q),
(720,697,ls),
(718,720,o),
(695,720,qs),
(315,720,ls),
(300,720,o),
(300,709,qs),
(300,700,o),
(313,697,qs),
(336,692,ls),
(357,688,o),
(371,675,o),
(360,654,qs),
(78,89,ls),
(51,34,o),
(11,26,qs),
(-4,23,ls),
(-18,20,o),
(-18,11,qs),
(-18,0,o),
(-3,0,qs),
(147,0,ls)
);
},
{
closed = 1;
nodes = (
(404,675,o),
(414,673,o),
(414,664,qs),
(414,402,ls),
(414,388,o),
(400,388,qs),
(279,388,ls),
(272,388,o),
(266,398,o),
(269,405,qs),
(400,667,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 96 values pushed */
19 1 3 1 20 1 2 3 66 1 6 7 67 1 0 6 4 76 0 2 3 4 3 2 4 128 0 7 5 6 5 7 6 128 10 1 4 9 1 5 7 4 5 105 0 3 3 1 95 0 1 1 14 77 0 6 6 0 96 8 11 2 0 0 15 0 78 1 0 99 96 83 80 71 68 65 63 59 57 53 50 36 33 29 27 23 21 18 15 0 93 1 92 12 7 22
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = AE;
unicode = 198;
},
{
glyphname = B;
kernLeft = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,0,o),
(396,52,o),
(450,145,o),
(450,204,qs),
(450,273,o),
(376,374,o),
(308,397,qs),
(301,399,o),
(301,409,o),
(307,412,qs),
(357,438,o),
(410,515,o),
(410,560,qs),
(410,606,o),
(365,678,o),
(287,720,o),
(237,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(241,0,ls)
);
},
{
closed = 1;
nodes = (
(160,437,o),
(160,466,qs),
(160,655,ls),
(160,695,o),
(213,695,qs),
(269,695,o),
(337,618,o),
(337,556,qs),
(337,494,o),
(266,411,o),
(213,411,qs),
(185,411,o)
);
},
{
closed = 1;
nodes = (
(160,94,qs),
(160,337,ls),
(160,386,o),
(222,386,qs),
(292,386,o),
(375,290,o),
(375,207,qs),
(375,124,o),
(293,25,o),
(228,25,qs),
(160,25,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
7 1 2 0 5 4 2 5 105 0 3 3 1 95 0 1 1 14 77 8 1 4 4 0 95 6 1 0 0 15 0 78 49 48 37 36 1 0 55 53 48 58 49 58 43 41 36 47 37 47 19 16 0 35 1 34 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (276,0);
},
{
name = top;
pos = (280,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,6,o),
(423,18,qs),
(436,25,o),
(436,39,qs),
(440,201,ls),
(440,216,o),
(429,218,qs),
(416,220,o),
(413,205,qs),
(401,156,ls),
(382,76,o),
(327,20,o),
(282,20,qs),
(240,20,o),
(165,98,o),
(118,252,o),
(118,364,qs),
(118,528,o),
(211,701,o),
(281,701,qs),
(319,701,o),
(374,641,o),
(395,563,qs),
(405,526,ls),
(408,513,o),
(419,513,qs),
(431,513,o),
(431,530,qs),
(428,682,ls),
(428,696,o),
(416,703,qs),
(392,715,o),
(330,730,o),
(289,730,qs),
(220,730,o),
(107,639,o),
(40,474,o),
(40,364,qs),
(40,250,o),
(101,83,o),
(212,-9,o),
(286,-9,qs),
(334,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 2 3 4 3 2 4 128 0 3 3 1 97 0 1 1 20 77 0 4 4 0 97 5 1 0 0 21 0 78 1 0 30 28 23 21 17 15 9 7 0 42 1 42 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (276,0);
},
{
name = top;
pos = (280,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (103,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (276,0);
},
{
name = top;
pos = (280,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (63,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (273,-215);
},
{
name = top;
pos = (280,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (122,0);
ref = uni0327;
}
);
width = 480;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (276,0);
},
{
name = top;
pos = (280,920);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (170,210);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernLeft = B;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (255,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,0,o),
(425,88,o),
(490,248,o),
(490,357,qs),
(490,465,o),
(428,629,o),
(314,720,o),
(236,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,33,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(226,0,ls)
);
},
{
closed = 1;
nodes = (
(160,59,o),
(160,99,qs),
(160,621,ls),
(160,694,o),
(236,694,qs),
(323,694,o),
(412,517,o),
(412,357,qs),
(412,196,o),
(319,26,o),
(230,26,qs),
(193,26,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 95 0 1 1 14 77 5 1 2 2 0 95 4 1 0 0 15 0 78 27 26 1 0 33 31 26 37 27 37 18 15 0 25 1 24 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = D;
unicode = 68;
},
{
glyphname = Eth;
kernLeft = B;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (255,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,0,o),
(425,88,o),
(490,248,o),
(490,357,qs),
(490,465,o),
(428,629,o),
(314,720,o),
(236,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,386,l),
(29,386,ls),
(19,386,o),
(19,376,qs),
(19,368,ls),
(19,358,o),
(29,358,qs),
(89,358,l),
(89,66,ls),
(89,33,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(226,0,ls)
);
},
{
closed = 1;
nodes = (
(160,59,o),
(160,99,qs),
(160,358,l),
(284,358,ls),
(294,358,o),
(294,368,qs),
(294,376,ls),
(294,386,o),
(284,386,qs),
(160,386,l),
(160,621,ls),
(160,694,o),
(236,694,qs),
(323,694,o),
(412,517,o),
(412,357,qs),
(412,196,o),
(319,26,o),
(230,26,qs),
(193,26,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 2 7 1 1 4 2 1 105 0 5 5 3 95 0 3 3 14 77 9 1 4 4 0 95 8 1 0 0 15 0 78 35 34 1 0 50 48 45 43 41 39 34 53 35 53 26 23 15 13 10 8 0 33 1 32 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Dcaron;
kernLeft = B;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (255,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (38,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernLeft = B;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (255,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Eth;
}
);
width = 530;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = E;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,0,o),
(410,23,qs),
(420,201,ls),
(422,218,o),
(408,218,qs),
(396,218,o),
(393,205,qs),
(381,146,ls),
(367,76,o),
(296,25,o),
(246,25,qs),
(197,25,o),
(160,57,o),
(160,93,qs),
(160,344,ls),
(160,358,o),
(174,358,qs),
(223,358,ls),
(246,358,o),
(271,336,o),
(278,301,qs),
(288,252,ls),
(292,237,o),
(305,239,qs),
(316,241,o),
(316,256,qs),
(316,481,ls),
(316,496,o),
(305,498,qs),
(292,500,o),
(288,485,qs),
(278,435,ls),
(268,388,o),
(224,388,qs),
(174,388,ls),
(160,388,o),
(160,402,qs),
(160,643,ls),
(160,672,o),
(191,695,o),
(231,695,qs),
(291,695,o),
(359,632,o),
(370,564,qs),
(376,527,ls),
(378,514,o),
(390,514,qs),
(405,514,o),
(403,531,q),
(395,697,ls),
(393,720,o),
(370,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(385,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
20 1 3 1 21 1 2 3 67 1 6 7 68 1 0 6 4 76 0 2 3 4 3 2 4 128 0 7 5 6 5 7 6 128 0 4 0 5 7 4 5 105 0 3 3 1 95 0 1 1 14 77 0 6 6 0 96 8 1 0 0 15 0 78 1 0 66 64 60 58 54 51 37 34 30 28 24 22 19 16 0 70 1 69 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (50,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecaron;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (10,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (10,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (22,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,920);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (117,210);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (49,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,885);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (21,210);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
kernLeft = B;
kernRight = AE;
layers = (
{
anchors = (
{
name = bottom;
pos = (227,0);
},
{
name = ogonek;
pos = (385,0);
},
{
name = top;
pos = (227,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (191,0);
ref = uni0328;
}
);
width = 453;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = F;
kernLeft = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,0,o),
(252,12,qs),
(252,21,o),
(241,23,qs),
(194,30,ls),
(173,33,o),
(160,50,o),
(160,71,qs),
(160,344,ls),
(160,358,o),
(174,358,qs),
(208,358,ls),
(231,358,o),
(256,336,o),
(263,301,qs),
(274,252,ls),
(277,239,o),
(289,239,qs),
(301,239,o),
(301,256,qs),
(301,481,ls),
(301,498,o),
(289,498,qs),
(277,498,o),
(274,485,qs),
(263,435,ls),
(253,388,o),
(209,388,qs),
(174,388,ls),
(160,388,o),
(160,402,qs),
(160,638,ls),
(160,667,o),
(192,695,o),
(236,695,qs),
(259,695,o),
(309,670,o),
(349,612,o),
(357,560,qs),
(362,527,ls),
(364,514,o),
(376,514,qs),
(391,514,o),
(389,531,q),
(381,697,ls),
(379,720,o),
(356,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(237,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
20 1 3 1 21 1 2 3 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 3 5 3 2 5 128 0 4 0 7 6 4 7 105 0 3 3 1 95 0 1 1 14 77 0 6 6 5 97 0 5 5 17 77 8 1 0 0 15 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 3 5 3 2 5 128 0 4 0 7 6 4 7 105 0 5 0 6 0 5 6 105 0 3 3 1 95 0 1 1 14 77 8 1 0 0 15 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 55 52 48 46 43 41 38 35 31 29 24 22 19 16 0 65 1 64 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 408;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = top;
pos = (291,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,6,o),
(418,18,qs),
(433,26,o),
(445,39,o),
(445,50,qs),
(445,321,ls),
(445,342,o),
(453,360,o),
(475,363,qs),
(490,365,ls),
(501,367,o),
(501,376,qs),
(501,388,o),
(486,388,qs),
(303,388,ls),
(288,388,o),
(288,377,qs),
(288,366,o),
(301,365,qs),
(340,361,ls),
(361,359,o),
(374,343,o),
(374,322,qs),
(374,103,ls),
(374,54,o),
(332,18,o),
(291,18,qs),
(215,18,o),
(118,195,o),
(118,364,qs),
(118,528,o),
(213,701,o),
(286,701,qs),
(335,701,o),
(391,639,o),
(413,556,qs),
(421,526,ls),
(424,513,o),
(435,513,qs),
(447,513,o),
(447,530,qs),
(444,682,ls),
(444,696,o),
(431,703,qs),
(407,715,o),
(343,730,o),
(304,730,qs),
(227,730,o),
(108,639,o),
(40,474,o),
(40,364,qs),
(40,250,o),
(98,83,o),
(210,-9,o),
(291,-9,qs),
(332,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 20 77 0 4 4 0 97 6 1 0 0 21 0 78 1 0 42 39 29 27 23 21 17 15 9 7 0 55 1 55 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = top;
pos = (291,940);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (87,210);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = uni0122;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (291,-305);
},
{
name = top;
pos = (291,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (177,0);
ref = uni0326;
}
);
width = 521;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
kernRight = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (291,0);
},
{
name = top;
pos = (291,920);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (181,210);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
kernLeft = B;
kernRight = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,0,o),
(232,12,qs),
(232,21,o),
(221,23,qs),
(194,27,ls),
(173,30,o),
(160,46,o),
(160,67,qs),
(160,344,ls),
(160,358,o),
(174,358,qs),
(372,358,ls),
(386,358,o),
(386,344,qs),
(386,67,ls),
(386,46,o),
(373,30,o),
(352,27,qs),
(325,23,ls),
(314,21,o),
(314,12,qs),
(314,0,o),
(329,0,qs),
(512,0,ls),
(527,0,o),
(527,11,qs),
(527,20,o),
(514,23,qs),
(491,27,ls),
(470,31,o),
(457,45,o),
(457,66,qs),
(457,654,ls),
(457,675,o),
(470,689,o),
(491,693,qs),
(514,697,ls),
(527,700,o),
(527,709,qs),
(527,720,o),
(512,720,qs),
(329,720,ls),
(314,720,o),
(314,708,qs),
(314,699,o),
(325,697,qs),
(352,693,ls),
(373,690,o),
(386,674,o),
(386,653,qs),
(386,402,ls),
(386,388,o),
(372,388,qs),
(174,388,ls),
(160,388,o),
(160,402,qs),
(160,653,ls),
(160,674,o),
(173,690,o),
(194,693,qs),
(221,697,ls),
(232,699,o),
(232,708,qs),
(232,720,o),
(217,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(217,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 0 5 0 2 5 103 3 1 1 1 14 77 4 6 2 0 0 15 0 78 1 0 73 70 61 58 43 40 31 28 19 16 0 83 1 82 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
kernLeft = B;
kernRight = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,0,o),
(232,12,qs),
(232,21,o),
(221,23,qs),
(194,27,ls),
(173,30,o),
(160,46,o),
(160,67,qs),
(160,344,ls),
(160,358,o),
(174,358,qs),
(372,358,ls),
(386,358,o),
(386,344,qs),
(386,67,ls),
(386,46,o),
(373,30,o),
(352,27,qs),
(325,23,ls),
(314,21,o),
(314,12,qs),
(314,0,o),
(329,0,qs),
(512,0,ls),
(527,0,o),
(527,11,qs),
(527,20,o),
(514,23,qs),
(491,27,ls),
(470,31,o),
(457,45,o),
(457,66,qs),
(457,532,l),
(517,532,ls),
(527,532,o),
(527,542,qs),
(527,550,ls),
(527,560,o),
(517,560,qs),
(457,560,l),
(457,654,ls),
(457,675,o),
(470,689,o),
(491,693,qs),
(514,697,ls),
(527,700,o),
(527,709,qs),
(527,720,o),
(512,720,qs),
(329,720,ls),
(314,720,o),
(314,708,qs),
(314,699,o),
(325,697,qs),
(352,693,ls),
(373,690,o),
(386,674,o),
(386,653,qs),
(386,560,l),
(160,560,l),
(160,653,ls),
(160,674,o),
(173,690,o),
(194,693,qs),
(221,697,ls),
(232,699,o),
(232,708,qs),
(232,720,o),
(217,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,560,l),
(29,560,ls),
(19,560,o),
(19,550,qs),
(19,542,ls),
(19,532,o),
(29,532,qs),
(89,532,l),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(217,0,ls)
);
},
{
closed = 1;
nodes = (
(160,402,qs),
(160,532,l),
(386,532,l),
(386,402,ls),
(386,388,o),
(372,388,qs),
(174,388,ls),
(160,388,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
6 4 2 2 11 7 2 1 10 2 1 106 13 1 10 0 9 0 10 9 103 5 1 3 3 14 77 8 12 2 0 0 15 0 78 98 96 1 0 101 100 96 103 98 103 85 82 73 70 62 60 57 55 47 44 36 35 27 24 16 14 11 9 0 95 1 94 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = I;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,0,o),
(230,11,qs),
(230,20,o),
(217,23,qs),
(194,27,ls),
(173,31,o),
(160,45,o),
(160,66,qs),
(160,654,ls),
(160,675,o),
(173,689,o),
(194,693,qs),
(217,697,ls),
(230,700,o),
(230,709,qs),
(230,720,o),
(215,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(215,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
0 1 1 14 77 2 1 0 0 15 0 78 1 0 19 16 0 35 1 34 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
kernLeft = B;
kernRight = IJ;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (249,0);
ref = J;
}
);
width = 498;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-52,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-92,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-80,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,920);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (15,210);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-53,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,885);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-81,210);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
kernLeft = B;
kernRight = H;
layers = (
{
anchors = (
{
name = bottom;
pos = (125,0);
},
{
name = ogonek;
pos = (160,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (-34,0);
ref = uni0328;
}
);
width = 249;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = J;
kernRight = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,-76,o),
(160,44,qs),
(160,654,ls),
(160,675,o),
(173,689,o),
(194,693,qs),
(217,697,ls),
(230,700,o),
(230,709,qs),
(230,720,o),
(215,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,-91,ls),
(89,-131,o),
(69,-175,o),
(50,-175,qs),
(37,-175,o),
(25,-155,o),
(16,-129,o),
(2,-109,o),
(-15,-109,qs),
(-33,-109,o),
(-56,-135,o),
(-56,-155,qs),
(-56,-182,o),
(-17,-215,o),
(14,-215,qs),
(82,-215,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 2 1 114 0 3 3 14 77 0 2 2 0 98 4 1 0 0 25 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 3 2 3 1 2 128 0 3 3 14 77 0 2 2 0 98 4 1 0 0 25 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 25 22 12 10 7 5 0 35 1 35 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
kernLeft = B;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = top;
pos = (248,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,0,o),
(232,12,qs),
(232,21,o),
(221,23,qs),
(194,27,ls),
(173,30,o),
(160,46,o),
(160,67,qs),
(160,274,ls),
(160,288,o),
(165,306,o),
(172,316,qs),
(193,349,ls),
(198,357,o),
(208,356,o),
(212,348,qs),
(356,74,ls),
(379,30,o),
(340,25,qs),
(323,23,ls),
(310,21,o),
(310,11,qs),
(310,0,o),
(324,0,qs),
(502,0,ls),
(516,0,o),
(516,11,qs),
(516,22,o),
(504,23,qs),
(480,27,ls),
(468,29,o),
(451,43,o),
(443,59,qs),
(255,413,ls),
(246,429,o),
(256,446,qs),
(369,623,ls),
(394,662,o),
(434,692,o),
(465,695,qs),
(484,697,ls),
(497,698,o),
(497,709,qs),
(497,720,o),
(483,720,qs),
(313,720,ls),
(299,720,o),
(299,710,qs),
(299,700,o),
(312,697,qs),
(335,693,ls),
(374,686,o),
(341,635,qs),
(177,378,ls),
(172,369,o),
(160,373,o),
(160,383,qs),
(160,653,ls),
(160,674,o),
(173,690,o),
(194,693,qs),
(221,697,ls),
(232,699,o),
(232,708,qs),
(232,720,o),
(217,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(217,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 1 1 14 77 3 4 2 0 0 15 0 78 1 0 61 58 40 37 19 16 0 84 1 83 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 496;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
kernLeft = B;
kernRight = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,-305);
},
{
name = top;
pos = (248,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (154,0);
ref = uni0326;
}
);
width = 496;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernLeft = B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,0,o),
(382,23,qs),
(394,211,ls),
(396,228,o),
(382,228,qs),
(370,228,o),
(367,215,qs),
(354,148,ls),
(344,97,o),
(304,44,o),
(255,25,o),
(232,25,qs),
(201,25,o),
(160,57,o),
(160,93,qs),
(160,653,ls),
(160,674,o),
(173,690,o),
(194,693,qs),
(221,697,ls),
(232,699,o),
(232,708,qs),
(232,720,o),
(217,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(357,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
39 1 2 3 40 1 0 2 2 76 0 3 1 2 1 3 2 128 0 1 1 14 77 0 2 2 0 96 4 1 0 0 15 0 78 1 0 38 36 31 29 19 16 0 42 1 41 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernLeft = B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (125,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (-52,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernLeft = B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (239,0);
ref = uni030C.alt;
}
);
width = 413;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernLeft = B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,-305);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (93,0);
ref = uni0326;
}
);
width = 413;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Lslash;
kernLeft = B;
kernRight = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (207,0);
},
{
name = top;
pos = (125,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,0,o),
(382,23,qs),
(394,211,ls),
(396,228,o),
(382,228,qs),
(370,228,o),
(367,215,qs),
(354,148,ls),
(344,97,o),
(304,44,o),
(255,25,o),
(232,25,qs),
(201,25,o),
(160,57,o),
(160,93,qs),
(160,367,l),
(264,432,ls),
(272,437,o),
(267,446,qs),
(262,453,ls),
(257,461,o),
(249,456,qs),
(160,400,l),
(160,653,ls),
(160,674,o),
(173,690,o),
(194,693,qs),
(221,697,ls),
(232,699,o),
(232,708,qs),
(232,720,o),
(217,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,353,l),
(15,307,ls),
(7,302,o),
(12,293,qs),
(17,286,ls),
(22,278,o),
(30,283,qs),
(89,320,l),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(357,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
42 35 16 9 4 3 1 55 1 2 3 56 1 0 2 3 76 0 3 1 2 1 3 2 128 0 1 1 14 77 0 2 2 0 96 4 1 0 0 15 0 78 1 0 54 52 47 45 27 24 0 58 1 57 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,16,o),
(330,26,qs),
(482,640,ls),
(484,646,o),
(493,645,o),
(493,638,qs),
(510,66,ls),
(511,45,o),
(497,31,o),
(476,27,qs),
(453,23,ls),
(440,20,o),
(440,11,qs),
(440,0,o),
(455,0,qs),
(636,0,ls),
(651,0,o),
(651,11,qs),
(651,20,o),
(638,23,qs),
(615,27,ls),
(594,31,o),
(582,45,o),
(581,66,qs),
(561,654,ls),
(560,675,o),
(574,689,o),
(595,693,qs),
(618,697,ls),
(631,700,o),
(631,709,qs),
(631,720,o),
(616,720,qs),
(498,720,ls),
(472,720,o),
(466,695,qs),
(340,191,l),
(339,184,o),
(330,184,o),
(328,191,qs),
(207,690,ls),
(200,720,o),
(169,720,qs),
(49,720,ls),
(34,720,o),
(34,709,qs),
(34,700,o),
(47,697,qs),
(70,693,ls),
(93,689,o),
(107,675,o),
(106,654,qs),
(86,86,ls),
(85,58,o),
(66,29,o),
(40,25,qs),
(27,23,ls),
(14,22,o),
(14,11,qs),
(14,0,o),
(29,0,qs),
(172,0,ls),
(187,0,o),
(187,11,qs),
(187,22,o),
(174,23,qs),
(161,25,ls),
(136,29,o),
(116,58,o),
(117,86,qs),
(137,638,ls),
(137,645,o),
(147,646,o),
(148,639,q),
(299,26,ls),
(301,16,o),
(311,10,o),
(315,10,qs),
(319,10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
72 1 2 1 1 76 0 2 1 0 1 2 0 128 3 1 1 1 14 77 4 1 0 0 15 0 78 63 51 19 63 63 5 7 27
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = top;
pos = (270,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,5,o),
(452,23,qs),
(452,634,ls),
(452,666,o),
(472,691,o),
(498,695,qs),
(511,697,ls),
(524,698,o),
(524,709,qs),
(524,720,o),
(509,720,qs),
(366,720,ls),
(351,720,o),
(351,709,qs),
(351,700,o),
(364,697,qs),
(382,694,ls),
(399,691,o),
(421,666,o),
(421,634,qs),
(421,181,ls),
(421,175,o),
(412,173,o),
(409,179,qs),
(173,698,ls),
(163,720,o),
(138,720,qs),
(31,720,ls),
(16,720,o),
(16,709,qs),
(16,700,o),
(29,697,qs),
(52,693,ls),
(75,689,o),
(88,675,o),
(88,654,qs),
(88,86,ls),
(88,58,o),
(68,29,o),
(42,25,qs),
(29,23,ls),
(16,22,o),
(16,11,qs),
(16,0,o),
(31,0,qs),
(174,0,ls),
(189,0,o),
(189,11,qs),
(189,22,o),
(176,23,qs),
(163,25,ls),
(138,29,o),
(119,58,o),
(119,86,qs),
(119,600,ls),
(119,608,o),
(128,610,o),
(131,603,qs),
(402,15,ls),
(413,-9,o),
(429,-9,qs),
(439,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 2 2 14 77 0 1 1 15 77 4 1 0 0 21 0 78 1 0 51 48 35 32 17 14 0 61 1 61 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (93,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (53,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,-305);
},
{
name = top;
pos = (270,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (156,0);
ref = uni0326;
}
);
width = 540;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
kernLeft = N;
kernRight = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = top;
pos = (270,928);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (44,210);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
kernLeft = N;
kernRight = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,-76,o),
(452,44,qs),
(452,634,ls),
(452,666,o),
(472,691,o),
(498,695,qs),
(511,697,ls),
(524,698,o),
(524,709,qs),
(524,720,o),
(509,720,qs),
(366,720,ls),
(351,720,o),
(351,709,qs),
(351,700,o),
(364,697,qs),
(382,694,ls),
(399,691,o),
(421,666,o),
(421,634,qs),
(421,181,ls),
(421,175,o),
(412,173,o),
(409,179,qs),
(163,698,ls),
(152,720,o),
(128,720,qs),
(31,720,ls),
(16,720,o),
(16,709,qs),
(16,700,o),
(29,697,qs),
(52,693,ls),
(75,689,o),
(88,675,o),
(88,654,qs),
(88,86,ls),
(88,58,o),
(68,29,o),
(42,25,qs),
(29,23,ls),
(16,22,o),
(16,11,qs),
(16,0,o),
(31,0,qs),
(174,0,ls),
(189,0,o),
(189,11,qs),
(189,22,o),
(176,23,qs),
(163,25,ls),
(138,29,o),
(119,58,o),
(119,86,qs),
(119,600,ls),
(119,608,o),
(128,610,o),
(131,603,qs),
(377,82,ls),
(384,67,o),
(384,52,qs),
(384,-91,ls),
(384,-131,o),
(364,-175,o),
(345,-175,qs),
(332,-175,o),
(319,-158,o),
(311,-136,o),
(297,-119,o),
(281,-119,qs),
(263,-119,o),
(242,-144,o),
(242,-161,qs),
(242,-185,o),
(280,-215,o),
(309,-215,qs),
(374,-215,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 3 2 2 1 114 5 1 4 4 14 77 0 3 3 15 77 0 2 2 0 98 6 1 0 0 25 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 3 2 3 1 2 128 5 1 4 4 14 77 0 3 3 15 77 0 2 2 0 98 6 1 0 0 25 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 66 63 50 47 32 29 12 10 7 5 0 76 1 76 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,48,o),
(465,148,o),
(500,283,o),
(500,361,qs),
(500,439,o),
(465,573,o),
(401,674,o),
(318,730,o),
(270,730,qs),
(222,730,o),
(138,674,o),
(75,573,o),
(40,439,o),
(40,361,qs),
(40,283,o),
(75,148,o),
(138,48,o),
(222,-9,o),
(270,-9,qs),
(318,-9,o)
);
},
{
closed = 1;
nodes = (
(119,188,o),
(119,361,qs),
(119,534,o),
(200,703,o),
(270,703,qs),
(341,703,o),
(421,534,o),
(421,361,qs),
(421,188,o),
(341,18,o),
(270,18,qs),
(200,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 20 77 5 1 2 2 0 97 4 1 0 0 21 0 78 21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (93,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (53,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (65,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (92,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (89,210);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,885);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (64,210);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,-60,o),
(108,-52,qs),
(149,44,l),
(175,19,o),
(237,-9,o),
(270,-9,qs),
(318,-9,o),
(401,48,o),
(465,148,o),
(500,283,o),
(500,361,qs),
(500,452,o),
(451,605,o),
(410,655,q),
(463,778,ls),
(468,790,o),
(455,790,qs),
(444,790,ls),
(436,790,o),
(433,782,qs),
(389,678,l),
(363,703,o),
(303,730,o),
(270,730,qs),
(222,730,o),
(138,674,o),
(75,573,o),
(40,439,o),
(40,361,qs),
(40,271,o),
(87,118,o),
(128,68,q),
(78,-48,ls),
(73,-60,o),
(86,-60,qs),
(97,-60,ls)
);
},
{
closed = 1;
nodes = (
(200,703,o),
(270,703,qs),
(333,703,o),
(371,637,q),
(151,123,l),
(135,165,o),
(119,284,o),
(119,361,qs),
(119,534,o)
);
},
{
closed = 1;
nodes = (
(167,87,q),
(388,602,l),
(404,560,o),
(421,439,o),
(421,361,qs),
(421,188,o),
(341,18,o),
(270,18,qs),
(205,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
52 51 40 39 32 21 14 3 8 5 4 1 76 0 2 1 2 133 6 1 0 3 0 134 0 4 4 1 97 0 1 1 20 77 7 1 5 5 3 97 0 3 3 21 3 78 46 45 1 0 45 53 46 53 43 41 30 28 19 16 12 10 0 35 1 34 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
layers = (
{
anchors = (
{
name = bottom;
pos = (270,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (270,928);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (44,210);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = C;
kernRight = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,0,o),
(389,0,qs),
(685,0,ls),
(708,0,o),
(710,23,qs),
(720,201,ls),
(722,218,o),
(708,218,qs),
(696,218,o),
(693,205,qs),
(681,146,ls),
(667,76,o),
(596,25,o),
(546,25,qs),
(497,25,o),
(460,57,o),
(460,93,qs),
(460,344,ls),
(460,358,o),
(474,358,qs),
(523,358,ls),
(546,358,o),
(571,336,o),
(578,301,qs),
(588,252,ls),
(592,237,o),
(605,239,qs),
(616,241,o),
(616,256,qs),
(616,481,ls),
(616,496,o),
(605,498,qs),
(592,500,o),
(588,485,qs),
(578,435,ls),
(568,388,o),
(524,388,qs),
(474,388,ls),
(460,388,o),
(460,402,qs),
(460,643,ls),
(460,672,o),
(491,695,o),
(531,695,qs),
(591,695,o),
(659,632,o),
(670,564,qs),
(676,527,ls),
(678,514,o),
(690,514,qs),
(705,514,o),
(703,531,q),
(695,697,ls),
(693,720,o),
(670,720,qs),
(389,720,ls),
(355,720,o),
(304,729,o),
(274,729,qs),
(205,729,o),
(99,631,o),
(40,463,o),
(40,359,qs),
(40,282,o),
(74,148,o),
(136,47,o),
(222,-9,o),
(274,-9,qs),
(304,-9,o)
);
},
{
closed = 1;
nodes = (
(119,187,o),
(119,359,qs),
(119,532,o),
(194,702,o),
(278,702,qs),
(328,702,o),
(389,655,o),
(389,604,qs),
(389,116,ls),
(389,67,o),
(328,18,o),
(278,18,qs),
(194,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 120 values pushed */
15 1 4 11 16 1 3 4 62 1 7 8 63 1 10 7 4 76 0 3 4 5 4 3 5 128 0 8 6 7 6 8 7 128 0 5 0 6 8 5 6 105 0 11 11 1 97 0 1 1 20 77 0 4 4 2 95 0 2 2 14 77 0 7 7 9 96 0 9 9 15 77 13 1 10 10 0 97 12 1 0 0 21 0 78 70 69 1 0 77 75 69 81 70 81 67 64 61 59 55 53 49 46 32 29 25 23 19 17 14 11 10 8 0 68 1 68 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernLeft = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,0,o),
(252,12,qs),
(252,21,o),
(241,23,qs),
(204,29,ls),
(176,34,o),
(160,49,o),
(160,70,qs),
(160,312,ls),
(160,326,o),
(174,326,qs),
(246,326,ls),
(304,326,o),
(392,375,o),
(442,463,o),
(442,520,qs),
(442,579,o),
(392,669,o),
(302,720,o),
(243,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(237,0,ls)
);
},
{
closed = 1;
nodes = (
(160,695,o),
(221,695,qs),
(291,695,o),
(367,605,o),
(367,523,qs),
(367,443,o),
(292,351,o),
(227,351,qs),
(160,351,o),
(160,406,qs),
(160,655,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 0 2 0 3 2 103 0 4 4 1 95 0 1 1 14 77 5 1 0 0 15 0 78 1 0 48 46 42 40 28 25 19 16 0 38 1 37 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernLeft = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,0,o),
(252,11,qs),
(252,20,o),
(239,23,qs),
(194,31,ls),
(173,35,o),
(160,50,o),
(160,71,qs),
(160,171,ls),
(160,185,o),
(174,185,qs),
(246,185,ls),
(304,185,o),
(392,235,o),
(442,322,o),
(442,379,qs),
(442,438,o),
(392,528,o),
(302,579,o),
(243,579,qs),
(174,579,ls),
(160,579,o),
(160,593,qs),
(160,649,ls),
(160,670,o),
(173,685,o),
(194,689,qs),
(239,697,ls),
(252,700,o),
(252,709,qs),
(252,720,o),
(237,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(237,0,ls)
);
},
{
closed = 1;
nodes = (
(160,265,qs),
(160,514,ls),
(160,554,o),
(221,554,qs),
(291,554,o),
(367,464,o),
(367,382,qs),
(367,302,o),
(292,210,o),
(227,210,qs),
(160,210,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 2 0 5 4 2 5 106 7 1 4 0 3 0 4 3 103 0 1 1 14 77 6 1 0 0 15 0 78 52 51 1 0 58 56 51 61 52 61 40 37 31 28 19 16 0 50 1 49 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(516,-198,o),
(532,-186,qs),
(540,-179,o),
(540,-172,qs),
(540,-164,o),
(526,-160,o),
(518,-165,qs),
(487,-184,o),
(457,-184,qs),
(423,-184,o),
(366,-132,o),
(348,-74,qs),
(342,-53,o),
(324,-26,o),
(311,-17,qs),
(306,-13,o),
(306,-4,o),
(312,-3,qs),
(366,12,o),
(451,114,o),
(500,269,o),
(500,361,qs),
(500,439,o),
(465,573,o),
(401,674,o),
(318,730,o),
(270,730,qs),
(222,730,o),
(138,674,o),
(75,573,o),
(40,439,o),
(40,361,qs),
(40,271,o),
(87,119,o),
(170,16,o),
(222,-1,qs),
(248,-11,o),
(270,-39,o),
(275,-71,qs),
(285,-128,o),
(337,-190,o),
(404,-215,o),
(434,-215,qs),
(469,-215,o)
);
},
{
closed = 1;
nodes = (
(119,188,o),
(119,361,qs),
(119,534,o),
(200,703,o),
(270,703,qs),
(341,703,o),
(421,534,o),
(421,361,qs),
(421,188,o),
(341,18,o),
(270,18,qs),
(200,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 3 4 2 4 3 2 128 0 4 4 1 97 0 1 1 20 77 0 2 2 0 97 5 1 0 0 25 0 78 45 44 1 0 51 49 44 55 45 55 35 33 17 15 0 43 1 43 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
kernLeft = B;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = top;
pos = (257,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,16,o),
(523,33,qs),
(523,41,o),
(509,46,o),
(501,41,qs),
(491,34,o),
(478,29,o),
(470,29,qs),
(447,29,o),
(417,73,o),
(406,125,qs),
(384,227,ls),
(374,272,o),
(337,326,o),
(305,341,qs),
(298,344,o),
(299,353,o),
(306,355,qs),
(364,376,o),
(440,477,o),
(440,540,qs),
(440,593,o),
(388,674,o),
(296,720,o),
(237,720,qs),
(34,720,ls),
(19,720,o),
(19,709,qs),
(19,700,o),
(32,697,qs),
(55,693,ls),
(76,689,o),
(89,675,o),
(89,654,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(237,0,ls),
(252,0,o),
(252,12,qs),
(252,21,o),
(241,23,qs),
(204,29,ls),
(176,34,o),
(160,49,o),
(160,70,qs),
(160,320,ls),
(160,331,o),
(176,346,o),
(190,346,qs),
(231,346,o),
(278,326,o),
(305,270,o),
(316,216,qs),
(339,105,ls),
(363,-9,o),
(450,-9,qs),
(479,-9,o)
);
},
{
closed = 1;
nodes = (
(160,426,qs),
(160,655,ls),
(160,695,o),
(213,695,qs),
(284,695,o),
(365,612,o),
(365,538,qs),
(365,462,o),
(295,371,o),
(227,371,qs),
(160,371,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 0 1 4 5 1 105 0 6 6 3 95 0 3 3 14 77 0 2 2 15 77 0 4 4 0 97 7 1 0 0 21 0 78 65 64 1 0 71 69 64 74 65 74 55 54 39 36 21 18 8 6 0 63 1 63 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernLeft = B;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = top;
pos = (257,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (80,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernLeft = B;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (277,0);
},
{
name = top;
pos = (257,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (40,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
kernLeft = B;
kernRight = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (277,-305);
},
{
name = top;
pos = (257,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (163,0);
ref = uni0326;
}
);
width = 513;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,0);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,38,o),
(377,122,o),
(377,178,qs),
(377,242,o),
(308,355,o),
(233,416,qs),
(163,472,o),
(107,550,o),
(107,593,qs),
(107,644,o),
(158,700,o),
(201,700,qs),
(245,700,o),
(292,629,o),
(314,552,qs),
(321,527,ls),
(325,513,o),
(334,513,qs),
(347,513,o),
(347,530,qs),
(344,681,ls),
(344,689,o),
(337,699,o),
(331,703,qs),
(313,716,o),
(257,730,o),
(227,730,qs),
(147,730,o),
(44,641,o),
(44,567,qs),
(44,511,o),
(112,412,o),
(186,359,qs),
(253,309,o),
(314,207,o),
(314,148,qs),
(314,87,o),
(255,20,o),
(205,20,qs),
(112,20,o),
(78,163,qs),
(69,201,ls),
(65,219,o),
(54,219,qs),
(41,219,o),
(41,199,qs),
(46,42,ls),
(46,31,o),
(53,22,o),
(60,18,qs),
(72,11,o),
(115,-1,o),
(164,-9,o),
(184,-9,qs),
(240,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 20 77 0 2 2 0 97 6 1 0 0 21 0 78 1 0 43 41 37 35 28 26 16 14 11 9 0 54 1 54 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (52,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,0);
},
{
name = top;
pos = (229,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (12,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (206,-215);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (55,0);
ref = uni0327;
}
);
width = 407;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = uni0218;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,-305);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (95,0);
ref = uni0326;
}
);
width = 407;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,29,o),
(499,108,o),
(499,169,qs),
(499,231,o),
(416,359,o),
(349,418,q),
(496,627,l),
(459,680,o),
(375,730,o),
(303,730,qs),
(243,730,o),
(146,674,o),
(89,569,o),
(89,495,qs),
(89,66,ls),
(89,45,o),
(76,31,o),
(55,27,qs),
(32,23,ls),
(19,20,o),
(19,11,qs),
(19,0,o),
(34,0,qs),
(136,0,ls),
(160,0,o),
(160,24,qs),
(160,511,ls),
(160,583,o),
(199,666,o),
(264,701,o),
(303,701,qs),
(346,701,o),
(415,651,o),
(436,602,q),
(280,381,l),
(295,370,ls),
(360,322,o),
(436,198,o),
(436,139,qs),
(436,89,o),
(409,37,o),
(371,20,o),
(352,20,qs),
(318,20,o),
(267,81,o),
(257,133,qs),
(246,191,ls),
(243,209,o),
(230,209,qs),
(217,209,o),
(217,189,qs),
(217,42,ls),
(217,31,o),
(224,22,o),
(231,18,qs),
(249,8,o),
(310,-9,o),
(341,-9,qs),
(381,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
52 51 24 23 4 1 3 1 76 0 1 3 2 3 1 2 128 0 3 3 5 97 0 5 5 20 77 0 4 4 15 77 0 2 2 0 97 6 1 0 0 21 0 78 1 0 49 47 36 33 28 26 16 14 10 8 0 58 1 58 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (231,0);
},
{
name = top;
pos = (231,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,0,o),
(358,11,qs),
(358,22,o),
(345,23,qs),
(300,30,ls),
(281,33,o),
(266,48,o),
(266,69,qs),
(266,669,ls),
(266,683,o),
(278,695,o),
(297,695,qs),
(335,695,o),
(407,631,o),
(417,560,qs),
(422,527,ls),
(424,514,o),
(436,514,qs),
(451,514,o),
(449,531,q),
(440,712,ls),
(438,735,o),
(422,735,qs),
(416,735,o),
(403,728,o),
(374,720,o),
(342,720,qs),
(119,720,ls),
(87,720,o),
(58,728,o),
(46,735,o),
(39,735,qs),
(23,735,o),
(21,712,qs),
(12,531,l),
(10,514,o),
(25,514,qs),
(37,514,o),
(39,527,qs),
(44,560,ls),
(55,631,o),
(127,695,o),
(164,695,qs),
(183,695,o),
(195,683,o),
(195,669,qs),
(195,69,ls),
(195,48,o),
(181,33,o),
(161,30,qs),
(116,23,ls),
(103,22,o),
(103,11,qs),
(103,0,o),
(118,0,qs),
(343,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
34 21 2 1 4 35 20 2 2 1 2 76 7 1 1 1 4 95 0 4 4 14 77 6 1 2 2 3 97 5 1 3 3 20 77 8 1 0 0 15 0 78 1 0 44 42 38 36 33 31 29 26 23 22 19 17 13 11 0 55 1 54 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (231,0);
},
{
name = top;
pos = (231,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (14,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni021A;
kernLeft = T;
kernRight = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (231,-305);
},
{
name = top;
pos = (231,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (117,0);
ref = uni0326;
}
);
width = 461;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,101,o),
(454,192,qs),
(454,634,ls),
(454,687,o),
(488,693,qs),
(511,697,ls),
(524,700,o),
(524,709,qs),
(524,720,o),
(509,720,qs),
(365,720,ls),
(350,720,o),
(350,708,qs),
(350,699,o),
(361,697,qs),
(388,693,ls),
(422,687,o),
(422,633,qs),
(422,191,ls),
(422,115,o),
(354,31,o),
(292,31,qs),
(231,31,o),
(163,115,o),
(163,191,qs),
(163,653,ls),
(163,674,o),
(177,690,o),
(197,693,qs),
(224,697,ls),
(235,699,o),
(235,708,qs),
(235,720,o),
(220,720,qs),
(37,720,ls),
(22,720,o),
(22,709,qs),
(22,700,o),
(35,697,qs),
(58,693,ls),
(79,689,o),
(92,675,o),
(92,654,qs),
(92,192,ls),
(92,133,o),
(138,42,o),
(221,-9,o),
(275,-9,qs),
(356,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 14 77 0 2 2 0 97 4 1 0 0 21 0 78 1 0 39 36 27 25 15 12 0 48 1 48 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (111,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,940);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (84,210);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (71,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (83,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (110,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (107,210);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,885);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (82,210);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,720);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (140,0);
ref = uni0328;
}
);
width = 536;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (268,0);
},
{
name = ogonek;
pos = (334,0);
},
{
name = top;
pos = (288,986);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (120,210);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,-4,o),
(244,6,qs),
(399,631,ls),
(406,659,o),
(427,690,o),
(446,694,qs),
(461,697,ls),
(475,700,o),
(475,710,qs),
(475,720,o),
(460,720,qs),
(320,720,ls),
(306,720,o),
(306,709,qs),
(306,700,o),
(323,697,qs),
(338,695,ls),
(382,689,o),
(368,632,qs),
(253,172,ls),
(252,166,o),
(243,166,o),
(241,172,qs),
(125,653,ls),
(120,675,o),
(129,694,o),
(146,695,qs),
(165,697,ls),
(182,698,o),
(182,709,qs),
(182,720,o),
(168,720,qs),
(-3,720,ls),
(-18,720,o),
(-18,710,qs),
(-18,700,o),
(-4,697,qs),
(11,694,ls),
(31,690,o),
(48,668,o),
(55,640,qs),
(213,6,ls),
(215,-4,o),
(225,-10,o),
(229,-10,qs),
(233,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 1 0 95 3 1 0 0 14 1 78 61 17 18 59 4 7 26
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (326,0);
},
{
name = top;
pos = (346,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,-4,o),
(446,6,qs),
(601,631,ls),
(609,666,o),
(628,695,o),
(641,696,qs),
(652,697,ls),
(669,699,o),
(669,709,qs),
(669,720,o),
(652,720,qs),
(540,720,ls),
(526,720,o),
(526,710,qs),
(526,700,o),
(541,697,qs),
(552,695,ls),
(584,690,o),
(570,632,qs),
(455,171,l),
(454,164,o),
(445,164,o),
(443,171,qs),
(398,359,ls),
(389,398,o),
(390,463,o),
(401,500,qs),
(439,631,ls),
(449,665,o),
(466,695,o),
(479,696,qs),
(490,697,ls),
(507,699,o),
(507,709,qs),
(507,720,o),
(490,720,qs),
(395,720,ls),
(381,720,o),
(381,709,qs),
(381,700,o),
(396,697,qs),
(407,695,ls),
(416,694,o),
(421,670,o),
(410,632,qs),
(374,510,ls),
(372,503,o),
(363,503,o),
(361,510,qs),
(327,653,ls),
(322,675,o),
(327,693,o),
(340,695,qs),
(351,697,ls),
(366,700,o),
(366,709,qs),
(366,720,o),
(352,720,qs),
(215,720,ls),
(200,720,o),
(200,710,qs),
(200,700,o),
(214,697,qs),
(229,694,ls),
(240,692,o),
(253,668,o),
(260,640,qs),
(302,469,ls),
(312,430,o),
(312,366,o),
(301,328,qs),
(256,165,ls),
(254,158,o),
(245,158,o),
(243,165,qs),
(125,653,ls),
(120,675,o),
(129,692,o),
(146,695,qs),
(157,697,ls),
(172,700,o),
(172,709,qs),
(172,720,o),
(158,720,qs),
(-3,720,ls),
(-18,720,o),
(-18,710,qs),
(-18,700,o),
(-4,697,qs),
(11,694,ls),
(31,690,o),
(48,668,o),
(55,640,qs),
(213,6,ls),
(215,-4,o),
(224,-10,o),
(228,-10,qs),
(232,-10,o),
(239,-4,o),
(242,6,qs),
(328,316,ls),
(330,323,o),
(340,324,o),
(341,316,q),
(418,6,ls),
(420,-4,o),
(428,-10,o),
(432,-10,qs),
(436,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 5 3 1 3 5 1 128 0 1 1 132 6 4 2 3 0 0 14 77 0 3 3 17 3 78 98 95 87 86 73 70 61 60 51 48 35 34 25 22 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (326,0);
},
{
name = top;
pos = (346,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (169,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (326,0);
},
{
name = top;
pos = (346,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (129,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (326,0);
},
{
name = top;
pos = (346,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (141,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
anchors = (
{
name = bottom;
pos = (326,0);
},
{
name = top;
pos = (346,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (168,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,0,o),
(220,10,qs),
(220,20,o),
(203,24,qs),
(175,30,ls),
(158,34,o),
(152,55,o),
(161,77,qs),
(251,296,ls),
(255,305,o),
(266,305,o),
(270,296,qs),
(373,67,ls),
(381,48,o),
(367,29,o),
(350,27,qs),
(330,24,ls),
(314,21,o),
(314,12,qs),
(314,0,o),
(332,0,qs),
(509,0,ls),
(527,0,o),
(527,10,qs),
(527,21,o),
(510,24,qs),
(491,27,ls),
(479,29,o),
(456,43,o),
(445,67,qs),
(316,356,ls),
(309,370,o),
(310,394,o),
(315,407,qs),
(410,629,ls),
(423,659,o),
(457,688,o),
(482,692,qs),
(498,695,ls),
(513,698,o),
(513,708,qs),
(513,713,o),
(506,720,o),
(495,720,qs),
(342,720,ls),
(324,720,o),
(324,710,qs),
(324,700,o),
(341,696,qs),
(369,690,ls),
(386,686,o),
(392,665,o),
(383,643,qs),
(297,440,ls),
(293,431,o),
(282,431,o),
(278,440,qs),
(183,653,ls),
(174,673,o),
(187,691,o),
(204,694,qs),
(223,697,ls),
(240,700,o),
(240,710,qs),
(240,720,o),
(222,720,qs),
(46,720,ls),
(29,720,o),
(29,710,qs),
(29,700,o),
(45,697,qs),
(64,694,ls),
(77,692,o),
(100,676,o),
(110,653,qs),
(235,376,ls),
(241,363,o),
(238,340,o),
(233,329,qs),
(133,91,ls),
(120,61,o),
(83,34,o),
(51,28,qs),
(35,25,ls),
(20,22,o),
(20,12,qs),
(20,8,o),
(28,0,o),
(38,0,qs),
(202,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 2 1 5 1 2 5 128 0 5 0 1 5 0 126 3 1 1 1 14 77 4 6 2 0 0 15 0 78 1 0 79 78 69 66 46 43 34 33 24 21 0 89 1 88 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (259,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,0,o),
(367,11,qs),
(367,22,o),
(354,23,qs),
(309,30,ls),
(290,33,o),
(275,48,o),
(275,69,qs),
(275,313,ls),
(275,329,o),
(281,354,o),
(288,368,qs),
(419,631,ls),
(436,664,o),
(457,692,o),
(471,695,qs),
(481,697,ls),
(495,700,o),
(495,710,qs),
(495,720,o),
(480,720,qs),
(338,720,ls),
(324,720,o),
(324,709,qs),
(324,700,o),
(341,697,qs),
(363,694,ls),
(386,691,o),
(399,658,o),
(386,632,qs),
(268,391,ls),
(264,384,o),
(252,384,o),
(248,391,qs),
(125,653,ls),
(115,674,o),
(129,694,o),
(146,695,qs),
(165,697,ls),
(182,698,o),
(182,709,qs),
(182,720,o),
(168,720,qs),
(-3,720,ls),
(-18,720,o),
(-18,710,qs),
(-18,700,o),
(-4,697,qs),
(5,695,ls),
(22,691,o),
(40,673,o),
(47,656,qs),
(194,348,ls),
(204,327,o),
(204,305,qs),
(204,69,ls),
(204,48,o),
(190,33,o),
(170,30,qs),
(125,23,ls),
(112,22,o),
(112,11,qs),
(112,0,o),
(127,0,qs),
(352,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 4 2 0 2 4 0 128 3 1 2 2 1 95 5 1 1 1 14 77 6 1 0 0 15 0 78 1 0 44 41 32 31 27 26 25 24 22 19 0 64 1 63 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (259,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (82,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (259,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (42,210);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (259,916);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (54,210);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (239,0);
},
{
name = top;
pos = (259,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (81,210);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = Z;
kernLeft = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (214,0);
},
{
name = top;
pos = (234,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,0,o),
(389,23,qs),
(401,211,ls),
(403,228,o),
(389,228,qs),
(377,228,o),
(374,215,qs),
(361,148,ls),
(351,97,o),
(309,46,o),
(255,30,o),
(227,30,qs),
(116,30,ls),
(99,30,o),
(105,46,q),
(394,691,ls),
(400,705,o),
(389,720,o),
(375,720,qs),
(154,720,ls),
(122,720,o),
(93,730,o),
(81,740,o),
(74,740,qs),
(59,740,o),
(57,717,qs),
(39,531,ls),
(37,514,o),
(52,514,qs),
(63,514,o),
(66,527,qs),
(81,577,ls),
(101,643,o),
(162,690,o),
(199,690,qs),
(299,690,ls),
(316,690,o),
(310,674,q),
(21,29,ls),
(15,16,o),
(26,0,o),
(40,0,qs),
(364,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
39 1 5 6 40 1 0 5 2 76 0 6 2 5 2 6 5 128 0 1 1 4 95 0 4 4 14 77 0 2 2 3 97 0 3 3 16 77 0 5 5 0 96 7 1 0 0 15 0 78 1 0 38 36 31 28 24 21 18 17 14 12 8 5 0 42 1 41 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernLeft = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (214,0);
},
{
name = top;
pos = (234,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (57,210);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernLeft = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (214,0);
},
{
name = top;
pos = (234,950);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (17,210);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernLeft = Z;
kernRight = Z;
layers = (
{
anchors = (
{
name = bottom;
pos = (214,0);
},
{
name = top;
pos = (234,920);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (124,210);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
210
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,25,o),
(231,58,qs),
(238,68,o),
(253,67,o),
(254,57,qs),
(259,30,o),
(287,-9,o),
(311,-9,qs),
(343,-9,o),
(394,56,o),
(394,129,qs),
(394,146,o),
(382,146,qs),
(369,146,o),
(369,130,qs),
(369,88,o),
(347,53,o),
(334,53,qs),
(313,53,o),
(313,95,qs),
(313,401,ls),
(313,516,o),
(214,516,qs),
(182,516,o),
(118,488,o),
(64,441,o),
(31,384,o),
(31,355,qs),
(31,327,o),
(59,327,qs),
(76,327,o),
(109,356,o),
(114,388,qs),
(123,441,o),
(164,486,o),
(189,486,qs),
(215,486,o),
(245,445,o),
(245,397,qs),
(245,306,ls),
(245,293,o),
(232,289,qs),
(172,270,o),
(78,208,o),
(24,131,o),
(24,88,qs),
(24,44,o),
(78,-9,o),
(120,-9,qs),
(157,-9,o)
);
},
{
closed = 1;
nodes = (
(96,106,qs),
(96,160,o),
(163,237,o),
(224,259,qs),
(245,267,o),
(245,248,qs),
(245,175,ls),
(245,136,o),
(217,74,o),
(173,37,o),
(147,37,qs),
(96,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
0 2 1 5 1 2 5 128 0 5 7 1 5 7 126 0 7 4 1 7 4 126 0 1 1 3 97 0 3 3 23 77 0 4 4 0 97 6 9 2 0 0 21 77 10 1 8 8 0 97 6 9 2 0 0 21 0 78 51 50 1 0 50 61 51 61 46 45 42 40 37 35 32 30 27 25 20 18 14 12 0 49 1 49 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (23,0);
ref = acutecomb;
}
);
width = 399;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0306;
}
);
width = 399;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni01CE;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-17,0);
ref = uni030C;
}
);
width = 399;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-17,0);
ref = uni0302;
}
);
width = 399;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-5,0);
ref = uni0308;
}
);
width = 399;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (22,0);
ref = gravecomb;
}
);
width = 399;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0304;
}
);
width = 399;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (150,0);
ref = uni0328;
}
);
width = 399;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,776);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (32,0);
ref = uni030A;
}
);
width = 399;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (200,0);
},
{
name = ogonek;
pos = (344,0);
},
{
name = top;
pos = (200,718);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-26,0);
ref = tildecomb;
}
);
width = 399;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,25,o),
(231,55,qs),
(271,113,l),
(290,56,o),
(362,-9,o),
(410,-9,qs),
(460,-9,o),
(530,62,o),
(546,151,qs),
(549,171,o),
(537,171,qs),
(527,171,o),
(524,160,qs),
(509,96,o),
(461,42,o),
(423,42,qs),
(375,42,o),
(313,148,o),
(313,254,qs),
(313,277,o),
(333,277,qs),
(523,277,ls),
(548,277,o),
(548,310,qs),
(548,419,o),
(475,516,o),
(416,516,qs),
(383,516,o),
(327,484,o),
(306,455,q),
(286,516,o),
(214,516,qs),
(182,516,o),
(118,488,o),
(64,441,o),
(31,384,o),
(31,355,qs),
(31,327,o),
(59,327,qs),
(76,327,o),
(109,356,o),
(114,388,qs),
(123,441,o),
(164,486,o),
(189,486,qs),
(215,486,o),
(245,445,o),
(245,397,qs),
(245,306,ls),
(245,293,o),
(232,289,qs),
(172,270,o),
(78,208,o),
(24,131,o),
(24,88,qs),
(24,44,o),
(78,-9,o),
(119,-9,qs),
(156,-9,o)
);
},
{
closed = 1;
nodes = (
(315,318,qs),
(323,401,o),
(376,491,o),
(415,491,qs),
(447,491,o),
(479,417,o),
(479,352,qs),
(479,302,o),
(431,302,qs),
(330,302,ls),
(313,302,o)
);
},
{
closed = 1;
nodes = (
(96,106,qs),
(96,160,o),
(163,237,o),
(224,259,qs),
(245,267,o),
(245,248,qs),
(245,175,ls),
(245,136,o),
(217,74,o),
(173,37,o),
(147,37,qs),
(96,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 122 values pushed */
28 1 2 1 55 1 6 7 2 76 0 2 1 9 1 2 9 128 0 7 5 6 5 7 6 128 13 1 9 0 5 7 9 5 103 0 10 10 3 97 4 1 3 3 23 77 0 1 1 3 97 4 1 3 3 23 77 0 6 6 0 97 8 12 2 0 0 21 77 14 1 11 11 0 97 8 12 2 0 0 21 0 78 71 70 61 59 1 0 70 81 71 81 66 64 59 69 61 69 53 51 48 46 43 41 38 35 32 30 27 25 20 18 14 12 0 58 1 58 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ae;
unicode = 230;
},
{
glyphname = b;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,63,o),
(403,191,o),
(403,274,qs),
(403,347,o),
(362,455,o),
(291,516,o),
(245,516,qs),
(194,516,o),
(151,472,qs),
(143,464,o),
(130,469,o),
(130,477,qs),
(130,724,ls),
(130,740,o),
(119,740,qs),
(111,740,o),
(95,730,qs),
(82,722,o),
(44,706,o),
(16,700,qs),
(5,698,o),
(5,688,qs),
(5,678,o),
(16,676,qs),
(37,673,ls),
(51,671,o),
(62,658,o),
(62,640,qs),
(62,160,ls),
(62,100,o),
(58,28,o),
(54,5,qs),
(51,-9,o),
(62,-9,qs),
(67,-9,o),
(77,-2,o),
(87,9,qs),
(105,32,o),
(127,17,qs),
(165,-9,o),
(206,-9,qs),
(262,-9,o)
);
},
{
closed = 1;
nodes = (
(130,68,o),
(130,113,qs),
(130,365,ls),
(130,415,o),
(180,471,o),
(214,471,qs),
(269,471,o),
(329,363,o),
(329,260,qs),
(329,148,o),
(260,16,o),
(204,16,qs),
(171,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
29 1 5 3 1 76 0 2 2 16 77 0 5 5 3 97 0 3 3 23 77 7 1 4 4 0 97 1 6 2 0 0 21 0 78 43 42 1 0 49 47 42 54 43 54 35 33 27 25 8 6 0 41 1 41 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,20,o),
(305,97,o),
(316,167,qs),
(319,187,o),
(307,187,qs),
(298,187,o),
(295,176,qs),
(278,100,o),
(231,42,o),
(196,42,qs),
(152,42,o),
(97,150,o),
(97,257,qs),
(97,341,o),
(126,444,o),
(169,490,o),
(189,490,qs),
(206,490,o),
(234,467,o),
(260,407,o),
(274,352,qs),
(277,339,o),
(288,339,qs),
(300,339,o),
(300,354,qs),
(298,476,ls),
(298,491,o),
(288,498,qs),
(262,516,o),
(216,516,qs),
(162,516,o),
(74,447,o),
(23,321,o),
(23,236,qs),
(23,160,o),
(65,50,o),
(136,-9,o),
(180,-9,qs),
(213,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 23 77 0 4 4 0 97 6 1 0 0 21 0 78 1 0 34 32 29 27 22 20 16 14 9 7 0 38 1 38 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 339;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (31,0);
ref = acutecomb;
}
);
width = 339;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (-9,0);
ref = uni030C;
}
);
width = 339;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (179,-215);
},
{
name = top;
pos = (208,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (28,0);
ref = uni0327;
}
);
width = 339;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = cdotaccent;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (98,0);
ref = uni0307;
}
);
width = 339;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = c;
kernRight = d;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (229,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,19,o),
(288,58,qs),
(293,66,o),
(305,65,o),
(306,57,qs),
(311,30,o),
(341,-9,o),
(370,-9,qs),
(402,-9,o),
(452,56,o),
(452,129,qs),
(452,146,o),
(440,146,qs),
(427,146,o),
(427,130,qs),
(427,88,o),
(405,53,o),
(392,53,qs),
(371,53,o),
(371,95,qs),
(371,724,ls),
(371,740,o),
(360,740,qs),
(352,740,o),
(336,730,qs),
(323,722,o),
(284,706,o),
(252,700,qs),
(241,698,o),
(241,688,qs),
(241,678,o),
(252,676,qs),
(278,673,ls),
(292,672,o),
(303,658,o),
(303,640,qs),
(303,512,ls),
(303,497,o),
(287,505,qs),
(274,511,o),
(246,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(214,-9,o)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 4 7 3 7 4 3 128 0 2 2 16 77 0 7 7 1 97 0 1 1 23 77 0 3 3 0 97 5 8 2 0 0 21 77 9 1 6 6 0 97 5 8 2 0 0 21 0 78 52 51 1 0 60 58 51 64 52 64 43 41 38 36 33 31 28 26 9 7 0 50 1 50 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = d;
unicode = 100;
},
{
glyphname = eth;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,59,o),
(368,181,o),
(368,261,qs),
(368,343,o),
(321,504,o),
(237,641,o),
(126,735,o),
(62,750,qs),
(52,752,o),
(43,744,o),
(43,738,qs),
(43,728,o),
(54,725,qs),
(142,696,o),
(251,546,o),
(276,442,qs),
(278,435,o),
(271,430,o),
(265,434,qs),
(234,456,o),
(192,456,qs),
(145,456,o),
(71,397,o),
(28,295,o),
(28,229,qs),
(28,164,o),
(74,55,o),
(151,-9,o),
(198,-9,qs),
(249,-9,o)
);
},
{
closed = 1;
nodes = (
(100,119,o),
(100,224,qs),
(100,331,o),
(147,431,o),
(196,431,qs),
(302,431,o),
(302,218,qs),
(302,18,o),
(200,18,qs),
(149,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
18 1 1 74 0 1 0 3 2 1 3 105 5 1 2 2 0 97 4 1 0 0 21 0 78 31 30 1 0 35 33 30 39 31 39 9 7 0 29 1 29 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = eth;
unicode = 240;
},
{
glyphname = dcaron;
kernLeft = c;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (229,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d;
},
{
alignment = -1;
pos = (366,20);
ref = uni030C.alt;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
20
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = c;
kernRight = d;
layers = (
{
anchors = (
{
name = bottom;
pos = (229,0);
},
{
name = top;
pos = (229,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,19,o),
(288,58,qs),
(293,66,o),
(305,65,o),
(306,57,qs),
(311,30,o),
(341,-9,o),
(370,-9,qs),
(402,-9,o),
(452,56,o),
(452,129,qs),
(452,146,o),
(440,146,qs),
(427,146,o),
(427,130,qs),
(427,88,o),
(405,53,o),
(392,53,qs),
(371,53,o),
(371,95,qs),
(371,578,l),
(427,578,ls),
(437,578,o),
(437,588,qs),
(437,596,ls),
(437,606,o),
(427,606,qs),
(371,606,l),
(371,724,ls),
(371,740,o),
(360,740,qs),
(352,740,o),
(336,730,qs),
(323,722,o),
(284,706,o),
(252,700,qs),
(241,698,o),
(241,688,qs),
(241,678,o),
(252,676,qs),
(278,673,ls),
(292,672,o),
(303,658,o),
(303,640,qs),
(303,606,l),
(152,606,ls),
(142,606,o),
(142,596,qs),
(142,588,ls),
(142,578,o),
(152,578,qs),
(303,578,l),
(303,512,ls),
(303,497,o),
(287,505,qs),
(274,511,o),
(246,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(214,-9,o)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
0 8 11 7 11 8 7 128 5 1 3 6 1 2 1 3 2 105 0 4 4 16 77 0 11 11 1 97 0 1 1 23 77 0 7 7 0 97 9 12 2 0 0 21 77 13 1 10 10 0 97 9 12 2 0 0 21 0 78 68 67 1 0 76 74 67 80 68 80 59 57 54 52 49 47 45 43 40 38 36 34 21 19 16 14 9 7 0 66 1 66 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = e;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,62,o),
(328,151,qs),
(331,171,o),
(319,171,qs),
(309,171,o),
(306,160,qs),
(291,96,o),
(243,42,o),
(205,42,qs),
(157,42,o),
(95,148,o),
(95,254,qs),
(95,277,o),
(115,277,qs),
(305,277,ls),
(330,277,o),
(330,310,qs),
(330,419,o),
(257,516,o),
(198,516,qs),
(149,516,o),
(69,448,o),
(23,328,o),
(23,249,qs),
(23,172,o),
(68,55,o),
(144,-9,o),
(192,-9,qs),
(242,-9,o)
);
},
{
closed = 1;
nodes = (
(97,318,qs),
(105,401,o),
(158,491,o),
(197,491,qs),
(229,491,o),
(261,417,o),
(261,352,qs),
(261,302,o),
(213,302,qs),
(112,302,ls),
(95,302,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 4 2 3 2 4 3 128 8 1 5 0 2 4 5 2 103 0 6 6 1 97 0 1 1 23 77 0 3 3 0 97 7 1 0 0 21 0 78 31 29 1 0 36 34 29 39 31 39 25 23 20 18 15 12 9 7 0 28 1 28 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (16,0);
ref = acutecomb;
}
);
width = 355;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecaron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-24,0);
ref = uni030C;
}
);
width = 355;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-24,0);
ref = uni0302;
}
);
width = 355;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-12,0);
ref = uni0308;
}
);
width = 355;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (83,0);
ref = uni0307;
}
);
width = 355;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (15,0);
ref = gravecomb;
}
);
width = 355;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0304;
}
);
width = 355;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (239,0);
},
{
name = top;
pos = (193,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (45,0);
ref = uni0328;
}
);
width = 355;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = f;
kernLeft = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,27,o),
(51,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(236,0,ls),
(251,0,o),
(251,12,qs),
(251,21,o),
(240,23,qs),
(187,28,ls),
(166,30,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(251,482,ls),
(266,482,o),
(266,496,qs),
(266,510,o),
(251,510,qs),
(165,510,ls),
(153,510,o),
(153,522,qs),
(153,610,ls),
(153,672,o),
(176,717,o),
(196,717,qs),
(215,717,o),
(230,691,o),
(240,658,o),
(257,632,o),
(277,632,qs),
(293,632,o),
(312,651,o),
(312,670,qs),
(312,702,o),
(258,748,o),
(218,748,qs),
(175,748,o),
(116,692,o),
(85,602,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 2 3 4 3 2 4 128 0 3 3 1 97 0 1 1 16 77 5 1 0 0 4 95 0 4 4 17 77 0 6 6 15 6 78 57 50 52 35 36 41 50 7 7 29
CALL[ ]	/* CallFunction */";
};
width = 288;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (196,-205);
},
{
name = top;
pos = (196,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-171,o),
(385,-95,o),
(385,-46,qs),
(385,16,o),
(301,87,o),
(229,87,qs),
(143,87,ls),
(121,87,o),
(110,116,o),
(123,132,qs),
(140,151,ls),
(153,165,o),
(179,180,o),
(197,180,qs),
(239,180,o),
(306,224,o),
(345,300,o),
(345,348,qs),
(345,388,o),
(318,454,o),
(294,477,qs),
(287,484,o),
(280,498,o),
(283,508,qs),
(289,534,o),
(313,534,qs),
(324,534,o),
(334,524,o),
(346,514,o),
(359,514,qs),
(374,514,o),
(394,534,o),
(394,551,qs),
(394,571,o),
(365,598,o),
(342,598,qs),
(318,598,o),
(269,555,o),
(260,517,qs),
(257,503,o),
(243,508,qs),
(221,516,o),
(197,516,qs),
(155,516,o),
(87,472,o),
(47,398,o),
(47,352,qs),
(47,304,o),
(95,220,o),
(136,200,qs),
(149,193,o),
(137,183,qs),
(65,121,ls),
(41,101,o),
(55,54,o),
(91,39,qs),
(103,34,o),
(103,15,o),
(91,4,qs),
(57,-26,o),
(24,-64,o),
(14,-93,o),
(14,-111,qs),
(14,-154,o),
(102,-215,o),
(178,-215,qs),
(236,-215,o)
);
},
{
closed = 1;
nodes = (
(118,283,o),
(118,350,qs),
(118,415,o),
(161,494,o),
(196,494,qs),
(231,494,o),
(274,415,o),
(274,350,qs),
(274,283,o),
(232,205,o),
(196,205,qs),
(160,205,o)
);
},
{
closed = 1;
nodes = (
(74,-139,o),
(74,-95,qs),
(74,-74,o),
(90,-34,o),
(121,-1,qs),
(135,14,o),
(166,26,o),
(197,26,qs),
(220,26,ls),
(268,26,o),
(321,-23,o),
(321,-68,qs),
(321,-104,o),
(286,-161,o),
(226,-193,o),
(190,-193,qs),
(135,-193,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 3 1 8 4 3 114 0 2 0 4 1 2 4 105 12 1 7 0 5 6 7 5 105 0 6 0 10 9 6 10 105 0 8 8 1 97 0 1 1 23 77 13 1 9 9 0 97 11 1 0 0 25 0 78 80 79 68 67 1 0 88 85 79 95 80 95 74 72 67 78 68 78 61 58 53 51 41 39 37 35 31 29 24 22 0 66 1 66 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 402;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (196,-205);
},
{
name = top;
pos = (196,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-8,0);
ref = uni0306;
}
);
width = 402;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = uni0123;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (196,-205);
},
{
name = top;
pos = (196,814);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (81,0);
ref = uni0312;
}
);
width = 402;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (196,-205);
},
{
name = top;
pos = (196,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (86,0);
ref = uni0307;
}
);
width = 402;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
kernLeft = h;
kernRight = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,o),
(214,11,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,335,ls),
(142,372,o),
(172,433,o),
(223,470,o),
(255,470,qs),
(288,470,o),
(324,430,o),
(324,381,qs),
(324,67,ls),
(324,46,o),
(311,28,o),
(290,25,qs),
(276,23,ls),
(265,21,o),
(265,11,qs),
(265,0,o),
(279,0,qs),
(447,0,ls),
(459,0,o),
(459,11,qs),
(459,21,o),
(448,23,qs),
(426,26,ls),
(405,29,o),
(392,46,o),
(392,67,qs),
(392,392,ls),
(392,453,o),
(338,516,o),
(291,516,qs),
(259,516,o),
(201,490,o),
(163,455,qs),
(154,447,o),
(142,450,o),
(142,459,qs),
(142,724,ls),
(142,740,o),
(131,740,qs),
(123,740,o),
(107,730,qs),
(94,722,o),
(56,706,o),
(28,700,qs),
(17,698,o),
(17,688,qs),
(17,678,o),
(28,676,qs),
(49,673,ls),
(63,671,o),
(74,658,o),
(74,640,qs),
(74,67,ls),
(74,46,o),
(61,28,o),
(40,25,qs),
(26,23,ls),
(15,21,o),
(15,11,qs),
(15,0,o),
(27,0,qs),
(202,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 1 16 77 0 4 4 2 97 0 2 2 23 77 3 5 2 0 0 15 0 78 1 0 57 55 45 42 32 30 23 21 0 69 1 68 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
kernLeft = h;
kernRight = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,o),
(214,11,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,335,ls),
(142,372,o),
(172,433,o),
(223,470,o),
(255,470,qs),
(288,470,o),
(324,430,o),
(324,381,qs),
(324,67,ls),
(324,46,o),
(311,28,o),
(290,25,qs),
(276,23,ls),
(265,21,o),
(265,11,qs),
(265,0,o),
(279,0,qs),
(447,0,ls),
(459,0,o),
(459,11,qs),
(459,21,o),
(448,23,qs),
(426,26,ls),
(405,29,o),
(392,46,o),
(392,67,qs),
(392,392,ls),
(392,453,o),
(338,516,o),
(291,516,qs),
(259,516,o),
(201,490,o),
(163,455,qs),
(154,447,o),
(142,450,o),
(142,459,qs),
(142,578,l),
(293,578,ls),
(303,578,o),
(303,588,qs),
(303,596,ls),
(303,606,o),
(293,606,qs),
(142,606,l),
(142,724,ls),
(142,740,o),
(131,740,qs),
(123,740,o),
(107,730,qs),
(94,722,o),
(56,706,o),
(28,700,qs),
(17,698,o),
(17,688,qs),
(17,678,o),
(28,676,qs),
(49,673,ls),
(63,671,o),
(74,658,o),
(74,640,qs),
(74,606,l),
(18,606,ls),
(8,606,o),
(8,596,qs),
(8,588,ls),
(8,578,o),
(18,578,qs),
(74,578,l),
(74,67,ls),
(74,46,o),
(61,28,o),
(40,25,qs),
(26,23,ls),
(15,21,o),
(15,11,qs),
(15,0,o),
(27,0,qs),
(202,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
4 1 2 5 1 1 6 2 1 105 0 3 3 16 77 0 8 8 6 97 0 6 6 23 77 7 9 2 0 0 15 0 78 1 0 73 71 61 58 48 46 40 38 35 33 31 29 16 14 11 9 0 85 1 84 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = i;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,635,o),
(163,658,qs),
(163,681,o),
(135,710,o),
(114,710,qs),
(93,710,o),
(64,681,o),
(64,658,qs),
(64,635,o),
(93,605,o),
(114,605,qs),
(135,605,o)
);
},
{
closed = 1;
nodes = (
(212,0,o),
(212,12,qs),
(212,21,o),
(201,23,qs),
(176,26,ls),
(159,28,o),
(147,46,o),
(147,67,qs),
(147,501,ls),
(147,513,o),
(138,513,qs),
(132,513,o),
(123,504,qs),
(105,488,o),
(67,466,o),
(36,461,qs),
(20,458,o),
(20,450,qs),
(20,440,o),
(33,439,qs),
(54,436,ls),
(68,434,o),
(79,421,o),
(79,403,qs),
(79,67,ls),
(79,46,o),
(65,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(197,0,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 1 97 0 1 1 14 77 0 3 3 17 77 5 1 2 2 15 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 4 1 0 3 1 0 105 0 3 3 17 77 5 1 2 2 15 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
13 12 1 0 35 33 12 45 13 44 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,0,o),
(212,12,qs),
(212,21,o),
(201,23,qs),
(176,26,ls),
(159,28,o),
(147,46,o),
(147,67,qs),
(147,501,ls),
(147,513,o),
(138,513,qs),
(132,513,o),
(123,504,qs),
(105,488,o),
(67,466,o),
(36,461,qs),
(20,458,o),
(20,450,qs),
(20,440,o),
(33,439,qs),
(54,436,ls),
(68,434,o),
(79,421,o),
(79,403,qs),
(79,67,ls),
(79,46,o),
(65,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(197,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
15 1 0 1 1 76 0 1 1 17 77 2 1 0 0 15 0 78 1 0 23 21 0 33 1 32 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 223;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-65,0);
ref = acutecomb;
}
);
width = 223;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-105,0);
ref = uni0302;
}
);
width = 223;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-93,0);
ref = uni0308;
}
);
width = 223;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (2,0);
ref = uni0307;
}
);
width = 223;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-66,0);
ref = gravecomb;
}
);
width = 223;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = ij;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
},
{
alignment = -1;
pos = (223,0);
ref = j;
}
);
width = 438;
}
);
note = ij;
unicode = 307;
},
{
glyphname = imacron;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-94,0);
ref = uni0304;
}
);
width = 223;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (112,0);
},
{
name = ogonek;
pos = (167,0);
},
{
name = top;
pos = (112,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (2,0);
ref = uni0307;
},
{
alignment = -1;
pos = (-27,0);
ref = uni0328;
}
);
width = 223;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = j;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,635,o),
(163,658,qs),
(163,681,o),
(136,710,o),
(114,710,qs),
(92,710,o),
(64,681,o),
(64,658,qs),
(64,636,o),
(92,605,o),
(114,605,qs),
(135,605,o)
);
},
{
closed = 1;
nodes = (
(147,-76,o),
(147,44,qs),
(147,501,ls),
(147,513,o),
(138,513,qs),
(132,513,o),
(123,504,qs),
(105,488,o),
(67,466,o),
(36,461,qs),
(20,458,o),
(20,450,qs),
(20,440,o),
(33,439,qs),
(54,436,ls),
(68,434,o),
(79,421,o),
(79,403,qs),
(79,-91,ls),
(79,-131,o),
(59,-175,o),
(40,-175,qs),
(27,-175,o),
(14,-158,o),
(6,-136,o),
(-8,-119,o),
(-24,-119,qs),
(-42,-119,o),
(-63,-144,o),
(-63,-161,qs),
(-63,-185,o),
(-25,-215,o),
(4,-215,qs),
(69,-215,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
33 1 3 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 5 4 4 3 114 6 1 0 0 1 97 0 1 1 14 77 0 5 5 17 77 0 4 4 2 98 7 1 2 2 25 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 5 4 5 3 4 128 6 1 0 0 1 97 0 1 1 14 77 0 5 5 17 77 0 4 4 2 98 7 1 2 2 25 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 5 4 5 3 4 128 0 1 6 1 0 5 1 0 105 0 5 5 17 77 0 4 4 2 98 7 1 2 2 25 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
13 12 1 0 41 39 24 22 19 17 12 45 13 45 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 215;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
kernLeft = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,-76,o),
(147,44,qs),
(147,501,ls),
(147,513,o),
(138,513,qs),
(132,513,o),
(123,504,qs),
(105,488,o),
(67,466,o),
(36,461,qs),
(20,458,o),
(20,450,qs),
(20,440,o),
(33,439,qs),
(54,436,ls),
(68,434,o),
(79,421,o),
(79,403,qs),
(79,-91,ls),
(79,-131,o),
(59,-175,o),
(40,-175,qs),
(27,-175,o),
(14,-158,o),
(6,-136,o),
(-8,-119,o),
(-24,-119,qs),
(-42,-119,o),
(-63,-144,o),
(-63,-161,qs),
(-63,-185,o),
(-25,-215,o),
(4,-215,qs),
(69,-215,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 1 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 2 1 114 0 3 3 17 77 0 2 2 0 98 4 1 0 0 25 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 3 2 3 1 2 128 0 3 3 17 77 0 2 2 0 98 4 1 0 0 25 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 29 27 12 10 7 5 0 33 1 33 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 215;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = k;
kernLeft = h;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = top;
pos = (226,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,o),
(214,11,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,214,ls),
(142,225,o),
(148,243,o),
(157,252,qs),
(168,263,ls),
(176,271,o),
(195,269,o),
(200,259,qs),
(295,74,ls),
(317,30,o),
(279,25,qs),
(262,23,ls),
(249,21,o),
(249,11,qs),
(249,0,o),
(263,0,qs),
(437,0,ls),
(451,0,o),
(451,11,qs),
(451,20,o),
(439,23,qs),
(429,25,ls),
(410,29,o),
(384,47,o),
(373,67,qs),
(247,309,ls),
(236,331,o),
(257,354,qs),
(319,420,ls),
(351,453,o),
(397,484,o),
(420,486,qs),
(429,487,ls),
(442,488,o),
(442,499,qs),
(442,510,o),
(428,510,qs),
(256,510,ls),
(242,510,o),
(242,500,qs),
(242,490,o),
(255,487,qs),
(278,483,ls),
(298,479,o),
(305,448,o),
(284,425,qs),
(167,299,ls),
(159,290,o),
(142,295,o),
(142,305,qs),
(142,724,ls),
(142,740,o),
(131,740,qs),
(123,740,o),
(107,730,qs),
(94,722,o),
(56,706,o),
(28,700,qs),
(17,698,o),
(17,688,qs),
(17,678,o),
(28,676,qs),
(49,673,ls),
(63,671,o),
(74,658,o),
(74,640,qs),
(74,67,ls),
(74,46,o),
(61,28,o),
(40,25,qs),
(26,23,ls),
(15,21,o),
(15,11,qs),
(15,0,o),
(27,0,qs),
(202,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 1 1 16 77 0 2 2 17 77 3 4 2 0 0 15 0 78 1 0 60 57 39 36 23 21 0 83 1 82 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 451;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
kernLeft = h;
kernRight = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,-305);
},
{
name = top;
pos = (226,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (112,0);
ref = uni0326;
}
);
width = 451;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = l;
kernLeft = h;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (85,710);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,0,o),
(210,11,qs),
(210,21,o),
(199,23,qs),
(176,26,ls),
(155,29,o),
(142,46,o),
(142,67,qs),
(142,724,ls),
(142,740,o),
(131,740,qs),
(123,740,o),
(107,730,qs),
(94,722,o),
(54,706,o),
(26,700,qs),
(15,698,o),
(15,688,qs),
(15,678,o),
(26,676,qs),
(49,673,ls),
(63,672,o),
(74,658,o),
(74,640,qs),
(74,67,ls),
(74,46,o),
(54,28,o),
(33,25,qs),
(19,23,ls),
(8,21,o),
(8,11,qs),
(8,0,o),
(20,0,qs),
(198,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
0 1 1 16 77 2 1 0 0 15 0 78 1 0 23 21 0 33 1 32 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = h;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (85,940);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (-92,200);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
200
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 220;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = h;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,0);
},
{
name = top;
pos = (85,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (137,20);
ref = uni030C.alt;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
20
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
kernLeft = h;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (110,-305);
},
{
name = top;
pos = (85,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0326;
}
);
width = 220;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = lslash;
kernLeft = h;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (136,0);
},
{
name = top;
pos = (111,710);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,0,o),
(236,11,qs),
(236,21,o),
(225,23,qs),
(202,26,ls),
(181,29,o),
(168,46,o),
(168,67,qs),
(168,372,l),
(264,432,ls),
(272,437,o),
(267,446,qs),
(262,453,ls),
(257,461,o),
(249,456,qs),
(168,405,l),
(168,724,ls),
(168,740,o),
(157,740,qs),
(149,740,o),
(133,730,qs),
(120,722,o),
(80,706,o),
(52,700,qs),
(41,698,o),
(41,688,qs),
(41,678,o),
(52,676,qs),
(75,673,ls),
(89,672,o),
(100,658,o),
(100,640,qs),
(100,360,l),
(15,307,ls),
(7,302,o),
(12,293,qs),
(17,286,ls),
(22,278,o),
(30,283,qs),
(100,327,l),
(100,67,ls),
(100,46,o),
(80,28,o),
(59,25,qs),
(45,23,ls),
(34,21,o),
(34,11,qs),
(34,0,o),
(46,0,qs),
(224,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
40 33 16 9 4 0 1 1 76 0 1 1 16 77 2 1 0 0 15 0 78 1 0 31 29 0 49 1 48 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = m;
kernRight = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,o),
(214,12,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,335,ls),
(142,372,o),
(172,433,o),
(221,470,o),
(251,470,qs),
(281,470,o),
(316,430,o),
(316,381,qs),
(316,67,ls),
(316,46,o),
(303,28,o),
(282,25,qs),
(268,23,ls),
(257,21,o),
(257,11,qs),
(257,0,o),
(271,0,qs),
(441,0,ls),
(453,0,o),
(453,11,qs),
(453,21,o),
(442,23,qs),
(420,26,ls),
(398,29,o),
(384,46,o),
(384,67,qs),
(384,335,ls),
(384,372,o),
(414,433,o),
(463,470,o),
(493,470,qs),
(523,470,o),
(558,430,o),
(558,381,qs),
(558,67,ls),
(558,46,o),
(544,28,o),
(521,25,qs),
(507,23,ls),
(496,21,o),
(496,11,qs),
(496,0,o),
(510,0,qs),
(681,0,ls),
(693,0,o),
(693,11,qs),
(693,21,o),
(682,23,qs),
(660,26,ls),
(639,29,o),
(626,46,o),
(626,67,qs),
(626,392,ls),
(626,453,o),
(573,516,o),
(531,516,qs),
(500,516,o),
(440,488,o),
(399,450,qs),
(392,443,o),
(377,446,o),
(374,454,qs),
(363,485,o),
(318,516,o),
(289,516,qs),
(258,516,o),
(197,488,o),
(156,449,qs),
(149,442,o),
(137,449,o),
(137,456,qs),
(137,501,ls),
(137,513,o),
(128,513,qs),
(122,513,o),
(113,504,qs),
(95,488,o),
(62,466,o),
(31,461,qs),
(15,458,o),
(15,450,qs),
(15,440,o),
(28,439,qs),
(49,436,ls),
(63,434,o),
(74,421,o),
(74,403,qs),
(74,67,ls),
(74,46,o),
(61,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(199,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
25 15 2 0 5 1 76 7 1 5 5 1 97 3 2 2 1 1 17 77 6 4 8 3 0 0 15 0 78 1 0 92 90 80 77 66 64 54 51 41 39 32 30 23 21 0 104 1 103 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = m;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (235,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,0,o),
(214,12,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,335,ls),
(142,372,o),
(172,433,o),
(223,470,o),
(255,470,qs),
(288,470,o),
(324,430,o),
(324,381,qs),
(324,67,ls),
(324,46,o),
(311,28,o),
(290,25,qs),
(276,23,ls),
(265,21,o),
(265,11,qs),
(265,0,o),
(279,0,qs),
(447,0,ls),
(459,0,o),
(459,11,qs),
(459,21,o),
(448,23,qs),
(426,26,ls),
(405,29,o),
(392,46,o),
(392,67,qs),
(392,392,ls),
(392,453,o),
(338,516,o),
(293,516,qs),
(259,516,o),
(198,488,o),
(158,450,qs),
(150,442,o),
(137,447,o),
(137,456,qs),
(137,501,ls),
(137,513,o),
(128,513,qs),
(122,513,o),
(113,504,qs),
(95,488,o),
(62,466,o),
(31,461,qs),
(15,458,o),
(15,450,qs),
(15,440,o),
(28,439,qs),
(49,436,ls),
(63,434,o),
(74,421,o),
(74,403,qs),
(74,67,ls),
(74,46,o),
(61,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(199,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 1 0 4 1 76 0 4 4 1 97 2 1 1 1 17 77 3 5 2 0 0 15 0 78 1 0 57 55 45 42 32 30 23 21 0 69 1 68 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = m;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (235,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (58,0);
ref = acutecomb;
}
);
width = 470;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = m;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (235,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (18,0);
ref = uni030C;
}
);
width = 470;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
kernLeft = m;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,-305);
},
{
name = top;
pos = (235,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (121,0);
ref = uni0326;
}
);
width = 470;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
kernLeft = m;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom;
pos = (235,0);
},
{
name = top;
pos = (235,718);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (9,0);
ref = tildecomb;
}
);
width = 470;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
kernLeft = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,-76,o),
(392,44,qs),
(392,392,ls),
(392,453,o),
(338,516,o),
(293,516,qs),
(259,516,o),
(198,488,o),
(158,450,qs),
(150,442,o),
(137,447,o),
(137,456,qs),
(137,501,ls),
(137,513,o),
(128,513,qs),
(122,513,o),
(113,504,qs),
(95,488,o),
(62,466,o),
(31,461,qs),
(15,458,o),
(15,450,qs),
(15,440,o),
(28,439,qs),
(49,436,ls),
(63,434,o),
(74,421,o),
(74,403,qs),
(74,67,ls),
(74,46,o),
(61,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(199,0,ls),
(214,0,o),
(214,12,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,335,ls),
(142,372,o),
(172,433,o),
(223,470,o),
(255,470,qs),
(288,470,o),
(324,430,o),
(324,381,qs),
(324,-91,ls),
(324,-131,o),
(304,-175,o),
(285,-175,qs),
(272,-175,o),
(259,-158,o),
(251,-136,o),
(237,-119,o),
(221,-119,qs),
(203,-119,o),
(182,-144,o),
(182,-161,qs),
(182,-185,o),
(220,-215,o),
(249,-215,qs),
(314,-215,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
47 1 4 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 4 2 2 1 114 0 3 3 5 97 6 1 5 5 17 77 0 4 4 15 77 0 2 2 0 98 7 1 0 0 25 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 4 2 4 1 2 128 0 3 3 5 97 6 1 5 5 17 77 0 4 4 15 77 0 2 2 0 98 7 1 0 0 25 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 64 62 55 53 33 30 19 17 12 10 7 5 0 69 1 69 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,60,o),
(383,180,o),
(383,254,qs),
(383,328,o),
(335,446,o),
(254,516,o),
(203,516,qs),
(153,516,o),
(71,446,o),
(23,328,o),
(23,254,qs),
(23,180,o),
(71,60,o),
(152,-9,o),
(203,-9,qs),
(254,-9,o)
);
},
{
closed = 1;
nodes = (
(99,254,qs),
(99,491,o),
(203,491,qs),
(307,491,o),
(307,254,qs),
(307,16,o),
(203,16,qs),
(99,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 23 77 5 1 2 2 0 97 4 1 0 0 21 0 78 17 16 1 0 21 19 16 23 17 23 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 408;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (27,0);
ref = acutecomb;
}
);
width = 408;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0302;
}
);
width = 408;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0308;
}
);
width = 408;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (26,0);
ref = gravecomb;
}
);
width = 408;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (23,0);
ref = uni030B;
}
);
width = 408;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-2,0);
ref = uni0304;
}
);
width = 408;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-50,o),
(90,-42,qs),
(117,21,l),
(157,-9,o),
(203,-9,qs),
(254,-9,o),
(336,60,o),
(383,180,o),
(383,254,qs),
(383,321,o),
(342,433,o),
(308,468,q),
(342,548,ls),
(347,560,o),
(334,560,qs),
(327,560,ls),
(319,560,o),
(316,552,qs),
(288,486,l),
(249,516,o),
(203,516,qs),
(153,516,o),
(71,446,o),
(23,328,o),
(23,254,qs),
(23,186,o),
(63,74,o),
(97,39,q),
(64,-38,ls),
(59,-50,o),
(72,-50,qs),
(79,-50,ls)
);
},
{
closed = 1;
nodes = (
(203,491,qs),
(247,491,o),
(272,449,q),
(119,90,l),
(99,148,o),
(99,254,qs),
(99,491,o)
);
},
{
closed = 1;
nodes = (
(133,58,q),
(286,418,l),
(307,360,o),
(307,254,qs),
(307,16,o),
(203,16,qs),
(158,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
44 43 35 34 28 19 12 3 8 5 4 1 76 0 2 1 2 133 6 1 0 3 0 134 0 4 4 1 97 0 1 1 23 77 7 1 5 5 3 97 0 3 3 21 3 78 40 39 1 0 39 45 40 45 38 36 27 25 17 14 11 9 0 31 1 30 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 408;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = c;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom;
pos = (204,0);
},
{
name = ogonek;
pos = (367,10);
},
{
name = top;
pos = (204,718);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-22,0);
ref = tildecomb;
}
);
width = 408;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = c;
kernRight = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(317,44,o),
(339,90,q),
(362,43,o),
(433,-9,o),
(476,-9,qs),
(526,-9,o),
(596,62,o),
(612,151,qs),
(615,171,o),
(603,171,qs),
(593,171,o),
(590,160,qs),
(575,96,o),
(527,42,o),
(489,42,qs),
(441,42,o),
(379,148,o),
(379,254,qs),
(379,277,o),
(399,277,qs),
(589,277,ls),
(614,277,o),
(614,310,qs),
(614,419,o),
(541,516,o),
(482,516,qs),
(438,516,o),
(365,461,o),
(341,413,q),
(319,460,o),
(248,516,o),
(203,516,qs),
(153,516,o),
(71,446,o),
(23,328,o),
(23,254,qs),
(23,180,o),
(71,60,o),
(152,-9,o),
(203,-9,qs),
(247,-9,o)
);
},
{
closed = 1;
nodes = (
(99,254,qs),
(99,491,o),
(203,491,qs),
(307,491,o),
(307,254,qs),
(307,16,o),
(203,16,qs),
(99,16,o)
);
},
{
closed = 1;
nodes = (
(381,318,qs),
(389,401,o),
(442,491,o),
(481,491,qs),
(513,491,o),
(545,417,o),
(545,352,qs),
(545,302,o),
(497,302,qs),
(396,302,ls),
(379,302,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 102 values pushed */
11 1 9 8 38 1 4 5 2 76 0 5 3 4 3 5 4 128 13 1 9 0 3 5 9 3 103 10 1 8 8 1 97 2 1 1 1 23 77 0 4 4 0 97 6 11 2 0 0 21 77 12 1 7 7 0 97 6 11 2 0 0 21 0 78 51 49 42 41 1 0 56 54 49 59 51 59 46 44 41 48 42 48 36 34 31 29 26 24 21 18 15 13 9 7 0 40 1 40 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = m;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-205,o),
(223,-193,qs),
(223,-184,o),
(212,-182,qs),
(175,-177,ls),
(154,-174,o),
(141,-159,o),
(141,-138,qs),
(141,-9,ls),
(141,10,o),
(159,2,qs),
(182,-9,o),
(212,-9,qs),
(271,-9,o),
(362,63,o),
(414,191,o),
(414,274,qs),
(414,347,o),
(373,455,o),
(302,516,o),
(256,516,qs),
(229,516,o),
(187,497,o),
(167,477,qs),
(156,466,ls),
(148,458,o),
(136,463,o),
(136,470,qs),
(136,501,ls),
(136,513,o),
(127,513,qs),
(121,513,o),
(112,504,qs),
(94,488,o),
(61,466,o),
(30,461,qs),
(14,458,o),
(14,450,qs),
(14,440,o),
(27,439,qs),
(48,436,ls),
(62,434,o),
(73,421,o),
(73,403,qs),
(73,-138,ls),
(73,-159,o),
(60,-177,o),
(39,-180,qs),
(25,-182,ls),
(12,-183,o),
(12,-194,qs),
(12,-205,o),
(27,-205,qs),
(208,-205,ls)
);
},
{
closed = 1;
nodes = (
(141,68,o),
(141,113,qs),
(141,365,ls),
(141,415,o),
(191,471,o),
(225,471,qs),
(280,471,o),
(340,363,o),
(340,260,qs),
(340,148,o),
(271,16,o),
(215,16,qs),
(182,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
25 15 2 4 5 1 76 0 5 5 1 97 2 1 1 1 17 77 7 1 4 4 3 97 0 3 3 21 77 6 1 0 0 19 0 78 55 54 1 0 61 59 54 66 55 66 41 39 33 31 23 21 0 53 1 52 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
kernLeft = h;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-205,o),
(223,-193,qs),
(223,-184,o),
(212,-182,qs),
(175,-177,ls),
(154,-174,o),
(141,-159,o),
(141,-138,qs),
(141,-9,ls),
(141,10,o),
(159,2,qs),
(182,-9,o),
(212,-9,qs),
(271,-9,o),
(362,63,o),
(414,191,o),
(414,274,qs),
(414,347,o),
(373,455,o),
(302,516,o),
(256,516,qs),
(229,516,o),
(187,497,o),
(167,477,qs),
(156,466,ls),
(148,458,o),
(136,463,o),
(136,470,qs),
(136,724,ls),
(136,740,o),
(125,740,qs),
(117,740,o),
(101,730,qs),
(88,722,o),
(50,706,o),
(22,700,qs),
(11,698,o),
(11,688,qs),
(11,678,o),
(22,676,qs),
(43,673,ls),
(57,671,o),
(73,658,o),
(73,640,qs),
(73,-138,ls),
(73,-159,o),
(60,-177,o),
(39,-180,qs),
(25,-182,ls),
(12,-183,o),
(12,-194,qs),
(12,-205,o),
(27,-205,qs),
(208,-205,ls)
);
},
{
closed = 1;
nodes = (
(141,68,o),
(141,113,qs),
(141,365,ls),
(141,415,o),
(191,471,o),
(225,471,qs),
(280,471,o),
(340,363,o),
(340,260,qs),
(340,148,o),
(271,16,o),
(215,16,qs),
(182,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
25 1 4 5 1 76 0 1 1 16 77 0 5 5 2 97 0 2 2 23 77 7 1 4 4 3 97 0 3 3 21 77 6 1 0 0 19 0 78 55 54 1 0 61 59 54 66 55 66 41 39 33 31 23 21 0 53 1 52 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,-205,o),
(432,-194,qs),
(432,-183,o),
(419,-182,qs),
(405,-180,ls),
(384,-177,o),
(371,-159,o),
(371,-138,qs),
(371,347,ls),
(371,407,o),
(375,480,o),
(379,502,qs),
(382,516,o),
(371,516,qs),
(367,516,o),
(356,509,o),
(346,498,qs),
(328,475,o),
(306,490,qs),
(287,504,o),
(252,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(213,-9,o),
(257,17,o),
(282,50,qs),
(289,58,o),
(303,53,o),
(303,45,qs),
(303,-138,ls),
(303,-159,o),
(290,-174,o),
(269,-177,qs),
(232,-182,ls),
(221,-184,o),
(221,-193,qs),
(221,-205,o),
(236,-205,qs),
(417,-205,ls)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
9 1 4 5 1 76 0 5 5 2 97 3 1 2 2 23 77 7 1 4 4 1 97 0 1 1 21 77 6 1 0 0 19 0 78 47 46 1 0 55 53 46 59 47 59 32 30 24 22 16 14 0 45 1 44 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = m;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (109,0);
},
{
name = top;
pos = (159,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,440,o),
(137,447,qs),
(137,501,ls),
(137,513,o),
(128,513,qs),
(122,513,o),
(113,504,qs),
(95,488,o),
(62,466,o),
(31,461,qs),
(15,458,o),
(15,450,qs),
(15,440,o),
(28,439,qs),
(49,436,ls),
(63,434,o),
(74,421,o),
(74,403,qs),
(74,67,ls),
(74,46,o),
(61,29,o),
(40,25,qs),
(28,23,ls),
(15,20,o),
(15,11,qs),
(15,0,o),
(30,0,qs),
(199,0,ls),
(214,0,o),
(214,12,qs),
(214,21,o),
(203,23,qs),
(176,26,ls),
(155,28,o),
(142,46,o),
(142,67,qs),
(142,299,ls),
(142,345,o),
(163,417,o),
(195,460,o),
(213,460,qs),
(227,460,o),
(239,445,o),
(248,425,o),
(263,410,o),
(279,410,qs),
(299,410,o),
(318,434,o),
(318,453,qs),
(318,477,o),
(286,516,o),
(253,516,qs),
(195,516,o),
(154,446,qs),
(149,437,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
52 42 2 1 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 2 3 2 1 114 0 2 2 0 97 4 1 0 0 23 77 0 3 3 15 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 2 3 2 1 3 128 0 2 2 0 97 4 1 0 0 23 77 0 3 3 15 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
50 48 59 35 36 33 5 7 26
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = m;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (109,0);
},
{
name = top;
pos = (159,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (-18,0);
ref = acutecomb;
}
);
width = 318;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = m;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (109,0);
},
{
name = top;
pos = (159,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (-58,0);
ref = uni030C;
}
);
width = 318;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
kernLeft = m;
kernRight = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (109,-305);
},
{
name = top;
pos = (159,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (-5,0);
ref = uni0326;
}
);
width = 318;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (144,0);
},
{
name = top;
pos = (154,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,68,o),
(280,132,qs),
(280,181,o),
(229,264,o),
(179,300,qs),
(124,338,o),
(82,390,o),
(82,425,qs),
(82,452,o),
(116,488,o),
(142,488,qs),
(171,488,o),
(211,437,o),
(231,372,qs),
(233,365,o),
(239,356,o),
(246,356,qs),
(258,356,o),
(258,371,qs),
(256,481,ls),
(256,491,o),
(247,497,qs),
(232,507,o),
(194,516,o),
(174,516,qs),
(108,516,o),
(28,446,o),
(28,389,qs),
(28,347,o),
(76,276,o),
(128,241,qs),
(180,204,o),
(224,142,o),
(224,102,qs),
(224,62,o),
(186,17,o),
(157,17,qs),
(122,17,o),
(73,69,o),
(56,140,qs),
(52,156,o),
(41,156,qs),
(28,156,o),
(28,139,qs),
(31,27,ls),
(31,15,o),
(40,10,qs),
(56,2,o),
(108,-9,o),
(131,-9,qs),
(198,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 23 77 0 2 2 0 97 6 1 0 0 21 0 78 1 0 40 38 33 32 26 24 14 12 9 7 0 50 1 50 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (144,0);
},
{
name = top;
pos = (154,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-23,0);
ref = acutecomb;
}
);
width = 308;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (144,0);
},
{
name = top;
pos = (154,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-63,0);
ref = uni030C;
}
);
width = 308;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (141,-215);
},
{
name = top;
pos = (154,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-10,0);
ref = uni0327;
}
);
width = 308;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni0219;
kernLeft = s;
kernRight = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (144,-305);
},
{
name = top;
pos = (154,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (30,0);
ref = uni0326;
}
);
width = 308;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
kernLeft = f;
kernRight = s;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,68,o),
(431,132,qs),
(431,181,o),
(381,263,o),
(335,294,qs),
(298,320,o),
(257,355,o),
(241,387,o),
(241,405,qs),
(241,428,o),
(272,468,o),
(317,507,o),
(362,550,o),
(393,604,o),
(393,638,qs),
(393,663,o),
(365,713,o),
(308,748,o),
(264,748,qs),
(208,748,o),
(128,692,o),
(85,599,o),
(85,544,qs),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(72,27,o),
(51,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(133,0,ls),
(153,0,o),
(153,20,qs),
(153,570,ls),
(153,647,o),
(216,717,o),
(259,717,qs),
(295,717,o),
(329,677,o),
(329,643,qs),
(329,604,o),
(302,547,o),
(263,503,o),
(224,461,o),
(197,412,o),
(197,379,qs),
(197,338,o),
(242,270,o),
(294,235,qs),
(337,206,o),
(378,142,o),
(378,102,qs),
(378,62,o),
(338,17,o),
(311,17,qs),
(278,17,o),
(242,69,o),
(225,140,qs),
(221,156,o),
(210,156,qs),
(197,156,o),
(197,139,qs),
(200,27,ls),
(200,15,o),
(209,10,qs),
(225,2,o),
(269,-9,o),
(297,-9,qs),
(359,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
0 5 3 1 3 5 1 128 0 1 2 3 1 2 126 0 3 3 6 97 0 6 6 16 77 0 4 4 15 77 0 2 2 0 97 7 1 0 0 21 0 78 1 0 61 59 51 48 39 36 32 30 14 12 9 7 0 79 1 79 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,0);
},
{
name = top;
pos = (130,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,59,o),
(245,136,qs),
(245,151,o),
(233,151,qs),
(222,151,o),
(220,137,qs),
(216,90,o),
(189,48,o),
(168,48,qs),
(149,48,o),
(135,73,o),
(135,95,qs),
(135,468,ls),
(135,482,o),
(149,482,qs),
(214,482,ls),
(230,482,o),
(230,496,qs),
(230,510,o),
(214,510,qs),
(149,510,ls),
(135,510,o),
(135,524,qs),
(135,635,ls),
(135,651,o),
(124,651,qs),
(114,651,o),
(107,630,qs),
(92,584,o),
(52,531,o),
(19,508,qs),
(10,502,o),
(10,494,qs),
(10,482,o),
(26,482,qs),
(55,482,ls),
(67,482,o),
(67,470,qs),
(67,96,ls),
(67,40,o),
(112,-9,o),
(147,-9,qs),
(185,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
9 1 1 3 1 76 0 2 3 2 133 0 6 1 5 1 6 5 128 4 1 1 1 3 97 0 3 3 17 77 0 5 5 0 97 7 1 0 0 21 0 78 1 0 39 37 34 32 28 25 23 20 17 15 8 5 0 42 1 42 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 259;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = tcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,0);
},
{
name = top;
pos = (130,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (159,40);
ref = uni030C.alt;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
40
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 259;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni021B;
kernLeft = t;
kernRight = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (150,-305);
},
{
name = top;
pos = (130,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (36,0);
ref = uni0326;
}
);
width = 259;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,21,o),
(300,58,qs),
(306,64,o),
(317,61,o),
(317,53,qs),
(317,7,ls),
(317,-5,o),
(326,-5,qs),
(332,-5,o),
(341,4,qs),
(355,21,o),
(392,45,o),
(423,49,qs),
(439,52,o),
(439,61,qs),
(439,70,o),
(426,71,qs),
(405,74,ls),
(391,76,o),
(380,89,o),
(380,107,qs),
(380,495,ls),
(380,510,o),
(365,510,qs),
(272,510,ls),
(253,510,o),
(253,497,qs),
(253,486,o),
(270,484,qs),
(287,482,ls),
(301,481,o),
(312,467,o),
(312,449,qs),
(312,166,ls),
(312,131,o),
(283,72,o),
(235,37,o),
(204,37,qs),
(173,37,o),
(138,76,o),
(138,122,qs),
(138,495,ls),
(138,510,o),
(123,510,qs),
(30,510,ls),
(11,510,o),
(11,497,qs),
(11,486,o),
(28,484,qs),
(45,482,ls),
(59,481,o),
(70,467,o),
(70,449,qs),
(70,101,ls),
(70,61,o),
(100,13,o),
(146,-9,o),
(171,-9,qs),
(206,-9,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
53 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 17 77 0 4 4 15 77 0 2 2 0 97 5 1 0 0 21 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 17 77 0 2 2 0 97 4 5 2 0 0 21 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 51 49 35 32 21 19 15 12 0 58 1 58 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (39,0);
ref = acutecomb;
}
);
width = 454;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (12,0);
ref = uni0306;
}
);
width = 454;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0302;
}
);
width = 454;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (11,0);
ref = uni0308;
}
);
width = 454;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (38,0);
ref = gravecomb;
}
);
width = 454;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (35,0);
ref = uni030B;
}
);
width = 454;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (10,0);
ref = uni0304;
}
);
width = 454;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (142,0);
ref = uni0328;
}
);
width = 454;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
kernRight = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (226,0);
},
{
name = ogonek;
pos = (336,0);
},
{
name = top;
pos = (216,776);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (48,0);
ref = uni030A;
}
);
width = 454;
}
);
note = uring;
unicode = 367;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,2,qs),
(334,419,ls),
(344,451,o),
(365,477,o),
(380,482,qs),
(389,485,ls),
(401,489,o),
(401,499,qs),
(401,510,o),
(387,510,qs),
(260,510,ls),
(246,510,o),
(246,500,qs),
(246,490,o),
(259,487,qs),
(280,483,ls),
(305,479,o),
(312,452,o),
(304,425,qs),
(223,154,ls),
(220,143,o),
(206,143,o),
(203,154,qs),
(120,443,ls),
(114,465,o),
(126,482,o),
(150,485,qs),
(166,487,ls),
(179,489,o),
(179,500,qs),
(179,510,o),
(165,510,qs),
(0,510,ls),
(-14,510,o),
(-14,500,qs),
(-14,490,o),
(-1,487,qs),
(14,484,ls),
(28,481,o),
(41,467,o),
(48,443,qs),
(181,2,ls),
(185,-9,o),
(194,-9,qs),
(203,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 17 77 4 1 0 0 21 0 78 1 0 35 32 23 22 13 10 0 44 1 44 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (311,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,11,qs),
(291,331,ls),
(294,343,o),
(307,342,o),
(310,331,qs),
(388,11,ls),
(393,-9,o),
(405,-9,qs),
(419,-9,o),
(424,11,qs),
(538,419,ls),
(547,451,o),
(569,477,o),
(584,482,qs),
(593,485,ls),
(605,489,o),
(605,499,qs),
(605,510,o),
(591,510,qs),
(466,510,ls),
(452,510,o),
(452,500,qs),
(452,490,o),
(465,487,qs),
(486,483,ls),
(511,479,o),
(518,452,o),
(510,425,qs),
(434,154,ls),
(431,144,o),
(418,144,o),
(416,154,qs),
(352,443,ls),
(348,465,o),
(358,482,o),
(382,485,qs),
(398,487,ls),
(411,489,o),
(411,500,qs),
(411,510,o),
(397,510,qs),
(235,510,ls),
(221,510,o),
(221,500,qs),
(221,490,o),
(234,487,qs),
(249,484,ls),
(263,481,o),
(276,468,o),
(283,444,qs),
(286,435,o),
(285,419,o),
(283,411,qs),
(215,152,ls),
(212,142,o),
(199,142,o),
(196,152,qs),
(117,443,ls),
(111,465,o),
(123,482,o),
(147,485,qs),
(163,487,ls),
(176,489,o),
(176,500,qs),
(176,510,o),
(162,510,qs),
(0,510,ls),
(-14,510,o),
(-14,500,qs),
(-14,490,o),
(-1,487,qs),
(14,484,ls),
(28,481,o),
(41,467,o),
(48,443,qs),
(169,11,ls),
(174,-9,o),
(187,-9,qs),
(200,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
4 1 2 1 0 1 2 0 128 5 3 2 1 1 17 77 6 7 2 0 0 21 0 78 1 0 71 69 60 57 48 47 38 35 23 22 13 10 0 78 1 78 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (311,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (134,0);
ref = acutecomb;
}
);
width = 597;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (311,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (94,0);
ref = uni0302;
}
);
width = 597;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (311,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (106,0);
ref = uni0308;
}
);
width = 597;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernLeft = w;
kernRight = w;
layers = (
{
anchors = (
{
name = bottom;
pos = (299,0);
},
{
name = top;
pos = (311,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (133,0);
ref = gravecomb;
}
);
width = 597;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,0,o),
(389,10,qs),
(389,20,o),
(376,23,qs),
(361,26,ls),
(351,28,o),
(337,43,o),
(325,67,qs),
(227,260,ls),
(219,276,o),
(228,291,qs),
(297,419,ls),
(317,457,o),
(343,478,o),
(362,482,qs),
(374,485,ls),
(386,488,o),
(386,499,qs),
(386,510,o),
(372,510,qs),
(244,510,ls),
(230,510,o),
(230,500,qs),
(230,490,o),
(243,487,qs),
(269,481,ls),
(298,475,o),
(276,433,qs),
(216,319,ls),
(212,312,o),
(202,312,o),
(198,319,qs),
(130,451,ls),
(116,477,o),
(146,484,qs),
(161,487,ls),
(174,490,o),
(174,500,qs),
(174,510,o),
(160,510,qs),
(12,510,ls),
(-2,510,o),
(-2,500,qs),
(-2,490,o),
(11,487,qs),
(26,484,ls),
(36,482,o),
(51,466,o),
(62,443,qs),
(157,256,ls),
(163,242,o),
(155,227,qs),
(81,91,ls),
(61,54,o),
(35,33,o),
(16,28,qs),
(4,25,ls),
(-8,22,o),
(-8,11,qs),
(-8,0,o),
(6,0,qs),
(134,0,ls),
(148,0,o),
(148,10,qs),
(148,20,o),
(135,23,qs),
(109,29,ls),
(80,35,o),
(102,77,qs),
(167,199,ls),
(171,207,o),
(182,206,o),
(186,199,qs),
(257,59,ls),
(271,33,o),
(241,26,qs),
(226,23,ls),
(213,20,o),
(213,10,qs),
(213,0,o),
(227,0,qs),
(375,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 3 2 0 2 3 0 128 4 1 2 2 17 77 1 5 2 0 0 15 0 78 1 0 62 59 51 50 42 39 21 18 0 81 1 80 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,0);
},
{
name = top;
pos = (201,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,-184,o),
(171,-116,o),
(193,-46,qs),
(342,419,ls),
(353,451,o),
(373,477,o),
(388,482,qs),
(397,485,ls),
(409,489,o),
(409,499,qs),
(409,510,o),
(395,510,qs),
(268,510,ls),
(254,510,o),
(254,500,qs),
(254,490,o),
(267,487,qs),
(288,483,ls),
(313,479,o),
(320,452,o),
(312,425,qs),
(227,150,ls),
(224,140,o),
(211,140,o),
(208,150,qs),
(120,443,ls),
(113,465,o),
(126,482,o),
(150,485,qs),
(166,487,ls),
(179,489,o),
(179,500,qs),
(179,510,o),
(165,510,qs),
(0,510,ls),
(-14,510,o),
(-14,500,qs),
(-14,490,o),
(-1,487,qs),
(14,484,ls),
(28,481,o),
(41,467,o),
(48,443,qs),
(157,96,ls),
(169,60,o),
(176,10,o),
(171,-34,o),
(161,-64,qs),
(145,-114,o),
(127,-145,o),
(116,-145,qs),
(107,-145,o),
(101,-131,o),
(95,-113,o),
(81,-99,o),
(65,-99,qs),
(46,-99,o),
(24,-125,o),
(24,-144,qs),
(24,-168,o),
(56,-205,o),
(83,-205,qs),
(104,-205,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 4 3 1 3 4 1 128 0 2 1 0 1 2 0 128 5 1 3 3 17 77 0 1 1 0 97 6 1 0 0 19 0 78 1 0 51 48 39 38 29 26 12 10 7 5 0 62 1 62 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 401;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,0);
},
{
name = top;
pos = (201,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (24,0);
ref = acutecomb;
}
);
width = 401;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,0);
},
{
name = top;
pos = (201,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-16,0);
ref = uni0302;
}
);
width = 401;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,0);
},
{
name = top;
pos = (201,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0308;
}
);
width = 401;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
kernLeft = y;
kernRight = y;
layers = (
{
anchors = (
{
name = bottom;
pos = (201,0);
},
{
name = top;
pos = (201,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (23,0);
ref = gravecomb;
}
);
width = 401;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = z;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (177,0);
},
{
name = top;
pos = (203,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,0,o),
(312,18,qs),
(338,165,ls),
(341,182,o),
(328,182,qs),
(319,182,o),
(313,169,qs),
(283,96,ls),
(268,59,o),
(220,26,o),
(161,26,qs),
(116,26,ls),
(105,26,o),
(100,38,o),
(104,46,qs),
(327,472,ls),
(332,481,o),
(337,493,o),
(337,497,qs),
(337,510,o),
(322,510,qs),
(122,510,ls),
(103,510,o),
(92,522,o),
(88,534,o),
(79,534,qs),
(65,534,o),
(61,510,qs),
(37,374,ls),
(34,359,o),
(47,359,qs),
(56,359,o),
(62,372,qs),
(84,418,ls),
(99,450,o),
(146,484,o),
(195,484,qs),
(237,484,ls),
(247,484,o),
(254,472,o),
(249,464,qs),
(25,38,ls),
(21,29,o),
(15,17,o),
(15,13,qs),
(15,0,o),
(30,0,qs),
(291,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 1 4 2 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 6 1 2 6 128 0 6 5 1 6 5 126 0 3 3 23 77 0 1 1 4 95 0 4 4 17 77 0 5 5 0 95 7 1 0 0 15 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 4 3 133 0 2 1 6 1 2 6 128 0 6 5 1 6 5 126 0 1 1 4 95 0 4 4 17 77 0 5 5 0 95 7 1 0 0 15 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 43 41 37 34 27 24 22 20 17 15 11 8 0 47 1 46 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 353;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (177,0);
},
{
name = top;
pos = (203,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (26,0);
ref = acutecomb;
}
);
width = 353;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (177,0);
},
{
name = top;
pos = (203,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (-14,0);
ref = uni030C;
}
);
width = 353;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
kernRight = z;
layers = (
{
anchors = (
{
name = bottom;
pos = (177,0);
},
{
name = top;
pos = (203,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (93,0);
ref = uni0307;
}
);
width = 353;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = a.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,25,o),
(231,58,qs),
(238,68,o),
(253,67,o),
(254,57,qs),
(259,22,o),
(284,-9,o),
(310,-9,qs),
(336,-9,o),
(373,23,o),
(373,35,qs),
(373,43,o),
(365,43,qs),
(359,43,o),
(347,33,o),
(336,33,qs),
(313,33,o),
(313,66,qs),
(313,401,ls),
(313,516,o),
(214,516,qs),
(182,516,o),
(118,488,o),
(64,441,o),
(31,384,o),
(31,355,qs),
(31,327,o),
(59,327,qs),
(76,327,o),
(109,356,o),
(114,388,qs),
(123,441,o),
(164,486,o),
(189,486,qs),
(215,486,o),
(245,445,o),
(245,397,qs),
(245,306,ls),
(245,293,o),
(232,289,qs),
(172,270,o),
(78,208,o),
(24,131,o),
(24,88,qs),
(24,44,o),
(78,-9,o),
(120,-9,qs),
(157,-9,o)
);
},
{
closed = 1;
nodes = (
(96,106,qs),
(96,160,o),
(163,237,o),
(224,259,qs),
(245,267,o),
(245,248,qs),
(245,175,ls),
(245,136,o),
(217,74,o),
(173,37,o),
(147,37,qs),
(96,37,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 2 1 7 1 2 7 128 0 7 5 1 7 5 126 0 5 8 1 5 8 126 0 1 1 3 97 0 3 3 23 77 10 1 8 8 0 97 6 9 2 0 0 21 77 0 4 4 0 97 6 9 2 0 0 21 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 7 1 2 7 128 0 7 5 1 7 5 126 0 5 4 1 5 4 126 0 1 1 3 97 0 3 3 23 77 10 8 2 4 4 0 97 6 9 2 0 0 21 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
49 48 1 0 48 59 49 59 44 43 40 38 35 33 32 30 27 25 20 18 14 12 0 47 1 47 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = a.ss01;
},
{
glyphname = aacute.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 389;
}
);
note = aacute.ss01;
},
{
glyphname = abreve.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni0306;
}
);
width = 389;
}
);
note = abreve.ss01;
},
{
glyphname = uni01CE.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni030C;
}
);
width = 389;
}
);
note = uni01CE.ss01;
},
{
glyphname = acircumflex.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni0302;
}
);
width = 389;
}
);
note = acircumflex.ss01;
},
{
glyphname = adieresis.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni0308;
}
);
width = 389;
}
);
note = adieresis.ss01;
},
{
glyphname = agrave.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 389;
}
);
note = agrave.ss01;
},
{
glyphname = amacron.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni0304;
}
);
width = 389;
}
);
note = amacron.ss01;
},
{
glyphname = aogonek.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni0328;
}
);
width = 389;
}
);
note = aogonek.ss01;
},
{
glyphname = aring.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = uni030A;
}
);
width = 389;
}
);
note = aring.ss01;
},
{
glyphname = atilde.ss01;
kernLeft = a;
kernRight = a;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.ss01;
},
{
alignment = -1;
ref = tildecomb;
}
);
width = 389;
}
);
note = atilde.ss01;
},
{
glyphname = c.ss01;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,57,o),
(316,114,qs),
(318,120,o),
(314,130,o),
(308,130,qs),
(299,130,o),
(296,119,qs),
(283,78,o),
(235,37,o),
(204,37,qs),
(154,37,o),
(97,150,o),
(97,257,qs),
(97,341,o),
(126,444,o),
(169,490,o),
(189,490,qs),
(206,490,o),
(234,467,o),
(260,407,o),
(274,352,qs),
(277,339,o),
(288,339,qs),
(300,339,o),
(300,354,qs),
(298,476,ls),
(298,491,o),
(288,498,qs),
(262,516,o),
(216,516,qs),
(162,516,o),
(74,447,o),
(23,321,o),
(23,236,qs),
(23,160,o),
(65,50,o),
(139,-9,o),
(185,-9,qs),
(239,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 23 77 0 4 4 0 97 6 1 0 0 21 0 78 1 0 33 32 29 27 22 20 16 14 9 7 0 38 1 38 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 339;
}
);
note = c.ss01;
},
{
glyphname = cacute.ss01;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c.ss01;
},
{
alignment = -1;
pos = (31,0);
ref = acutecomb;
}
);
width = 339;
}
);
note = cacute.ss01;
},
{
glyphname = ccaron.ss01;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c.ss01;
},
{
alignment = -1;
pos = (-9,0);
ref = uni030C;
}
);
width = 339;
}
);
note = ccaron.ss01;
},
{
glyphname = ccedilla.ss01;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (179,-215);
},
{
name = top;
pos = (208,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c.ss01;
},
{
alignment = -1;
pos = (28,0);
ref = uni0327;
}
);
width = 339;
}
);
note = ccedilla.ss01;
},
{
glyphname = cdotaccent.ss01;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c.ss01;
},
{
alignment = -1;
pos = (98,0);
ref = uni0307;
}
);
width = 339;
}
);
note = cdotaccent.ss01;
},
{
glyphname = d.ss01;
kernLeft = c;
kernRight = d;
layers = (
{
anchors = (
{
name = bottom;
pos = (223,0);
},
{
name = top;
pos = (223,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,19,o),
(288,58,qs),
(293,66,o),
(307,66,o),
(308,57,qs),
(313,22,o),
(342,-9,o),
(367,-9,qs),
(399,-9,o),
(436,29,o),
(436,41,qs),
(436,49,o),
(428,49,qs),
(422,49,o),
(407,33,o),
(393,33,qs),
(371,33,o),
(371,66,qs),
(371,724,ls),
(371,740,o),
(360,740,qs),
(352,740,o),
(336,730,qs),
(323,722,o),
(284,706,o),
(252,700,qs),
(241,698,o),
(241,688,qs),
(241,678,o),
(252,676,qs),
(278,673,ls),
(292,672,o),
(303,658,o),
(303,640,qs),
(303,512,ls),
(303,497,o),
(287,505,qs),
(274,511,o),
(246,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(214,-9,o)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 6 8 4 8 6 4 128 0 4 7 8 4 7 126 0 2 2 16 77 0 8 8 1 97 0 1 1 23 77 10 1 7 7 0 97 5 9 2 0 0 21 77 0 3 3 0 97 5 9 2 0 0 21 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 8 4 8 6 4 128 0 4 3 8 4 3 126 0 2 2 16 77 0 8 8 1 97 0 1 1 23 77 10 7 2 3 3 0 97 5 9 2 0 0 21 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
50 49 1 0 58 56 49 62 50 62 45 44 41 39 36 34 33 31 28 26 9 7 0 48 1 48 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = d.ss01;
},
{
glyphname = dcaron.ss01;
kernLeft = c;
kernRight = dcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (223,0);
},
{
name = top;
pos = (223,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = d.ss01;
},
{
alignment = -1;
pos = (366,20);
ref = uni030C.alt;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
20
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = dcaron.ss01;
},
{
glyphname = dcroat.ss01;
kernLeft = c;
kernRight = d;
layers = (
{
anchors = (
{
name = bottom;
pos = (223,0);
},
{
name = top;
pos = (223,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,19,o),
(288,58,qs),
(293,66,o),
(307,66,o),
(308,57,qs),
(313,22,o),
(342,-9,o),
(367,-9,qs),
(399,-9,o),
(436,29,o),
(436,41,qs),
(436,49,o),
(428,49,qs),
(422,49,o),
(407,33,o),
(393,33,qs),
(371,33,o),
(371,66,qs),
(371,578,l),
(427,578,ls),
(437,578,o),
(437,588,qs),
(437,596,ls),
(437,606,o),
(427,606,qs),
(371,606,l),
(371,724,ls),
(371,740,o),
(360,740,qs),
(352,740,o),
(336,730,qs),
(323,722,o),
(284,706,o),
(252,700,qs),
(241,698,o),
(241,688,qs),
(241,678,o),
(252,676,qs),
(278,673,ls),
(292,672,o),
(303,658,o),
(303,640,qs),
(303,606,l),
(152,606,ls),
(142,606,o),
(142,596,qs),
(142,588,ls),
(142,578,o),
(152,578,qs),
(303,578,l),
(303,512,ls),
(303,497,o),
(287,505,qs),
(274,511,o),
(246,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(214,-9,o)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 10 12 8 12 10 8 128 0 8 11 12 8 11 126 5 1 3 6 1 2 1 3 2 105 0 4 4 16 77 0 12 12 1 97 0 1 1 23 77 14 1 11 11 0 97 9 13 2 0 0 21 77 0 7 7 0 97 9 13 2 0 0 21 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 10 12 8 12 10 8 128 0 8 7 12 8 7 126 5 1 3 6 1 2 1 3 2 105 0 4 4 16 77 0 12 12 1 97 0 1 1 23 77 14 11 2 7 7 0 97 9 13 2 0 0 21 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
66 65 1 0 74 72 65 78 66 78 61 60 57 55 52 50 49 47 45 43 40 38 36 34 21 19 16 14 9 7 0 64 1 64 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = dcroat.ss01;
},
{
glyphname = e.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,55,o),
(327,104,qs),
(329,110,o),
(325,120,o),
(319,120,qs),
(311,120,o),
(306,109,qs),
(293,75,o),
(248,37,o),
(213,37,qs),
(157,37,o),
(95,148,o),
(95,254,qs),
(95,277,o),
(115,277,qs),
(305,277,ls),
(330,277,o),
(330,310,qs),
(330,419,o),
(257,516,o),
(198,516,qs),
(149,516,o),
(69,448,o),
(23,328,o),
(23,249,qs),
(23,172,o),
(68,55,o),
(146,-9,o),
(195,-9,qs),
(251,-9,o)
);
},
{
closed = 1;
nodes = (
(97,318,qs),
(105,401,o),
(158,491,o),
(197,491,qs),
(229,491,o),
(261,417,o),
(261,352,qs),
(261,302,o),
(213,302,qs),
(112,302,ls),
(95,302,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 4 2 3 2 4 3 128 8 1 5 0 2 4 5 2 103 0 6 6 1 97 0 1 1 23 77 0 3 3 0 97 7 1 0 0 21 0 78 32 30 1 0 37 35 30 40 32 40 25 23 20 18 15 12 9 7 0 29 1 29 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = e.ss01;
},
{
glyphname = eacute.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (1,0);
ref = acutecomb;
}
);
width = 355;
}
);
note = eacute.ss01;
},
{
glyphname = ecaron.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (-39,0);
ref = uni030C;
}
);
width = 355;
}
);
note = ecaron.ss01;
},
{
glyphname = ecircumflex.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (-39,0);
ref = uni0302;
}
);
width = 355;
}
);
note = ecircumflex.ss01;
},
{
glyphname = edieresis.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,706);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (-27,0);
ref = uni0308;
}
);
width = 355;
}
);
note = edieresis.ss01;
},
{
glyphname = edotaccent.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (68,0);
ref = uni0307;
}
);
width = 355;
}
);
note = edotaccent.ss01;
},
{
glyphname = egrave.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,740);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 355;
}
);
note = egrave.ss01;
},
{
glyphname = emacron.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,675);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (-28,0);
ref = uni0304;
}
);
width = 355;
}
);
note = emacron.ss01;
},
{
glyphname = eogonek.ss01;
kernLeft = c;
kernRight = ae;
layers = (
{
anchors = (
{
name = bottom;
pos = (178,0);
},
{
name = ogonek;
pos = (266,10);
},
{
name = top;
pos = (178,510);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e.ss01;
},
{
alignment = -1;
pos = (72,10);
ref = uni0328;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
10
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = eogonek.ss01;
},
{
glyphname = g.ss01;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (198,-205);
},
{
name = top;
pos = (198,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,-171,o),
(397,-95,o),
(397,-46,qs),
(397,16,o),
(313,87,o),
(241,87,qs),
(143,87,ls),
(121,87,o),
(112,119,o),
(132,142,qs),
(151,163,o),
(179,180,o),
(197,180,qs),
(239,180,o),
(306,224,o),
(345,300,o),
(345,348,qs),
(345,380,o),
(327,436,o),
(310,458,qs),
(304,467,o),
(314,470,qs),
(368,483,ls),
(381,486,o),
(381,498,qs),
(381,510,o),
(366,510,qs),
(277,510,ls),
(255,510,o),
(230,513,o),
(211,516,o),
(197,516,qs),
(155,516,o),
(87,472,o),
(47,398,o),
(47,352,qs),
(47,304,o),
(91,228,o),
(120,208,qs),
(132,201,o),
(134,180,o),
(123,170,qs),
(65,121,ls),
(41,101,o),
(55,54,o),
(91,39,qs),
(103,34,o),
(103,15,o),
(91,4,qs),
(57,-26,o),
(24,-64,o),
(14,-93,o),
(14,-111,qs),
(14,-154,o),
(102,-215,o),
(178,-215,qs),
(242,-215,o)
);
},
{
closed = 1;
nodes = (
(161,494,o),
(196,494,qs),
(231,494,o),
(274,415,o),
(274,350,qs),
(274,283,o),
(232,205,o),
(196,205,qs),
(160,205,o),
(118,283,o),
(118,350,qs),
(118,415,o)
);
},
{
closed = 1;
nodes = (
(88,-36,o),
(116,-6,qs),
(134,13,o),
(166,26,o),
(197,26,qs),
(232,26,ls),
(280,26,o),
(333,-23,o),
(333,-68,qs),
(333,-123,o),
(253,-193,o),
(190,-193,qs),
(135,-193,o),
(74,-140,o),
(74,-98,qs),
(74,-77,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 5 0 3 4 5 3 105 0 4 0 8 7 4 8 105 0 2 2 17 77 0 6 6 1 97 0 1 1 23 77 0 7 7 0 97 9 1 0 0 25 0 78 1 0 80 77 73 71 67 65 61 59 51 48 44 42 30 27 25 23 0 56 1 56 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = g.ss01;
},
{
glyphname = gbreve.ss01;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (198,-205);
},
{
name = top;
pos = (198,730);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.ss01;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0306;
}
);
width = 395;
}
);
note = gbreve.ss01;
},
{
glyphname = uni0123.ss01;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (198,-205);
},
{
name = top;
pos = (198,814);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.ss01;
},
{
alignment = -1;
pos = (83,0);
ref = uni0312;
}
);
width = 395;
}
);
note = uni0123.ss01;
},
{
glyphname = gdotaccent.ss01;
kernLeft = g;
kernRight = g;
layers = (
{
anchors = (
{
name = bottom;
pos = (198,-205);
},
{
name = top;
pos = (198,710);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.ss01;
},
{
alignment = -1;
pos = (88,0);
ref = uni0307;
}
);
width = 395;
}
);
note = gdotaccent.ss01;
},
{
glyphname = f_b;
kernLeft = f;
kernRight = b;
layers = (
{
anchors = (
{
name = bottom_1;
pos = (179,0);
},
{
name = bottom_2;
pos = (537,0);
},
{
name = caret_1;
pos = (358,0);
},
{
name = top_1;
pos = (179,740);
},
{
name = top_2;
pos = (537,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,-2,o),
(360,9,qs),
(378,32,o),
(400,17,qs),
(438,-9,o),
(479,-9,qs),
(535,-9,o),
(624,63,o),
(676,191,o),
(676,274,qs),
(676,347,o),
(635,455,o),
(564,516,o),
(518,516,qs),
(467,516,o),
(424,472,qs),
(416,464,o),
(403,469,o),
(403,477,qs),
(403,724,ls),
(403,743,o),
(390,743,qs),
(381,743,o),
(372,730,o),
(366,712,qs),
(364,705,o),
(354,704,o),
(349,709,qs),
(312,748,o),
(256,748,qs),
(202,748,o),
(125,692,o),
(85,602,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls),
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(251,482,ls),
(266,482,o),
(266,496,qs),
(266,510,o),
(251,510,qs),
(165,510,ls),
(153,510,o),
(153,522,qs),
(153,590,ls),
(153,641,o),
(180,699,o),
(223,723,o),
(248,723,qs),
(297,723,o),
(335,655,o),
(335,606,qs),
(335,160,ls),
(335,100,o),
(331,28,o),
(327,5,qs),
(324,-9,o),
(335,-9,qs),
(340,-9,o)
);
},
{
closed = 1;
nodes = (
(403,68,o),
(403,113,qs),
(403,365,ls),
(403,415,o),
(453,471,o),
(487,471,qs),
(542,471,o),
(602,363,o),
(602,260,qs),
(602,148,o),
(533,16,o),
(477,16,qs),
(444,16,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 96 values pushed */
68 1 11 3 1 76 0 7 7 16 77 0 1 1 6 97 0 6 6 16 77 5 1 3 3 2 95 0 2 2 17 77 0 11 11 8 97 0 8 8 23 77 0 4 4 15 77 13 1 10 10 0 97 9 12 2 0 0 21 0 78 89 88 1 0 95 93 88 100 89 100 82 80 74 72 66 64 58 56 47 44 35 32 23 20 18 15 10 8 0 87 1 87 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = f_b;
},
{
glyphname = f_f_i;
layers = (
{
anchors = (
{
name = caret_1;
pos = (242,0);
},
{
name = caret_2;
pos = (485,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(323,482,ls),
(335,482,o),
(335,470,qs),
(335,67,ls),
(335,46,o),
(321,27,o),
(296,25,qs),
(276,23,ls),
(263,22,o),
(263,11,qs),
(263,0,o),
(278,0,qs),
(453,0,ls),
(468,0,o),
(468,12,qs),
(468,21,o),
(457,23,qs),
(432,26,ls),
(415,28,o),
(403,46,o),
(403,67,qs),
(403,470,ls),
(403,482,o),
(415,482,qs),
(569,482,ls),
(583,482,o),
(583,468,qs),
(583,67,ls),
(583,46,o),
(569,29,o),
(544,25,qs),
(532,23,ls),
(519,20,o),
(519,11,qs),
(519,0,o),
(534,0,qs),
(701,0,ls),
(716,0,o),
(716,12,qs),
(716,21,o),
(705,23,qs),
(680,26,ls),
(663,28,o),
(651,46,o),
(651,67,qs),
(651,486,ls),
(651,510,o),
(627,510,qs),
(415,510,ls),
(403,510,o),
(403,522,qs),
(403,590,ls),
(403,641,o),
(430,697,o),
(473,719,o),
(498,719,qs),
(527,719,o),
(555,691,o),
(572,654,o),
(592,626,o),
(613,626,qs),
(634,626,o),
(653,649,o),
(653,668,qs),
(653,700,o),
(579,748,o),
(518,748,qs),
(469,748,o),
(396,711,o),
(373,680,qs),
(365,669,o),
(357,680,qs),
(319,728,o),
(256,728,qs),
(202,728,o),
(125,674,o),
(85,592,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls)
);
},
{
closed = 1;
nodes = (
(153,522,qs),
(153,590,ls),
(153,652,o),
(211,703,o),
(248,703,qs),
(297,703,o),
(335,635,o),
(335,586,qs),
(335,522,ls),
(335,510,o),
(323,510,qs),
(165,510,ls),
(153,510,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
0 4 12 6 12 4 6 128 0 5 5 3 97 0 3 3 16 77 0 12 12 2 97 0 2 2 20 77 10 8 2 1 1 6 95 14 11 2 6 6 17 77 9 7 13 3 0 0 15 0 78 111 109 1 0 117 115 109 121 111 121 98 95 86 83 74 71 62 59 50 47 42 40 37 35 31 29 24 22 13 10 0 108 1 107 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = f_f_i;
},
{
glyphname = f_f_l;
layers = (
{
anchors = (
{
name = caret_1;
pos = (244,0);
},
{
name = caret_2;
pos = (487,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(323,482,ls),
(335,482,o),
(335,470,qs),
(335,67,ls),
(335,46,o),
(321,27,o),
(296,25,qs),
(276,23,ls),
(263,22,o),
(263,11,qs),
(263,0,o),
(278,0,qs),
(453,0,ls),
(468,0,o),
(468,12,qs),
(468,21,o),
(457,23,qs),
(432,26,ls),
(415,28,o),
(403,46,o),
(403,67,qs),
(403,470,ls),
(403,482,o),
(415,482,qs),
(501,482,ls),
(516,482,o),
(516,496,qs),
(516,510,o),
(501,510,qs),
(415,510,ls),
(403,510,o),
(403,522,qs),
(403,590,ls),
(403,641,o),
(430,699,o),
(473,723,o),
(498,723,qs),
(547,723,o),
(585,655,o),
(585,606,qs),
(585,67,ls),
(585,46,o),
(565,28,o),
(544,25,qs),
(530,23,ls),
(519,21,o),
(519,11,qs),
(519,0,o),
(531,0,qs),
(709,0,ls),
(721,0,o),
(721,11,qs),
(721,21,o),
(710,23,qs),
(687,26,ls),
(666,29,o),
(653,46,o),
(653,67,qs),
(653,724,ls),
(653,743,o),
(640,743,qs),
(631,743,o),
(622,730,o),
(616,712,qs),
(614,705,o),
(604,704,o),
(599,709,qs),
(562,748,o),
(506,748,qs),
(462,748,o),
(396,711,o),
(374,680,qs),
(366,669,o),
(358,680,qs),
(320,728,o),
(256,728,qs),
(202,728,o),
(125,674,o),
(85,592,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls)
);
},
{
closed = 1;
nodes = (
(153,522,qs),
(153,590,ls),
(153,652,o),
(211,703,o),
(248,703,qs),
(297,703,o),
(335,635,o),
(335,586,qs),
(335,522,ls),
(335,510,o),
(323,510,qs),
(165,510,ls),
(153,510,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
0 4 4 16 77 0 6 6 3 97 0 3 3 16 77 0 12 12 2 97 0 2 2 20 77 10 8 2 1 1 7 95 14 11 2 7 7 17 77 9 5 13 3 0 0 15 0 78 113 111 1 0 119 117 111 123 113 123 100 97 88 85 76 73 71 68 63 61 51 48 39 37 31 29 24 22 13 10 0 110 1 109 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = f_f_l;
},
{
glyphname = f_h;
kernLeft = f;
kernRight = h;
layers = (
{
anchors = (
{
name = bottom_1;
pos = (183,0);
},
{
name = bottom_2;
pos = (548,0);
},
{
name = caret_1;
pos = (366,0);
},
{
name = top_1;
pos = (183,740);
},
{
name = top_2;
pos = (548,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(251,482,ls),
(266,482,o),
(266,496,qs),
(266,510,o),
(251,510,qs),
(165,510,ls),
(153,510,o),
(153,522,qs),
(153,590,ls),
(153,641,o),
(180,699,o),
(223,723,o),
(248,723,qs),
(297,723,o),
(335,655,o),
(335,606,qs),
(335,67,ls),
(335,46,o),
(322,28,o),
(301,25,qs),
(287,23,ls),
(276,21,o),
(276,11,qs),
(276,0,o),
(288,0,qs),
(463,0,ls),
(475,0,o),
(475,11,qs),
(475,21,o),
(464,23,qs),
(437,26,ls),
(416,28,o),
(403,46,o),
(403,67,qs),
(403,335,ls),
(403,372,o),
(433,433,o),
(484,470,o),
(516,470,qs),
(549,470,o),
(585,430,o),
(585,381,qs),
(585,67,ls),
(585,46,o),
(572,28,o),
(551,25,qs),
(537,23,ls),
(526,21,o),
(526,11,qs),
(526,0,o),
(540,0,qs),
(708,0,ls),
(720,0,o),
(720,11,qs),
(720,21,o),
(709,23,qs),
(687,26,ls),
(666,29,o),
(653,46,o),
(653,67,qs),
(653,392,ls),
(653,453,o),
(599,516,o),
(552,516,qs),
(520,516,o),
(462,490,o),
(424,455,qs),
(415,447,o),
(403,450,o),
(403,459,qs),
(403,724,ls),
(403,743,o),
(390,743,qs),
(381,743,o),
(372,730,o),
(366,712,qs),
(364,705,o),
(354,704,o),
(349,709,qs),
(312,748,o),
(256,748,qs),
(202,748,o),
(125,692,o),
(85,602,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 3 3 16 77 0 8 8 2 97 0 2 2 16 77 10 1 1 1 9 95 0 9 9 17 77 0 6 6 4 97 0 4 4 23 77 7 5 11 3 0 0 15 0 78 1 0 105 102 100 97 92 90 80 77 66 64 54 51 41 39 32 30 24 22 13 10 0 115 1 114 12 7 22
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = f_h;
},
{
glyphname = f_i;
kernLeft = f;
layers = (
{
anchors = (
{
name = bottom_1;
pos = (119,0);
},
{
name = bottom_2;
pos = (358,0);
},
{
name = caret_1;
pos = (238,0);
},
{
name = top_1;
pos = (119,740);
},
{
name = top_2;
pos = (358,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(319,482,ls),
(333,482,o),
(333,468,qs),
(333,67,ls),
(333,46,o),
(319,29,o),
(294,25,qs),
(282,23,ls),
(269,20,o),
(269,11,qs),
(269,0,o),
(284,0,qs),
(451,0,ls),
(466,0,o),
(466,12,qs),
(466,21,o),
(455,23,qs),
(430,26,ls),
(413,28,o),
(401,46,o),
(401,67,qs),
(401,486,ls),
(401,510,o),
(377,510,qs),
(165,510,ls),
(153,510,o),
(153,522,qs),
(153,590,ls),
(153,641,o),
(180,697,o),
(223,719,o),
(248,719,qs),
(277,719,o),
(305,691,o),
(322,654,o),
(342,626,o),
(363,626,qs),
(384,626,o),
(403,649,o),
(403,668,qs),
(403,700,o),
(329,748,o),
(268,748,qs),
(208,748,o),
(126,692,o),
(85,602,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 3 4 5 4 3 5 128 0 4 4 2 97 0 2 2 16 77 7 1 1 1 5 95 0 5 5 17 77 6 8 2 0 0 15 0 78 1 0 67 64 55 52 43 40 35 33 30 28 24 22 13 10 0 77 1 76 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = f_i;
},
{
glyphname = f_l;
kernLeft = f;
kernRight = l;
layers = (
{
anchors = (
{
name = bottom_1;
pos = (120,0);
},
{
name = bottom_2;
pos = (361,0);
},
{
name = caret_1;
pos = (240,0);
},
{
name = top_1;
pos = (120,740);
},
{
name = top_2;
pos = (361,740);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,o),
(218,12,qs),
(218,21,o),
(207,23,qs),
(182,26,ls),
(165,28,o),
(153,46,o),
(153,67,qs),
(153,470,ls),
(153,482,o),
(165,482,qs),
(251,482,ls),
(266,482,o),
(266,496,qs),
(266,510,o),
(251,510,qs),
(165,510,ls),
(153,510,o),
(153,522,qs),
(153,590,ls),
(153,641,o),
(180,699,o),
(223,723,o),
(248,723,qs),
(297,723,o),
(335,655,o),
(335,606,qs),
(335,67,ls),
(335,46,o),
(315,28,o),
(294,25,qs),
(280,23,ls),
(269,21,o),
(269,11,qs),
(269,0,o),
(281,0,qs),
(459,0,ls),
(471,0,o),
(471,11,qs),
(471,21,o),
(460,23,qs),
(437,26,ls),
(416,29,o),
(403,46,o),
(403,67,qs),
(403,724,ls),
(403,743,o),
(390,743,qs),
(381,743,o),
(372,730,o),
(366,712,qs),
(364,705,o),
(354,704,o),
(349,709,qs),
(312,748,o),
(256,748,qs),
(202,748,o),
(125,692,o),
(85,602,o),
(85,550,qs),
(85,544,ls),
(85,508,o),
(38,503,qs),
(26,502,o),
(26,492,qs),
(26,482,o),
(38,482,qs),
(61,482,ls),
(85,482,o),
(85,458,qs),
(85,67,ls),
(85,46,o),
(71,27,o),
(46,25,qs),
(26,23,ls),
(13,22,o),
(13,11,qs),
(13,0,o),
(28,0,qs),
(203,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 3 16 77 0 5 5 2 97 0 2 2 16 77 7 1 1 1 6 95 0 6 6 17 77 4 8 2 0 0 15 0 78 1 0 69 66 64 61 56 54 44 41 32 30 24 22 13 10 0 79 1 78 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = f_l;
},
{
glyphname = q_j;
layers = (
{
anchors = (
{
name = bottom_1;
pos = (164,0);
},
{
name = bottom_2;
pos = (493,0);
},
{
name = caret_1;
pos = (328,0);
},
{
name = top_1;
pos = (164,510);
},
{
name = top_2;
pos = (493,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(605,635,o),
(605,658,qs),
(605,681,o),
(578,710,o),
(556,710,qs),
(534,710,o),
(506,681,o),
(506,658,qs),
(506,636,o),
(534,605,o),
(556,605,qs),
(577,605,o)
);
},
{
closed = 1;
nodes = (
(371,-205,o),
(371,-181,qs),
(371,347,ls),
(371,407,o),
(375,480,o),
(379,502,qs),
(382,516,o),
(371,516,qs),
(367,516,o),
(356,509,o),
(346,498,qs),
(328,475,o),
(306,490,qs),
(287,504,o),
(252,516,o),
(232,516,qs),
(174,516,o),
(82,444,o),
(30,317,o),
(30,233,qs),
(30,161,o),
(68,52,o),
(137,-9,o),
(181,-9,qs),
(213,-9,o),
(257,17,o),
(282,50,qs),
(289,58,o),
(303,53,o),
(303,45,qs),
(303,-138,ls),
(303,-159,o),
(290,-174,o),
(269,-177,qs),
(232,-182,ls),
(221,-184,o),
(221,-193,qs),
(221,-205,o),
(236,-205,qs),
(347,-205,ls)
);
},
{
closed = 1;
nodes = (
(589,-76,o),
(589,44,qs),
(589,501,ls),
(589,513,o),
(580,513,qs),
(574,513,o),
(565,504,qs),
(547,488,o),
(509,466,o),
(478,461,qs),
(462,458,o),
(462,450,qs),
(462,440,o),
(475,439,qs),
(496,436,ls),
(510,434,o),
(521,421,o),
(521,403,qs),
(521,-91,ls),
(521,-131,o),
(501,-175,o),
(482,-175,qs),
(469,-175,o),
(456,-158,o),
(448,-136,o),
(434,-119,o),
(418,-119,qs),
(400,-119,o),
(379,-144,o),
(379,-161,qs),
(379,-185,o),
(417,-215,o),
(446,-215,qs),
(511,-215,o)
);
},
{
closed = 1;
nodes = (
(104,144,o),
(104,247,qs),
(104,360,o),
(173,491,o),
(229,491,qs),
(262,491,o),
(303,439,o),
(303,394,qs),
(303,169,ls),
(303,132,o),
(274,72,o),
(229,37,o),
(203,37,qs),
(157,37,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
73 21 2 10 11 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 7 3 8 8 7 114 12 1 0 0 1 97 0 1 1 14 77 0 11 11 4 97 9 5 2 4 4 23 77 15 1 10 10 3 97 0 3 3 21 77 13 1 2 2 19 77 0 8 8 6 98 14 1 6 6 25 6 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 7 3 8 3 7 8 128 12 1 0 0 1 97 0 1 1 14 77 0 11 11 4 97 9 5 2 4 4 23 77 15 1 10 10 3 97 0 3 3 21 77 13 1 2 2 19 77 0 8 8 6 98 14 1 6 6 25 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 7 3 8 3 7 8 128 0 1 12 1 0 4 1 0 105 0 11 11 4 97 9 5 2 4 4 23 77 15 1 10 10 3 97 0 3 3 21 77 13 1 2 2 19 77 0 8 8 6 98 14 1 6 6 25 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
87 86 53 52 13 12 1 0 95 93 86 99 87 99 81 79 64 62 59 57 52 85 53 85 44 42 36 34 28 26 12 51 13 50 7 5 0 11 1 11 16 7 22
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = q_j;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,387,o),
(200,410,qs),
(205,417,o),
(217,416,o),
(218,409,qs),
(222,390,o),
(245,363,o),
(264,363,qs),
(290,363,o),
(330,408,o),
(330,459,qs),
(330,475,o),
(318,475,qs),
(306,475,o),
(306,460,qs),
(306,431,o),
(293,406,o),
(282,406,qs),
(265,406,o),
(265,436,qs),
(265,650,ls),
(265,730,o),
(186,730,qs),
(152,730,o),
(85,697,o),
(40,645,o),
(40,618,qs),
(40,608,o),
(54,596,o),
(64,596,qs),
(96,596,o),
(106,641,qs),
(114,674,o),
(146,704,o),
(166,704,qs),
(186,704,o),
(211,676,o),
(211,642,qs),
(211,588,ls),
(211,579,o),
(201,576,qs),
(128,556,o),
(34,479,o),
(34,431,qs),
(34,400,o),
(77,363,o),
(111,363,qs),
(140,363,o)
);
},
{
closed = 1;
nodes = (
(92,446,qs),
(92,482,o),
(145,534,o),
(194,550,qs),
(211,556,o),
(211,543,qs),
(211,498,ls),
(211,457,o),
(163,401,o),
(133,401,qs),
(92,401,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 3 0 1 2 3 1 105 0 4 7 0 4 89 9 1 7 0 0 7 89 9 1 7 7 0 97 6 8 2 0 7 0 81 49 48 1 0 48 58 49 58 40 38 35 33 30 28 25 23 18 16 13 11 0 47 1 47 10 6 22
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,412,o),
(328,495,o),
(328,547,qs),
(328,599,o),
(290,681,o),
(225,730,o),
(184,730,qs),
(144,730,o),
(79,681,o),
(40,599,o),
(40,547,qs),
(40,495,o),
(78,412,o),
(144,363,o),
(184,363,qs),
(225,363,o)
);
},
{
closed = 1;
nodes = (
(101,547,qs),
(101,706,o),
(184,706,qs),
(268,706,o),
(268,547,qs),
(268,387,o),
(184,387,qs),
(101,387,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 21 19 16 23 17 23 9 7 0 15 1 15 6 6 22
CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,89,o),
(424,257,o),
(424,361,qs),
(424,465,o),
(375,632,o),
(288,730,o),
(230,730,qs),
(172,730,o),
(84,632,o),
(36,465,o),
(36,361,qs),
(36,257,o),
(84,89,o),
(172,-9,o),
(230,-9,qs),
(288,-9,o)
);
},
{
closed = 1;
nodes = (
(108,188,o),
(108,361,qs),
(108,534,o),
(167,703,o),
(230,703,qs),
(293,703,o),
(352,534,o),
(352,361,qs),
(352,188,o),
(293,18,o),
(230,18,qs),
(167,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 20 77 5 1 2 2 0 97 4 1 0 0 21 0 78 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,0,o),
(239,11,qs),
(239,22,o),
(226,23,qs),
(193,27,ls),
(172,29,o),
(157,45,o),
(157,66,qs),
(157,713,ls),
(157,735,o),
(136,735,qs),
(124,735,o),
(74,718,o),
(21,709,qs),
(5,706,o),
(5,695,qs),
(5,681,o),
(23,682,qs),
(59,686,ls),
(74,688,o),
(93,677,o),
(93,660,qs),
(93,66,ls),
(93,45,o),
(78,29,o),
(57,27,qs),
(18,23,ls),
(5,22,o),
(5,11,qs),
(5,0,o),
(20,0,qs),
(224,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 1 2 0 2 1 0 128 0 2 2 20 77 3 1 0 0 15 0 78 1 0 21 19 14 13 0 31 1 30 4 7 22
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,0,o),
(366,23,qs),
(378,211,ls),
(380,228,o),
(366,228,qs),
(354,228,o),
(351,215,qs),
(342,168,ls),
(334,124,o),
(304,77,o),
(254,60,o),
(216,60,qs),
(109,60,ls),
(99,60,o),
(88,73,o),
(94,82,qs),
(172,200,ls),
(227,283,o),
(312,412,o),
(361,521,o),
(361,573,qs),
(361,647,o),
(274,730,o),
(205,730,qs),
(165,730,o),
(87,697,o),
(32,620,o),
(25,554,qs),
(23,534,o),
(38,534,qs),
(50,534,o),
(53,550,qs),
(64,623,o),
(142,690,o),
(190,690,qs),
(238,690,o),
(289,624,o),
(289,562,qs),
(289,493,o),
(222,328,o),
(147,214,qs),
(27,31,ls),
(20,20,o),
(20,13,qs),
(20,0,o),
(38,0,qs),
(341,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
43 1 4 5 44 2 2 0 4 2 76 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 1 1 3 97 0 3 3 20 77 0 4 4 0 96 6 1 0 0 15 0 78 1 0 42 40 35 32 23 21 17 15 12 10 0 46 1 45 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,31,o),
(307,100,o),
(341,188,o),
(341,236,qs),
(341,296,o),
(301,389,o),
(231,441,o),
(185,441,qs),
(168,441,o),
(151,436,qs),
(146,435,o),
(143,442,o),
(147,445,qs),
(170,461,ls),
(299,550,o),
(299,629,qs),
(299,675,o),
(238,730,o),
(188,730,qs),
(130,730,o),
(51,656,o),
(44,594,qs),
(42,576,o),
(56,576,qs),
(69,576,o),
(71,591,qs),
(79,640,o),
(131,696,o),
(169,696,qs),
(198,696,o),
(231,655,o),
(231,618,qs),
(231,584,o),
(191,516,o),
(147,475,qs),
(75,407,ls),
(61,393,o),
(67,383,q),
(75,374,o),
(91,386,qs),
(119,405,o),
(159,405,qs),
(269,405,o),
(269,212,qs),
(269,125,o),
(198,18,o),
(141,18,qs),
(114,18,o),
(93,42,o),
(87,72,o),
(75,96,o),
(56,96,qs),
(40,96,o),
(20,77,o),
(20,60,qs),
(20,29,o),
(83,-9,o),
(135,-9,qs),
(175,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 5 4 7 4 5 7 128 0 1 3 2 3 1 2 128 0 7 0 3 1 7 3 105 0 4 4 6 97 0 6 6 20 77 0 2 2 0 97 8 1 0 0 21 0 78 1 0 51 49 40 38 35 33 30 28 17 15 12 10 7 5 0 58 1 58 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,0,o),
(379,11,qs),
(379,20,o),
(366,23,qs),
(343,27,ls),
(322,31,o),
(309,45,o),
(309,66,qs),
(309,196,ls),
(309,210,o),
(323,210,qs),
(367,210,ls),
(379,210,o),
(379,222,qs),
(379,254,ls),
(379,266,o),
(367,266,qs),
(323,266,ls),
(309,266,o),
(309,280,qs),
(309,504,ls),
(309,512,o),
(299,517,o),
(292,513,qs),
(255,492,l),
(245,485,o),
(245,476,qs),
(245,280,ls),
(245,266,o),
(231,266,qs),
(72,266,ls),
(57,266,o),
(64,280,qs),
(304,703,ls),
(313,720,o),
(295,720,qs),
(275,720,ls),
(263,720,o),
(259,710,q),
(19,252,ls),
(15,243,o),
(10,232,o),
(10,227,qs),
(10,210,o),
(29,210,qs),
(231,210,ls),
(245,210,o),
(245,196,qs),
(245,66,ls),
(245,47,o),
(232,32,o),
(211,29,qs),
(168,23,ls),
(155,22,o),
(155,11,qs),
(155,0,o),
(170,0,qs),
(364,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
14 1 1 3 1 76 4 1 3 5 1 1 0 3 1 105 0 2 2 14 77 6 1 0 0 15 0 78 1 0 47 44 41 38 28 25 22 19 13 10 0 57 1 56 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,47,o),
(349,154,o),
(349,229,qs),
(349,292,o),
(302,399,o),
(203,470,o),
(124,479,qs),
(109,480,o),
(112,494,qs),
(141,647,ls),
(144,660,o),
(156,660,qs),
(321,660,ls),
(333,660,o),
(336,672,qs),
(351,724,ls),
(353,732,o),
(350,745,o),
(342,745,qs),
(334,745,o),
(324,733,o),
(309,720,o),
(292,720,qs),
(135,720,ls),
(123,720,o),
(120,707,qs),
(67,431,ls),
(64,417,o),
(79,415,qs),
(187,406,o),
(277,303,o),
(277,208,qs),
(277,139,o),
(236,55,o),
(175,18,o),
(143,18,qs),
(114,18,o),
(87,42,o),
(75,72,o),
(60,96,o),
(43,96,qs),
(28,96,o),
(10,77,o),
(10,62,qs),
(10,39,o),
(48,7,o),
(105,-9,o),
(132,-9,qs),
(185,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
0 6 5 1 5 6 1 128 0 1 2 5 1 2 126 0 4 4 16 77 0 5 5 3 95 0 3 3 14 77 0 2 2 0 97 7 1 0 0 21 0 78 1 0 41 40 37 34 30 28 26 23 13 11 8 6 0 48 1 48 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 382;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,55,o),
(376,164,o),
(376,229,qs),
(376,295,o),
(333,397,o),
(259,456,o),
(212,456,qs),
(170,456,o),
(139,434,qs),
(133,430,o),
(126,435,o),
(128,442,qs),
(154,546,o),
(262,675,o),
(350,704,qs),
(361,707,o),
(361,717,qs),
(361,723,o),
(352,731,o),
(342,729,qs),
(278,714,o),
(167,626,o),
(83,498,o),
(36,343,o),
(36,261,qs),
(36,181,o),
(79,59,o),
(156,-9,o),
(206,-9,qs),
(253,-9,o)
);
},
{
closed = 1;
nodes = (
(102,218,qs),
(102,431,o),
(208,431,qs),
(258,431,o),
(304,331,o),
(304,224,qs),
(304,119,o),
(255,18,o),
(204,18,qs),
(102,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 3 2 1 3 105 5 1 2 2 0 97 4 1 0 0 21 0 78 31 30 1 0 37 35 30 39 31 39 23 21 0 29 1 29 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,o),
(138,11,qs),
(352,675,ls),
(360,700,o),
(360,708,qs),
(360,720,o),
(346,720,qs),
(49,720,ls),
(37,720,o),
(34,708,qs),
(19,656,ls),
(17,648,o),
(20,635,o),
(28,635,qs),
(36,635,o),
(46,648,o),
(62,660,o),
(78,660,qs),
(300,660,ls),
(316,660,o),
(311,644,qs),
(88,15,ls),
(83,0,o),
(99,0,qs),
(124,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
19 1 1 3 1 76 0 2 1 0 1 2 0 128 0 1 1 3 95 0 3 3 14 77 4 1 0 0 15 0 78 1 0 18 15 11 9 7 4 0 24 1 23 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,42,o),
(405,130,o),
(405,186,qs),
(405,244,o),
(344,341,o),
(271,387,qs),
(265,391,o),
(265,400,o),
(271,403,qs),
(324,432,o),
(388,521,o),
(388,573,qs),
(388,618,o),
(346,689,o),
(274,730,o),
(229,730,qs),
(182,730,o),
(102,688,o),
(53,614,o),
(53,564,qs),
(53,516,o),
(107,419,o),
(163,381,qs),
(168,377,o),
(168,368,o),
(162,365,qs),
(98,331,o),
(28,234,o),
(28,172,qs),
(28,127,o),
(73,44,o),
(157,-9,o),
(215,-9,qs),
(269,-9,o)
);
},
{
closed = 1;
nodes = (
(129,502,o),
(112,560,o),
(112,590,qs),
(112,641,o),
(175,703,o),
(227,703,qs),
(278,703,o),
(329,634,o),
(329,576,qs),
(329,527,o),
(290,443,o),
(252,416,qs),
(239,406,o),
(226,415,qs),
(179,445,o)
);
},
{
closed = 1;
nodes = (
(113,61,o),
(89,131,o),
(89,169,qs),
(89,290,o),
(181,353,qs),
(194,362,o),
(207,353,qs),
(247,330,o),
(309,275,o),
(346,202,o),
(346,151,qs),
(346,90,o),
(277,18,o),
(217,18,qs),
(169,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 2 2 1 97 0 1 1 20 77 5 1 3 3 0 97 4 1 0 0 21 0 78 50 49 1 0 49 63 50 63 43 41 18 16 0 33 1 33 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,139,o),
(366,336,o),
(366,460,qs),
(366,541,o),
(323,662,o),
(247,730,o),
(196,730,qs),
(149,730,o),
(72,666,o),
(26,563,o),
(26,502,qs),
(26,442,o),
(69,343,o),
(143,285,o),
(190,285,qs),
(235,285,o),
(266,309,qs),
(272,314,o),
(280,310,o),
(278,302,qs),
(259,184,o),
(159,47,o),
(82,18,qs),
(71,13,o),
(71,4,qs),
(71,-2,o),
(80,-10,o),
(90,-8,qs),
(166,13,o)
);
},
{
closed = 1;
nodes = (
(195,703,qs),
(245,703,o),
(294,606,o),
(294,513,qs),
(294,416,o),
(242,310,o),
(191,310,qs),
(98,310,o),
(98,507,qs),
(98,703,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
0 2 0 0 2 0 101 0 3 3 1 97 0 1 1 20 3 78 36 40 38 44 4 7 26
CALL[ ]	/* CallFunction */";
};
width = 402;
}
);
note = nine;
unicode = 57;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 170;
}
);
note = space;
unicode = 32;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 170;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,20,o),
(159,44,qs),
(159,67,o),
(127,96,o),
(107,96,qs),
(85,96,o),
(54,67,o),
(54,44,qs),
(54,20,o),
(85,-9,o),
(107,-9,qs),
(127,-9,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
0 1 1 0 97 2 1 0 0 21 0 78 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,-24,o),
(163,29,qs),
(163,60,o),
(134,96,o),
(109,96,qs),
(88,96,o),
(61,69,o),
(61,49,qs),
(61,31,o),
(77,12,o),
(97,-2,o),
(113,-19,o),
(113,-35,qs),
(113,-62,o),
(89,-112,o),
(60,-141,qs),
(48,-153,o),
(57,-160,qs),
(65,-167,o),
(76,-156,qs),
(114,-123,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
0 0 0 118 46 1 7 23
CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (0,380);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
380
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = comma;
},
{
alignment = -1;
pos = (2,380);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
380
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (160,0);
ref = period;
},
{
alignment = -1;
pos = (320,0);
ref = period;
}
);
width = 533;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,195,qs),
(130,248,o),
(137,369,o),
(147,491,o),
(156,599,o),
(163,677,o),
(163,694,qs),
(163,719,o),
(139,750,o),
(117,750,qs),
(95,750,o),
(71,719,o),
(71,694,qs),
(71,678,o),
(78,599,o),
(87,491,o),
(97,369,o),
(104,248,o),
(105,195,qs),
(105,179,o),
(117,179,qs),
(129,179,o)
);
},
{
closed = 1;
nodes = (
(169,20,o),
(169,44,qs),
(169,67,o),
(137,96,o),
(117,96,qs),
(95,96,o),
(64,67,o),
(64,44,qs),
(64,20,o),
(95,-9,o),
(117,-9,qs),
(137,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 0 1 3 1 0 3 128 0 1 1 16 77 0 3 3 2 97 5 1 2 2 21 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 1 133 4 1 0 3 0 133 0 3 3 2 97 5 1 2 2 21 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
23 22 1 0 29 27 22 33 23 33 12 10 0 21 1 21 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 237;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(68,491,o),
(68,467,qs),
(68,445,o),
(99,415,o),
(121,415,qs),
(141,415,o),
(173,445,o),
(173,467,qs),
(173,491,o),
(141,520,o),
(121,520,qs),
(99,520,o)
);
},
{
closed = 1;
nodes = (
(167,-184,o),
(167,-159,qs),
(167,-138,o),
(157,-35,o),
(144,102,o),
(134,250,o),
(133,316,qs),
(133,332,o),
(121,332,qs),
(109,332,o),
(109,316,qs),
(108,250,o),
(98,102,o),
(85,-35,o),
(75,-138,o),
(75,-159,qs),
(75,-184,o),
(99,-215,o),
(121,-215,qs),
(143,-215,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 3 1 2 1 3 2 128 0 1 1 0 97 4 1 0 0 23 77 5 1 2 2 25 2 78 13 12 1 0 23 21 12 31 13 31 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 237;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,195,qs),
(141,341,ls),
(142,367,o),
(150,390,o),
(160,400,qs),
(199,436,ls),
(242,477,o),
(285,554,o),
(285,611,qs),
(285,677,o),
(207,750,o),
(138,750,qs),
(116,750,o),
(58,736,o),
(42,723,qs),
(37,719,o),
(31,709,o),
(31,701,qs),
(28,580,ls),
(28,563,o),
(39,563,qs),
(48,563,o),
(52,577,qs),
(75,651,o),
(124,720,o),
(167,720,qs),
(192,720,o),
(228,680,o),
(228,630,qs),
(228,580,o),
(194,523,o),
(162,491,qs),
(138,467,ls),
(120,449,o),
(107,407,o),
(108,372,qs),
(112,195,ls),
(112,179,o),
(124,179,qs),
(137,179,o)
);
},
{
closed = 1;
nodes = (
(175,20,o),
(175,44,qs),
(175,67,o),
(143,96,o),
(123,96,qs),
(101,96,o),
(70,67,o),
(70,44,qs),
(70,20,o),
(101,-9,o),
(123,-9,qs),
(143,-9,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 2 1 0 1 2 0 128 6 1 0 5 1 0 5 126 0 1 1 3 97 0 3 3 16 77 0 5 5 4 97 7 1 4 4 21 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 1 0 1 2 0 128 6 1 0 5 1 0 5 126 0 3 0 1 2 3 1 105 0 5 5 4 97 7 1 4 4 21 4 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
41 40 1 0 47 45 40 51 41 51 28 26 19 17 14 12 0 39 1 39 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,491,o),
(142,467,qs),
(142,445,o),
(174,415,o),
(194,415,qs),
(217,415,o),
(247,445,o),
(247,467,qs),
(247,491,o),
(217,520,o),
(194,520,qs),
(174,520,o)
);
},
{
closed = 1;
nodes = (
(259,-201,o),
(275,-188,qs),
(280,-183,o),
(286,-174,o),
(286,-166,qs),
(289,-45,ls),
(289,-28,o),
(278,-28,qs),
(269,-28,o),
(265,-42,qs),
(243,-115,o),
(193,-185,o),
(150,-185,qs),
(125,-185,o),
(89,-144,o),
(89,-95,qs),
(89,-45,o),
(124,13,o),
(155,44,qs),
(179,68,ls),
(197,86,o),
(210,129,o),
(209,163,qs),
(205,316,ls),
(205,332,o),
(193,332,qs),
(180,332,o),
(180,316,qs),
(176,194,ls),
(175,169,o),
(168,146,o),
(157,135,qs),
(118,99,ls),
(75,59,o),
(32,-19,o),
(32,-76,qs),
(32,-142,o),
(110,-215,o),
(179,-215,qs),
(202,-215,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
46 1 4 5 1 76 0 3 1 5 1 3 5 128 0 5 4 1 5 4 126 0 1 1 0 97 6 1 0 0 23 77 0 4 4 2 97 7 1 2 2 25 2 78 13 12 1 0 44 42 39 37 26 24 12 51 13 51 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-54,325);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
325
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 105;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,335,o),
(230,371,qs),
(230,405,o),
(182,449,o),
(152,449,qs),
(118,449,o),
(72,405,o),
(72,371,qs),
(72,335,o),
(118,292,o),
(152,292,qs),
(182,292,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,440,o),
(261,455,qs),
(261,471,o),
(248,498,o),
(233,533,o),
(230,558,qs),
(229,564,o),
(237,567,o),
(241,563,qs),
(271,538,o),
(295,496,o),
(314,485,qs),
(327,478,o),
(357,483,o),
(367,499,qs),
(376,516,o),
(366,546,o),
(353,553,qs),
(339,561,o),
(308,563,o),
(271,567,o),
(248,577,qs),
(242,579,o),
(242,587,o),
(248,589,q),
(271,600,o),
(308,603,o),
(339,605,o),
(353,613,qs),
(366,621,o),
(376,651,o),
(367,667,qs),
(357,683,o),
(327,689,o),
(314,681,qs),
(300,673,o),
(282,648,o),
(261,618,o),
(240,602,q),
(236,598,o),
(229,602,o),
(230,608,qs),
(233,634,o),
(248,668,o),
(261,696,o),
(261,711,qs),
(261,726,o),
(241,750,o),
(222,750,qs),
(203,750,o),
(183,726,o),
(183,711,qs),
(183,696,o),
(196,668,o),
(211,634,o),
(214,608,qs),
(215,602,o),
(209,598,o),
(204,602,qs),
(184,618,o),
(162,648,o),
(144,673,o),
(130,681,qs),
(117,689,o),
(87,683,o),
(77,667,qs),
(68,651,o),
(78,621,o),
(91,613,qs),
(105,605,o),
(136,603,o),
(173,600,o),
(196,589,q),
(202,587,o),
(202,579,o),
(196,577,qs),
(173,567,o),
(136,563,o),
(105,561,o),
(91,553,qs),
(78,546,o),
(68,516,o),
(77,499,qs),
(87,483,o),
(117,478,o),
(130,485,qs),
(150,496,o),
(173,538,o),
(203,563,qs),
(208,567,o),
(215,564,o),
(214,558,qs),
(211,533,o),
(196,498,o),
(183,471,o),
(183,455,qs),
(183,440,o),
(203,416,o),
(222,416,qs),
(241,416,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
57 1 2 3 7 1 0 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 2 3 1 3 2 1 128 5 1 1 0 3 1 0 126 6 1 0 0 132 0 3 3 16 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 2 3 133 4 1 2 1 2 133 5 1 1 0 1 133 6 1 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 80 79 72 71 51 49 29 28 21 20 0 99 1 99 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,213,ls),
(192,230,o),
(209,230,qs),
(367,230,ls),
(383,230,o),
(380,213,qs),
(331,0,l),
(363,0,l),
(412,213,ls),
(417,230,o),
(434,230,qs),
(562,230,l),
(562,260,l),
(440,260,ls),
(424,260,o),
(427,277,qs),
(465,442,ls),
(470,460,o),
(487,460,qs),
(615,460,l),
(615,490,l),
(493,490,ls),
(477,490,o),
(480,507,qs),
(529,720,l),
(497,720,l),
(448,507,ls),
(443,490,o),
(426,490,qs),
(268,490,ls),
(252,490,o),
(255,507,qs),
(304,720,l),
(272,720,l),
(223,507,ls),
(218,490,o),
(201,490,qs),
(73,490,l),
(73,460,l),
(195,460,ls),
(211,460,o),
(208,443,qs),
(170,278,ls),
(165,260,o),
(148,260,qs),
(20,260,l),
(20,230,l),
(142,230,ls),
(158,230,o),
(155,213,qs),
(106,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(202,277,qs),
(240,442,ls),
(245,460,o),
(262,460,qs),
(420,460,ls),
(436,460,o),
(433,443,qs),
(395,278,ls),
(390,260,o),
(373,260,qs),
(215,260,ls),
(199,260,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
17 14 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 14 77 15 8 2 2 2 3 95 7 5 2 3 3 17 77 16 13 2 11 11 15 11 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
7 5 2 3 15 8 2 2 1 3 2 104 17 14 9 3 1 12 10 2 0 11 1 0 103 6 1 4 4 14 77 16 13 2 11 11 15 11 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
54 52 0 0 60 57 52 63 54 63 0 51 0 51 49 46 44 43 41 39 38 36 33 34 18 50 18 33 35 33 34 18 7 31
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,-130,o),
(41,-121,qs),
(248,779,ls),
(250,790,o),
(240,790,qs),
(228,790,ls),
(219,790,o),
(217,781,qs),
(10,-119,ls),
(8,-130,o),
(18,-130,qs),
(30,-130,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 2 1 0 0 118 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 258;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,-130,o),
(248,-119,qs),
(41,781,ls),
(39,790,o),
(30,790,qs),
(18,790,ls),
(8,790,o),
(10,779,qs),
(217,-121,ls),
(219,-130,o),
(228,-130,qs),
(240,-130,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 2 1 0 0 118 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 258;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-54,325);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
325
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 105;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-54,325);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
325
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 105;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,259,o),
(348,269,qs),
(348,283,ls),
(348,293,o),
(338,293,qs),
(92,293,ls),
(82,293,o),
(82,283,qs),
(82,269,ls),
(82,259,o),
(92,259,qs),
(338,259,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 430;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,259,o),
(428,269,qs),
(428,283,ls),
(428,293,o),
(418,293,qs),
(92,293,ls),
(82,293,o),
(82,283,qs),
(82,269,ls),
(82,259,o),
(92,259,qs),
(418,259,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
kernLeft = hyphen;
kernRight = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(638,259,o),
(638,269,qs),
(638,283,ls),
(638,293,o),
(628,293,qs),
(92,293,ls),
(82,293,o),
(82,283,qs),
(82,269,ls),
(82,259,o),
(92,259,qs),
(628,259,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-109,o),
(361,-99,qs),
(361,-85,ls),
(361,-75,o),
(351,-75,qs),
(25,-75,ls),
(15,-75,o),
(15,-85,qs),
(15,-99,ls),
(15,-109,o),
(25,-109,qs),
(351,-109,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 376;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,-100,qs),
(302,-95,o),
(296,-89,qs),
(214,-15,o),
(138,200,o),
(138,322,qs),
(138,444,o),
(214,659,o),
(296,733,qs),
(302,739,o),
(302,744,qs),
(302,752,o),
(293,752,qs),
(289,752,o),
(284,749,qs),
(249,724,o),
(174,643,o),
(110,534,o),
(70,400,o),
(70,322,qs),
(70,244,o),
(110,110,o),
(174,1,o),
(249,-80,o),
(284,-105,qs),
(289,-108,o),
(293,-108,qs),
(302,-108,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 134 0 0 0 16 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 27 0 27 30 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 340;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,-105,qs),
(91,-80,o),
(166,1,o),
(230,110,o),
(270,244,o),
(270,322,qs),
(270,400,o),
(230,534,o),
(166,643,o),
(91,724,o),
(56,749,qs),
(52,752,o),
(47,752,qs),
(38,752,o),
(38,744,qs),
(38,739,o),
(44,733,qs),
(127,659,o),
(202,444,o),
(202,322,qs),
(202,200,o),
(127,-15,o),
(44,-89,qs),
(38,-95,o),
(38,-100,qs),
(38,-108,o),
(47,-108,qs),
(52,-108,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 134 0 1 1 16 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 1 0 1 133 0 0 0 118
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
28 16 2 7 24
CALL[ ]	/* CallFunction */";
};
width = 340;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,-84,qs),
(258,-72,o),
(246,-72,qs),
(178,-72,o),
(178,36,qs),
(178,178,ls),
(178,245,o),
(143,307,o),
(104,322,q),
(143,337,o),
(178,399,o),
(178,466,qs),
(178,608,ls),
(178,716,o),
(246,716,qs),
(258,716,o),
(258,728,qs),
(258,740,o),
(246,740,qs),
(120,740,o),
(120,604,qs),
(120,462,ls),
(120,392,o),
(87,334,o),
(52,334,qs),
(40,334,o),
(40,322,qs),
(40,310,o),
(52,310,qs),
(87,310,o),
(120,253,o),
(120,182,qs),
(120,40,ls),
(120,-96,o),
(246,-96,qs),
(258,-96,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
26 1 1 2 1 76 0 2 0 1 5 2 1 105 0 5 6 1 0 5 0 101 0 4 4 3 97 0 3 3 16 4 78 1 0 33 31 21 19 17 15 11 9 7 5 0 35 1 35 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,40,qs),
(198,182,ls),
(198,253,o),
(231,310,o),
(266,310,qs),
(278,310,o),
(278,322,qs),
(278,334,o),
(266,334,qs),
(231,334,o),
(198,392,o),
(198,462,qs),
(198,604,ls),
(198,740,o),
(72,740,qs),
(60,740,o),
(60,728,qs),
(60,716,o),
(72,716,qs),
(140,716,o),
(140,608,qs),
(140,466,ls),
(140,399,o),
(175,337,o),
(214,322,q),
(175,307,o),
(140,245,o),
(140,178,qs),
(140,36,ls),
(140,-72,o),
(72,-72,qs),
(60,-72,o),
(60,-84,qs),
(60,-96,o),
(72,-96,qs),
(198,-96,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
10 1 5 4 1 76 0 4 0 5 1 4 5 105 0 1 6 1 0 1 0 101 0 2 2 3 97 0 3 3 16 2 78 1 0 31 29 27 25 21 19 17 15 5 3 0 35 1 35 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,-98,o),
(265,-86,qs),
(265,-74,o),
(251,-74,qs),
(156,-74,ls),
(144,-74,o),
(144,-62,qs),
(144,704,ls),
(144,716,o),
(156,716,qs),
(251,716,ls),
(265,716,o),
(265,728,qs),
(265,740,o),
(251,740,qs),
(110,740,ls),
(86,740,o),
(86,716,qs),
(86,-74,ls),
(86,-98,o),
(110,-98,qs),
(251,-98,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 3 4 1 0 3 0 99 0 2 2 1 95 0 1 1 16 2 78 1 0 18 15 12 9 7 4 0 21 1 20 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,-74,qs),
(239,716,ls),
(239,740,o),
(215,740,qs),
(74,740,ls),
(60,740,o),
(60,728,qs),
(60,716,o),
(74,716,qs),
(169,716,ls),
(181,716,o),
(181,704,qs),
(181,-62,ls),
(181,-74,o),
(169,-74,qs),
(74,-74,ls),
(60,-74,o),
(60,-86,qs),
(60,-98,o),
(74,-98,qs),
(215,-98,ls),
(239,-98,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 4 1 0 1 0 99 0 2 2 3 95 0 3 3 16 2 78 2 0 18 15 13 10 7 4 0 21 2 21 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,-634);
ref = quoteright;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
-634
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 166;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,-634);
ref = quoteright;
},
{
alignment = -1;
pos = (150,-634);
ref = quoteright;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
-634
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
-634
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
kernLeft = quotedblleft;
kernRight = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-40,0);
ref = quoteleft;
},
{
alignment = -1;
pos = (110,0);
ref = quoteleft;
}
);
width = 316;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
kernLeft = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = quoteright;
},
{
alignment = -1;
pos = (150,0);
ref = quoteright;
}
);
width = 316;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
kernLeft = quotedblleft;
kernRight = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,588,o),
(126,606,qs),
(126,624,o),
(110,642,o),
(90,655,o),
(74,674,o),
(74,692,qs),
(74,709,o),
(93,740,o),
(127,769,qs),
(134,774,o),
(134,785,o),
(130,788,qs),
(123,793,o),
(111,784,qs),
(65,751,o),
(24,675,o),
(24,629,qs),
(24,598,o),
(53,562,o),
(78,562,qs),
(101,562,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 118 1 0 0 21 1 21 2 7 22
CALL[ ]	/* CallFunction */";
};
width = 166;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
kernLeft = quotedblright;
kernRight = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,617,o),
(142,663,qs),
(142,694,o),
(113,730,o),
(88,730,qs),
(66,730,o),
(40,704,o),
(40,686,qs),
(40,668,o),
(56,650,o),
(76,637,o),
(92,618,o),
(92,600,qs),
(92,587,o),
(73,552,o),
(39,523,qs),
(32,518,o),
(32,507,o),
(36,504,qs),
(43,499,o),
(55,508,qs),
(102,541,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 0 0 20 0 78 47 1 7 23
CALL[ ]	/* CallFunction */";
};
width = 166;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = guilsinglleft;
},
{
alignment = -1;
pos = (150,0);
ref = guilsinglleft;
}
);
width = 412;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,251,o),
(352,268,qs),
(251,409,ls),
(245,418,o),
(237,424,o),
(232,424,qs),
(225,424,o),
(221,414,o),
(223,409,qs),
(292,260,ls),
(297,251,o),
(292,242,qs),
(223,93,ls),
(221,89,o),
(225,78,o),
(232,78,qs),
(237,78,o),
(245,84,o),
(251,93,qs),
(352,234,ls)
);
},
{
closed = 1;
nodes = (
(213,251,o),
(202,268,qs),
(101,409,ls),
(95,418,o),
(87,424,o),
(82,424,qs),
(75,424,o),
(71,414,o),
(73,409,qs),
(142,260,ls),
(147,251,o),
(142,242,qs),
(73,93,ls),
(71,89,o),
(75,78,o),
(82,78,qs),
(87,78,o),
(95,84,o),
(101,93,qs),
(202,234,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
3 1 1 0 1 133 2 1 0 0 118 40 40 40 34 4 7 26
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,78,o),
(180,78,qs),
(188,78,o),
(191,89,o),
(189,93,qs),
(120,242,ls),
(116,251,o),
(120,260,qs),
(189,409,ls),
(191,414,o),
(188,424,o),
(180,424,qs),
(176,424,o),
(167,418,o),
(161,409,qs),
(60,268,ls),
(49,251,o),
(60,234,qs),
(161,93,ls),
(167,84,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
14 1 1 0 1 76 0 0 1 0 133 0 1 1 118 40 38 2 7 24
CALL[ ]	/* CallFunction */";
};
width = 262;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,251,o),
(202,268,qs),
(101,409,ls),
(95,418,o),
(87,424,o),
(82,424,qs),
(75,424,o),
(71,414,o),
(73,409,qs),
(142,260,ls),
(147,251,o),
(142,242,qs),
(73,93,ls),
(71,89,o),
(75,78,o),
(82,78,qs),
(87,78,o),
(95,84,o),
(101,93,qs),
(202,234,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 40 34 2 7 24
CALL[ ]	/* CallFunction */";
};
width = 262;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
kernLeft = quotedbl;
kernRight = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = quotesingle;
},
{
alignment = -1;
pos = (139,0);
ref = quotesingle;
}
);
width = 371;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
kernLeft = quotedbl;
kernRight = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,506,qs),
(130,552,o),
(146,616,o),
(161,662,o),
(161,681,qs),
(161,702,o),
(139,731,o),
(116,731,qs),
(94,731,o),
(72,702,o),
(72,681,qs),
(72,662,o),
(87,616,o),
(103,552,o),
(104,506,qs),
(104,489,o),
(116,489,qs),
(128,489,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 20 0 78 1 0 10 8 0 17 1 17 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = at;
kernLeft = c;
kernRight = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,-26,qs),
(540,-16,o),
(532,-4,qs),
(524,8,o),
(507,-6,qs),
(444,-52,o),
(346,-52,qs),
(229,-52,o),
(106,85,o),
(106,215,qs),
(106,315,o),
(176,467,o),
(300,553,o),
(380,553,qs),
(473,553,o),
(581,429,o),
(581,322,qs),
(581,264,o),
(544,160,o),
(485,94,o),
(452,94,qs),
(409,94,o),
(429,177,qs),
(484,413,ls),
(489,433,o),
(474,433,qs),
(462,433,o),
(456,416,qs),
(453,409,o),
(448,409,qs),
(443,409,o),
(439,416,qs),
(425,438,o),
(393,438,qs),
(359,438,o),
(289,387,o),
(231,303,o),
(196,201,o),
(196,151,qs),
(196,63,o),
(250,63,qs),
(311,63,o),
(382,192,q),
(384,197,o),
(391,195,o),
(389,190,qs),
(388,187,o),
(387,181,o),
(386,178,qs),
(373,125,o),
(403,63,o),
(442,63,qs),
(477,63,o),
(541,105,o),
(591,177,o),
(620,269,o),
(620,319,qs),
(620,397,o),
(561,515,o),
(455,580,o),
(384,580,qs),
(315,580,o),
(191,522,o),
(95,421,o),
(40,290,o),
(40,218,qs),
(40,132,o),
(112,-4,o),
(250,-81,o),
(348,-81,qs),
(457,-81,o)
);
},
{
closed = 1;
nodes = (
(248,120,o),
(248,143,qs),
(248,186,o),
(274,280,o),
(317,361,o),
(366,411,o),
(389,411,qs),
(419,411,o),
(419,369,qs),
(419,342,o),
(398,271,o),
(363,199,o),
(323,138,o),
(283,100,o),
(268,100,qs),
(258,100,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 100 values pushed */
0 6 4 11 4 6 11 128 0 5 11 10 11 5 10 128 0 1 0 8 4 1 8 105 0 4 0 11 5 4 11 105 13 1 10 7 2 10 89 0 7 3 1 2 9 7 2 105 0 9 0 0 9 89 0 9 9 0 97 12 1 0 9 0 81 72 71 1 0 80 78 71 86 72 86 64 62 57 55 50 48 45 43 41 39 37 35 30 28 19 17 10 8 0 70 1 70 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,36,o),
(378,89,qs),
(388,102,o),
(397,88,qs),
(443,16,ls),
(453,0,o),
(472,0,qs),
(574,0,ls),
(588,0,o),
(588,11,qs),
(588,22,o),
(576,23,qs),
(532,27,ls),
(520,28,o),
(505,44,o),
(495,59,qs),
(437,152,ls),
(428,168,o),
(436,185,qs),
(450,213,o),
(476,273,o),
(485,295,qs),
(501,333,o),
(540,361,o),
(562,363,qs),
(581,365,ls),
(594,366,o),
(594,377,qs),
(594,388,o),
(580,388,qs),
(405,388,ls),
(391,388,o),
(391,378,qs),
(391,367,o),
(404,366,qs),
(439,361,ls),
(459,358,o),
(467,331,o),
(456,302,qs),
(450,287,o),
(429,238,o),
(418,215,qs),
(414,208,o),
(404,207,o),
(399,214,qs),
(272,418,ls),
(265,429,o),
(277,437,q),
(348,474,o),
(412,558,o),
(412,609,qs),
(412,638,o),
(382,695,o),
(324,733,o),
(282,733,qs),
(235,733,o),
(163,693,o),
(124,627,o),
(124,586,qs),
(124,547,o),
(154,474,o),
(183,426,qs),
(190,414,o),
(179,407,qs),
(113,366,o),
(32,243,o),
(32,168,qs),
(32,121,o),
(73,40,o),
(151,-9,o),
(206,-9,qs),
(250,-9,o)
);
},
{
closed = 1;
nodes = (
(243,463,q),
(211,514,o),
(187,574,o),
(187,607,qs),
(187,644,o),
(236,706,o),
(277,706,qs),
(308,706,o),
(340,675,o),
(353,629,o),
(353,605,qs),
(353,566,o),
(308,486,o),
(262,458,qs),
(249,450,o)
);
},
{
closed = 1;
nodes = (
(98,126,o),
(98,188,qs),
(98,250,o),
(144,350,o),
(192,384,qs),
(203,392,o),
(212,380,q),
(359,148,ls),
(369,131,o),
(358,114,q),
(324,72,o),
(254,38,o),
(219,38,qs),
(157,38,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 2 4 5 4 2 5 128 0 4 4 1 97 0 1 1 20 77 0 3 3 15 77 7 1 5 5 0 97 6 1 0 0 21 0 78 88 87 1 0 87 100 88 100 80 78 65 62 42 39 17 15 0 71 1 71 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,-130,o),
(301,-116,qs),
(301,666,ls),
(301,690,o),
(325,690,qs),
(348,690,ls),
(372,690,o),
(372,666,qs),
(372,-116,ls),
(372,-130,o),
(386,-130,qs),
(413,-130,ls),
(427,-130,o),
(427,-116,qs),
(427,654,ls),
(427,675,o),
(440,689,o),
(461,693,qs),
(484,697,ls),
(497,700,o),
(497,709,qs),
(497,720,o),
(482,720,qs),
(223,720,ls),
(164,720,o),
(74,669,o),
(24,579,o),
(24,520,qs),
(24,463,o),
(74,375,o),
(163,326,o),
(220,326,qs),
(232,326,ls),
(246,326,o),
(246,312,qs),
(246,-116,ls),
(246,-130,o),
(260,-130,qs),
(287,-130,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 4 0 4 1 0 128 3 5 2 0 0 132 0 4 4 2 95 0 2 2 14 4 78 1 0 34 31 28 25 16 13 7 4 0 38 1 37 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,-63,o),
(310,-8,qs),
(310,28,o),
(272,97,o),
(236,135,qs),
(226,147,o),
(241,150,qs),
(287,161,o),
(346,233,o),
(346,286,qs),
(346,335,o),
(289,426,o),
(233,479,qs),
(194,516,o),
(150,570,o),
(132,616,o),
(132,639,qs),
(132,666,o),
(171,702,o),
(199,702,qs),
(229,702,o),
(272,651,o),
(294,586,qs),
(296,579,o),
(303,570,o),
(310,570,qs),
(323,570,o),
(323,585,qs),
(321,695,ls),
(321,704,o),
(311,711,qs),
(295,721,o),
(255,730,o),
(233,730,qs),
(160,730,o),
(77,664,o),
(77,609,qs),
(77,573,o),
(115,504,o),
(151,466,qs),
(161,454,o),
(146,451,qs),
(100,440,o),
(41,368,o),
(41,315,qs),
(41,266,o),
(98,175,o),
(154,122,qs),
(194,85,o),
(237,31,o),
(255,-14,o),
(255,-38,qs),
(255,-65,o),
(217,-101,o),
(188,-101,qs),
(158,-101,o),
(115,-50,o),
(93,15,qs),
(91,22,o),
(85,31,o),
(77,31,qs),
(64,31,o),
(64,16,qs),
(66,-94,ls),
(66,-103,o),
(76,-110,qs),
(92,-120,o),
(132,-129,o),
(154,-129,qs),
(228,-129,o)
);
},
{
closed = 1;
nodes = (
(188,184,qs),
(139,234,o),
(96,308,o),
(96,345,qs),
(96,380,o),
(134,424,o),
(168,429,qs),
(186,432,o),
(199,417,qs),
(249,367,o),
(291,294,o),
(291,256,qs),
(291,221,o),
(252,177,o),
(219,172,qs),
(201,169,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 2 6 1 0 2 0 101 0 5 5 3 97 0 3 3 20 5 78 1 0 50 48 43 42 36 34 15 13 8 7 0 69 1 69 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(629,43,o),
(732,146,o),
(790,282,o),
(790,360,qs),
(790,438,o),
(732,574,o),
(629,677,o),
(493,735,o),
(415,735,qs),
(337,735,o),
(201,677,o),
(98,574,o),
(40,438,o),
(40,360,qs),
(40,282,o),
(98,146,o),
(201,43,o),
(337,-15,o),
(415,-15,qs),
(493,-15,o)
);
},
{
closed = 1;
nodes = (
(224,76,o),
(132,169,o),
(80,291,o),
(80,360,qs),
(80,429,o),
(132,551,o),
(224,644,o),
(346,697,o),
(415,697,qs),
(484,697,o),
(606,644,o),
(698,551,o),
(750,429,o),
(750,360,qs),
(750,291,o),
(698,169,o),
(606,76,o),
(484,23,o),
(415,23,qs),
(346,23,o)
);
},
{
closed = 1;
nodes = (
(513,152,o),
(533,160,q),
(543,166,o),
(543,174,qs),
(546,278,ls),
(546,297,o),
(533,297,qs),
(522,297,o),
(517,277,qs),
(510,253,ls),
(494,199,o),
(451,162,o),
(419,162,qs),
(387,162,o),
(328,212,o),
(290,303,o),
(290,363,qs),
(290,422,o),
(324,510,o),
(383,560,o),
(418,560,qs),
(447,560,o),
(488,522,o),
(504,468,qs),
(511,444,ls),
(516,424,o),
(527,424,qs),
(540,424,o),
(540,443,qs),
(537,547,ls),
(537,556,o),
(527,560,qs),
(507,569,o),
(456,579,o),
(424,579,qs),
(368,579,o),
(277,520,o),
(223,422,o),
(223,363,qs),
(223,302,o),
(272,201,o),
(362,142,o),
(421,142,qs),
(460,142,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 100 values pushed */
79 1 8 9 1 76 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 0 1 0 3 5 1 3 105 0 5 0 7 6 5 7 105 0 8 12 1 4 2 8 4 105 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 41 40 21 20 1 0 77 75 71 69 63 61 57 55 49 47 40 83 41 83 31 29 20 39 21 39 11 9 0 19 1 19 13 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 830;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(629,43,o),
(732,146,o),
(790,282,o),
(790,360,qs),
(790,438,o),
(732,574,o),
(629,677,o),
(493,735,o),
(415,735,qs),
(337,735,o),
(201,677,o),
(98,574,o),
(40,438,o),
(40,360,qs),
(40,282,o),
(98,146,o),
(201,43,o),
(337,-15,o),
(415,-15,qs),
(493,-15,o)
);
},
{
closed = 1;
nodes = (
(224,76,o),
(132,169,o),
(80,291,o),
(80,360,qs),
(80,429,o),
(132,551,o),
(224,644,o),
(346,697,o),
(415,697,qs),
(484,697,o),
(606,644,o),
(698,551,o),
(750,429,o),
(750,360,qs),
(750,291,o),
(698,169,o),
(606,76,o),
(484,23,o),
(415,23,qs),
(346,23,o)
);
},
{
closed = 1;
nodes = (
(605,159,o),
(605,172,qs),
(605,178,o),
(596,183,o),
(590,179,qs),
(577,171,o),
(568,171,qs),
(552,171,o),
(532,193,o),
(524,224,qs),
(508,284,ls),
(501,311,o),
(477,344,o),
(455,352,qs),
(444,357,o),
(455,360,qs),
(499,373,o),
(554,433,o),
(554,471,qs),
(554,518,o),
(476,578,o),
(414,578,qs),
(269,578,ls),
(256,578,o),
(256,568,qs),
(256,559,o),
(268,558,qs),
(280,556,ls),
(295,554,o),
(305,545,o),
(305,532,qs),
(305,194,ls),
(305,182,o),
(295,173,o),
(280,171,qs),
(265,169,ls),
(256,168,o),
(256,159,qs),
(256,149,o),
(266,149,qs),
(407,149,ls),
(418,149,o),
(418,159,qs),
(418,162,o),
(413,169,o),
(405,170,qs),
(384,173,ls),
(372,175,o),
(364,184,o),
(364,197,qs),
(364,340,ls),
(364,355,o),
(385,355,qs),
(413,355,o),
(439,325,o),
(451,278,qs),
(468,212,ls),
(477,178,o),
(517,144,o),
(554,144,qs),
(575,144,o)
);
},
{
closed = 1;
nodes = (
(364,407,qs),
(364,533,ls),
(364,556,o),
(408,556,qs),
(442,556,o),
(493,507,o),
(493,463,qs),
(493,423,o),
(442,374,o),
(410,374,qs),
(364,374,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 102 values pushed */
0 6 8 4 8 6 4 128 0 1 0 3 7 1 3 105 0 7 0 10 9 7 10 105 14 1 9 0 5 8 9 5 105 0 8 13 1 4 2 8 4 105 12 1 2 0 0 2 89 12 1 2 2 0 97 11 1 0 2 0 81 102 101 41 40 21 20 1 0 108 106 101 111 102 111 94 92 79 76 61 58 48 46 40 100 41 100 31 29 20 39 21 39 11 9 0 19 1 19 15 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 830;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,403,o),
(187,408,qs),
(187,412,o),
(181,413,qs),
(161,416,ls),
(153,418,o),
(146,424,o),
(146,433,qs),
(146,689,ls),
(146,700,o),
(160,700,qs),
(177,700,o),
(204,673,o),
(210,641,qs),
(212,631,ls),
(215,619,o),
(221,619,qs),
(227,619,o),
(227,628,qs),
(223,717,ls),
(223,727,o),
(215,727,qs),
(211,727,o),
(201,720,o),
(180,720,qs),
(71,720,ls),
(50,720,o),
(41,727,o),
(36,727,qs),
(28,727,o),
(28,717,qs),
(24,628,ls),
(24,619,o),
(30,619,qs),
(36,619,o),
(39,631,qs),
(41,641,ls),
(47,673,o),
(75,700,o),
(91,700,qs),
(105,700,o),
(105,689,qs),
(105,433,ls),
(105,424,o),
(98,418,o),
(90,416,qs),
(70,413,ls),
(64,412,o),
(64,408,qs),
(64,403,o),
(71,403,qs),
(180,403,ls)
);
},
{
closed = 1;
nodes = (
(319,403,o),
(319,408,qs),
(319,412,o),
(313,413,qs),
(307,414,ls),
(287,417,o),
(288,441,qs),
(297,684,ls),
(297,687,o),
(300,688,o),
(301,685,qs),
(364,423,ls),
(366,413,o),
(373,407,o),
(377,407,qs),
(381,407,o),
(389,413,o),
(392,423,qs),
(459,685,ls),
(460,688,o),
(463,687,o),
(463,684,qs),
(471,432,ls),
(471,423,o),
(465,417,o),
(456,415,qs),
(446,413,ls),
(440,412,o),
(440,408,qs),
(440,403,o),
(447,403,qs),
(536,403,ls),
(543,403,o),
(543,408,qs),
(543,412,o),
(537,413,qs),
(527,415,ls),
(518,417,o),
(512,423,o),
(512,432,qs),
(503,691,ls),
(503,708,o),
(518,709,qs),
(529,710,ls),
(534,710,o),
(534,716,qs),
(534,720,o),
(528,720,qs),
(461,720,ls),
(450,720,o),
(447,709,qs),
(391,487,ls),
(390,484,o),
(387,484,o),
(386,487,qs),
(337,707,ls),
(334,720,o),
(321,720,qs),
(253,720,ls),
(246,720,o),
(246,716,qs),
(246,710,o),
(252,710,qs),
(262,709,ls),
(272,708,o),
(278,701,o),
(278,691,qs),
(269,441,ls),
(268,428,o),
(260,416,o),
(249,414,qs),
(243,413,ls),
(237,412,o),
(237,408,qs),
(237,403,o),
(244,403,qs),
(312,403,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
82 67 2 10 3 117 106 2 1 0 99 94 73 60 54 49 2 7 7 1 3 76 14 12 11 13 4 7 1 7 134 4 1 2 3 1 2 89 0 10 0 3 10 89 9 8 2 3 6 1 0 1 3 0 105 4 1 2 2 1 97 5 1 1 2 1 81 52 52 0 0 52 128 52 127 97 96 86 85 80 78 71 69 0 51 0 51 36 35 33 49 35 36 42 15 6 29
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,488,o),
(356,554,o),
(356,593,qs),
(356,632,o),
(319,697,o),
(255,735,o),
(214,735,qs),
(174,735,o),
(108,697,o),
(70,632,o),
(70,593,qs),
(70,554,o),
(108,488,o),
(174,449,o),
(214,449,qs),
(255,449,o)
);
},
{
closed = 1;
nodes = (
(102,546,o),
(102,593,qs),
(102,639,o),
(166,704,o),
(214,704,qs),
(261,704,o),
(324,639,o),
(324,593,qs),
(324,546,o),
(261,480,o),
(214,480,qs),
(166,480,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 426;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,-130,o),
(142,-122,qs),
(142,782,ls),
(142,790,o),
(134,790,qs),
(118,790,ls),
(110,790,o),
(110,782,qs),
(110,-122,ls),
(110,-130,o),
(118,-130,qs),
(134,-130,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 3 2 4 1 0 1 76 0 0 1 0 133 2 1 1 1 118 0 0 0 11 0 11 21 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = bar;
unicode = 124;
},
{
glyphname = cent;
kernLeft = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (182,0);
},
{
name = top;
pos = (208,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,-109,o),
(203,-101,qs),
(203,-7,l),
(243,-1,o),
(301,74,o),
(316,167,qs),
(319,187,o),
(307,187,qs),
(298,187,o),
(295,176,qs),
(279,103,o),
(235,45,o),
(203,42,q),
(203,488,l),
(223,482,o),
(256,423,o),
(274,352,qs),
(277,339,o),
(288,339,qs),
(300,339,o),
(300,354,qs),
(298,476,ls),
(298,491,o),
(288,498,qs),
(262,516,o),
(216,516,qs),
(209,516,o),
(203,515,q),
(203,608,ls),
(203,616,o),
(195,616,qs),
(187,616,ls),
(179,616,o),
(179,608,qs),
(179,512,l),
(111,495,o),
(23,349,o),
(23,236,qs),
(23,160,o),
(65,51,o),
(135,-9,o),
(179,-9,q),
(179,-101,ls),
(179,-109,o),
(187,-109,qs),
(195,-109,ls)
);
},
{
closed = 1;
nodes = (
(122,433,o),
(160,484,o),
(179,489,q),
(179,44,l),
(142,54,o),
(97,160,o),
(97,257,qs),
(97,334,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
11 1 3 2 50 31 17 10 4 4 3 49 42 32 3 1 5 43 1 0 1 4 76 0 2 3 2 133 0 4 3 5 3 4 5 128 0 5 1 3 5 1 126 6 1 0 1 0 134 0 3 3 23 77 0 1 1 21 1 78 1 0 38 36 27 25 20 19 15 13 4 3 0 45 1 45 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 339;
}
);
note = cent;
unicode = 162;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (209,0);
},
{
name = top;
pos = (229,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,-8,q),
(202,-101,ls),
(202,-109,o),
(210,-109,qs),
(218,-109,ls),
(226,-109,o),
(226,-101,qs),
(226,-5,l),
(293,7,o),
(377,105,o),
(377,178,qs),
(377,242,o),
(308,355,o),
(233,416,qs),
(229,419,o),
(226,422,q),
(226,697,l),
(257,688,o),
(296,617,o),
(314,552,qs),
(321,527,ls),
(325,513,o),
(334,513,qs),
(347,513,o),
(347,530,qs),
(344,681,ls),
(344,689,o),
(337,699,o),
(331,703,qs),
(313,716,o),
(257,730,o),
(227,730,qs),
(226,730,l),
(226,822,ls),
(226,830,o),
(218,830,qs),
(210,830,ls),
(202,830,o),
(202,822,qs),
(202,729,l),
(132,722,o),
(44,635,o),
(44,567,qs),
(44,511,o),
(112,412,o),
(186,359,qs),
(194,353,o),
(202,347,q),
(202,20,l),
(112,20,o),
(78,163,qs),
(69,201,ls),
(65,219,o),
(54,219,qs),
(41,219,o),
(41,199,qs),
(46,42,ls),
(46,31,o),
(53,22,o),
(60,18,qs),
(72,11,o),
(115,-1,o),
(164,-9,o),
(184,-9,qs),
(193,-9,o)
);
},
{
closed = 1;
nodes = (
(158,700,o),
(201,700,qs),
(202,700,l),
(202,441,l),
(149,486,o),
(107,555,o),
(107,593,qs),
(107,644,o)
);
},
{
closed = 1;
nodes = (
(267,28,o),
(226,22,q),
(226,326,l),
(272,284,o),
(314,197,o),
(314,148,qs),
(314,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 106 values pushed */
25 1 4 3 24 1 7 4 47 1 5 7 76 68 48 16 4 1 5 77 1 2 1 63 56 2 0 2 57 1 6 0 7 76 0 3 4 3 133 0 7 4 5 4 7 5 128 0 5 1 4 5 1 126 0 1 2 4 1 2 126 0 6 0 6 134 0 4 4 20 77 0 2 2 0 97 8 1 0 0 21 0 78 1 0 71 69 61 59 42 40 33 31 29 27 15 14 11 9 0 64 1 64 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
kernRight = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,194,o),
(159,62,o),
(252,-9,o),
(311,-9,qs),
(352,-9,o),
(414,6,o),
(438,18,qs),
(451,25,o),
(451,39,qs),
(455,201,ls),
(455,216,o),
(444,218,qs),
(431,220,o),
(428,205,qs),
(416,156,ls),
(403,104,o),
(376,44,o),
(338,20,o),
(309,20,qs),
(261,20,o),
(178,154,o),
(166,284,q),
(305,284,ls),
(315,284,o),
(317,294,qs),
(320,308,ls),
(322,318,o),
(313,318,qs),
(164,318,l),
(163,340,o),
(163,364,qs),
(163,385,o),
(164,404,q),
(330,404,ls),
(340,404,o),
(342,414,qs),
(345,428,ls),
(347,438,o),
(338,438,qs),
(166,438,l),
(175,566,o),
(254,701,o),
(308,701,qs),
(344,701,o),
(389,640,o),
(410,563,qs),
(420,526,ls),
(423,513,o),
(434,513,qs),
(446,513,o),
(446,530,qs),
(443,682,ls),
(443,696,o),
(431,703,qs),
(407,715,o),
(347,730,o),
(314,730,qs),
(258,730,o),
(164,658,o),
(99,527,o),
(89,438,q),
(26,438,ls),
(15,438,o),
(13,428,qs),
(10,414,ls),
(8,404,o),
(18,404,qs),
(86,404,l),
(85,384,o),
(85,364,qs),
(85,340,o),
(86,318,q),
(26,318,ls),
(15,318,o),
(13,308,qs),
(10,294,ls),
(8,284,o),
(18,284,qs),
(89,284,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
0 5 6 3 6 5 3 128 7 1 3 8 1 2 1 3 2 105 9 1 1 10 13 2 0 11 1 0 103 0 6 6 4 97 0 4 4 20 77 0 11 11 12 97 0 12 12 21 12 78 1 0 75 73 60 58 56 54 51 49 45 43 40 38 36 34 30 28 22 20 17 15 12 10 6 4 0 78 1 78 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 495;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,33,o),
(262,66,q),
(285,37,o),
(343,-9,o),
(387,-9,qs),
(429,-9,o),
(496,51,o),
(496,106,qs),
(496,163,o),
(462,219,o),
(433,219,qs),
(417,219,o),
(393,199,o),
(393,182,qs),
(393,161,o),
(416,144,o),
(446,133,o),
(469,114,o),
(469,91,qs),
(469,70,o),
(439,43,o),
(410,43,qs),
(374,43,o),
(318,86,o),
(289,111,q),
(306,145,o),
(324,218,o),
(324,253,qs),
(324,274,o),
(316,312,o),
(309,330,q),
(417,330,ls),
(427,330,o),
(429,340,qs),
(432,354,ls),
(434,364,o),
(425,364,qs),
(294,364,l),
(276,401,o),
(232,472,o),
(200,549,o),
(200,593,qs),
(200,638,o),
(254,700,o),
(299,700,qs),
(350,700,o),
(400,629,o),
(422,552,qs),
(429,527,ls),
(433,513,o),
(442,513,qs),
(455,513,o),
(455,530,qs),
(452,681,ls),
(452,689,o),
(445,699,o),
(439,703,qs),
(401,730,o),
(325,730,qs),
(271,730,o),
(186,686,o),
(137,609,o),
(137,559,qs),
(137,504,o),
(183,409,o),
(210,364,q),
(89,364,ls),
(78,364,o),
(76,354,qs),
(73,340,ls),
(71,330,o),
(81,330,qs),
(230,330,l),
(248,298,o),
(274,233,o),
(274,198,qs),
(274,166,o),
(263,134,q),
(241,151,o),
(190,175,o),
(158,175,qs),
(105,175,o),
(40,114,o),
(40,73,qs),
(40,39,o),
(90,-9,o),
(139,-9,qs),
(175,-9,o)
);
},
{
closed = 1;
nodes = (
(124,148,o),
(155,148,qs),
(183,148,o),
(224,113,o),
(243,89,q),
(225,59,o),
(176,21,o),
(152,21,qs),
(123,21,o),
(89,53,o),
(89,82,qs),
(89,110,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 113 values pushed */
94 85 62 9 4 9 13 1 76 0 5 6 3 6 5 3 128 0 10 2 1 2 10 1 128 7 1 3 8 1 2 10 3 2 103 0 1 0 13 9 1 13 105 0 6 6 4 97 0 4 4 20 77 0 9 9 0 98 11 14 2 0 0 21 77 0 12 12 0 97 11 14 2 0 0 21 0 78 1 0 98 96 92 90 83 81 77 75 66 64 56 54 51 49 43 41 37 35 29 27 21 19 16 14 7 5 0 87 1 87 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
kernLeft = Y;
kernRight = Y;
layers = (
{
anchors = (
{
name = bottom;
pos = (257,0);
},
{
name = top;
pos = (277,720);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,0,o),
(385,11,qs),
(385,22,o),
(372,23,qs),
(327,30,ls),
(308,33,o),
(293,48,o),
(293,69,qs),
(293,284,l),
(453,284,ls),
(463,284,o),
(463,294,qs),
(463,308,ls),
(463,318,o),
(453,318,qs),
(293,318,l),
(293,340,o),
(306,368,qs),
(324,404,l),
(453,404,ls),
(463,404,o),
(463,414,qs),
(463,428,ls),
(463,438,o),
(453,438,qs),
(341,438,l),
(437,631,ls),
(454,664,o),
(475,692,o),
(489,695,qs),
(499,697,ls),
(513,700,o),
(513,710,qs),
(513,720,o),
(498,720,qs),
(356,720,ls),
(342,720,o),
(342,709,qs),
(342,700,o),
(359,697,qs),
(381,694,ls),
(404,691,o),
(417,658,o),
(404,632,qs),
(286,391,ls),
(282,384,o),
(270,384,o),
(266,391,qs),
(143,653,ls),
(133,674,o),
(147,694,o),
(164,695,qs),
(183,697,ls),
(200,698,o),
(200,709,qs),
(200,720,o),
(186,720,qs),
(15,720,ls),
(0,720,o),
(0,710,qs),
(0,700,o),
(14,697,qs),
(23,695,ls),
(40,691,o),
(58,673,o),
(65,656,qs),
(169,438,l),
(62,438,ls),
(52,438,o),
(52,428,qs),
(52,414,ls),
(52,404,o),
(62,404,qs),
(185,404,l),
(212,348,ls),
(219,332,o),
(221,318,q),
(62,318,ls),
(52,318,o),
(52,308,qs),
(52,294,ls),
(52,284,o),
(62,284,qs),
(222,284,l),
(222,69,ls),
(222,48,o),
(208,33,o),
(188,30,qs),
(143,23,ls),
(130,22,o),
(130,11,qs),
(130,0,o),
(145,0,qs),
(370,0,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
0 8 3 2 3 8 2 128 10 1 4 11 1 3 8 4 3 103 12 1 2 13 1 1 0 2 1 103 7 1 6 6 5 95 9 1 5 5 14 77 14 1 0 0 15 0 78 1 0 84 82 79 77 74 72 69 67 59 56 47 46 42 41 40 39 37 34 26 24 21 19 16 14 11 9 0 93 1 92 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = yen;
unicode = 165;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,153,o),
(284,163,qs),
(284,354,l),
(461,354,ls),
(471,354,o),
(471,364,qs),
(471,378,ls),
(471,388,o),
(461,388,qs),
(284,388,l),
(284,580,ls),
(284,590,o),
(274,590,qs),
(258,590,ls),
(248,590,o),
(248,580,qs),
(248,388,l),
(70,388,ls),
(60,388,o),
(60,378,qs),
(60,364,ls),
(60,354,o),
(70,354,qs),
(248,354,l),
(248,163,ls),
(248,153,o),
(258,153,qs),
(274,153,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 3 2 3 133 6 1 0 1 0 134 4 1 2 1 1 2 87 4 1 2 2 1 95 5 1 1 2 1 79 1 0 24 22 19 17 15 12 10 8 5 3 0 27 1 26 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,354,o),
(471,364,qs),
(471,378,ls),
(471,388,o),
(461,388,qs),
(70,388,ls),
(60,388,o),
(60,378,qs),
(60,364,ls),
(60,354,o),
(70,354,qs),
(461,354,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 6 22
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,194,qs),
(266,347,l),
(418,194,ls),
(425,187,o),
(432,194,qs),
(442,204,ls),
(451,211,o),
(442,218,q),
(290,371,l),
(443,524,ls),
(450,531,o),
(443,538,qs),
(433,548,ls),
(426,557,o),
(419,548,q),
(266,395,l),
(112,548,l),
(105,557,o),
(98,548,qs),
(88,538,ls),
(81,531,o),
(88,524,qs),
(242,371,l),
(89,218,l),
(80,211,o),
(89,204,qs),
(99,194,ls),
(106,187,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
23 9 1 50
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,514,o),
(318,538,qs),
(318,561,o),
(286,590,o),
(266,590,qs),
(244,590,o),
(213,561,o),
(213,538,qs),
(213,514,o),
(244,485,o),
(266,485,qs),
(286,485,o)
);
},
{
closed = 1;
nodes = (
(471,354,o),
(471,364,qs),
(471,378,ls),
(471,388,o),
(461,388,qs),
(70,388,ls),
(60,388,o),
(60,378,qs),
(60,364,ls),
(60,354,o),
(70,354,qs),
(461,354,ls)
);
},
{
closed = 1;
nodes = (
(318,182,o),
(318,206,qs),
(318,229,o),
(286,258,o),
(266,258,qs),
(244,258,o),
(213,229,o),
(213,206,qs),
(213,182,o),
(244,153,o),
(266,153,qs),
(286,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 6 1 0 3 1 0 105 0 3 7 1 2 5 3 2 103 0 5 4 4 5 89 0 5 5 4 97 8 1 4 5 4 81 25 24 13 12 1 0 31 29 24 35 25 35 19 16 12 23 13 22 7 5 0 11 1 11 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,454,o),
(471,464,qs),
(471,478,ls),
(471,488,o),
(461,488,qs),
(70,488,ls),
(60,488,o),
(60,478,qs),
(60,464,ls),
(60,454,o),
(70,454,qs),
(461,454,ls)
);
},
{
closed = 1;
nodes = (
(471,254,o),
(471,264,qs),
(471,278,ls),
(471,288,o),
(461,288,qs),
(70,288,ls),
(60,288,o),
(60,278,qs),
(60,264,ls),
(60,254,o),
(70,254,qs),
(461,254,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 3 5 1 2 3 2 99 4 1 0 0 1 95 0 1 1 17 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 4 1 0 3 1 0 103 0 3 2 2 3 87 0 3 3 2 95 5 1 2 3 2 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
13 12 1 0 19 16 12 23 13 22 7 4 0 11 1 10 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,349,o),
(471,359,qs),
(471,373,ls),
(471,383,o),
(461,387,qs),
(74,533,ls),
(68,535,o),
(60,529,o),
(60,523,qs),
(60,511,ls),
(60,501,o),
(70,498,qs),
(424,366,l),
(70,234,ls),
(60,231,o),
(60,221,qs),
(60,209,ls),
(60,203,o),
(68,197,o),
(74,199,qs),
(461,345,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,383,o),
(60,373,qs),
(60,359,ls),
(60,349,o),
(70,345,qs),
(457,199,ls),
(463,197,o),
(471,203,o),
(471,209,qs),
(471,221,ls),
(471,231,o),
(461,234,qs),
(107,366,l),
(461,498,ls),
(471,501,o),
(471,511,qs),
(471,523,ls),
(471,529,o),
(463,535,o),
(457,533,qs),
(70,387,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 1 1 50
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = less;
unicode = 60;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,352,o),
(468,401,qs),
(471,416,o),
(458,416,qs),
(449,416,o),
(444,404,qs),
(435,378,o),
(397,353,o),
(372,353,qs),
(341,353,o),
(278,384,o),
(210,414,o),
(172,414,qs),
(135,414,o),
(72,364,o),
(62,314,qs),
(59,299,o),
(72,299,qs),
(82,299,o),
(86,311,qs),
(95,337,o),
(133,362,o),
(158,362,qs),
(191,362,o),
(252,332,o),
(319,301,o),
(358,301,qs),
(396,301,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
5 1 3 0 1 4 3 1 105 0 4 0 0 4 89 0 4 4 0 97 2 6 2 0 4 0 81 1 0 24 22 19 17 15 13 10 8 5 3 0 27 1 27 7 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 531;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,491,ls),
(355,481,o),
(378,488,o),
(367,507,qs),
(251,729,ls),
(247,736,o),
(234,740,o),
(226,740,qs),
(207,740,ls),
(200,740,o),
(186,736,o),
(182,729,qs),
(66,507,ls),
(56,488,o),
(79,481,o),
(86,491,qs),
(217,661,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
16 1 0 73 0 0 0 118 38 1 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 433;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,428,o),
(278,507,o),
(278,556,qs),
(278,605,o),
(246,684,o),
(191,730,o),
(154,730,qs),
(117,730,o),
(61,684,o),
(30,605,o),
(30,556,qs),
(30,507,o),
(61,428,o),
(117,381,o),
(154,381,qs),
(191,381,o)
);
},
{
closed = 1;
nodes = (
(98,0,o),
(102,8,qs),
(521,706,ls),
(529,720,o),
(513,720,qs),
(502,720,ls),
(492,720,o),
(488,712,qs),
(69,14,ls),
(61,0,o),
(77,0,qs),
(88,0,ls)
);
},
{
closed = 1;
nodes = (
(85,470,o),
(85,556,qs),
(85,642,o),
(123,710,o),
(154,710,qs),
(185,710,o),
(223,642,o),
(223,556,qs),
(223,470,o),
(185,401,o),
(154,401,qs),
(123,401,o)
);
},
{
closed = 1;
nodes = (
(528,37,o),
(560,116,o),
(560,165,qs),
(560,214,o),
(528,293,o),
(473,339,o),
(436,339,qs),
(399,339,o),
(343,293,o),
(312,214,o),
(312,165,qs),
(312,116,o),
(343,37,o),
(399,-10,o),
(436,-10,qs),
(473,-10,o)
);
},
{
closed = 1;
nodes = (
(367,79,o),
(367,165,qs),
(367,251,o),
(405,319,o),
(436,319,qs),
(467,319,o),
(505,251,o),
(505,165,qs),
(505,79,o),
(467,10,o),
(436,10,qs),
(405,10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
12 1 4 10 1 0 7 4 0 105 0 7 0 9 8 7 9 105 0 3 3 14 77 0 5 5 1 97 0 1 1 20 77 11 1 2 2 15 77 14 1 8 8 6 97 13 1 6 6 21 6 78 57 56 41 40 29 28 17 16 1 0 63 61 56 67 57 67 49 47 40 55 41 55 35 33 28 39 29 39 23 20 16 27 17 26 9 7 0 15 1 15 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,428,o),
(278,507,o),
(278,556,qs),
(278,605,o),
(246,684,o),
(191,730,o),
(154,730,qs),
(117,730,o),
(61,684,o),
(30,605,o),
(30,556,qs),
(30,507,o),
(61,428,o),
(117,381,o),
(154,381,qs),
(191,381,o)
);
},
{
closed = 1;
nodes = (
(98,0,o),
(102,8,qs),
(521,706,ls),
(529,720,o),
(513,720,qs),
(502,720,ls),
(492,720,o),
(488,712,qs),
(69,14,ls),
(61,0,o),
(77,0,qs),
(88,0,ls)
);
},
{
closed = 1;
nodes = (
(85,470,o),
(85,556,qs),
(85,642,o),
(123,710,o),
(154,710,qs),
(185,710,o),
(223,642,o),
(223,556,qs),
(223,470,o),
(185,401,o),
(154,401,qs),
(123,401,o)
);
},
{
closed = 1;
nodes = (
(513,25,o),
(528,54,q),
(542,25,o),
(588,-10,o),
(620,-10,qs),
(657,-10,o),
(712,37,o),
(744,116,o),
(744,165,qs),
(744,214,o),
(712,293,o),
(657,339,o),
(620,339,qs),
(588,339,o),
(542,305,o),
(528,275,q),
(513,305,o),
(467,339,o),
(436,339,qs),
(399,339,o),
(343,293,o),
(312,214,o),
(312,165,qs),
(312,116,o),
(343,37,o),
(399,-10,o),
(436,-10,qs),
(467,-10,o)
);
},
{
closed = 1;
nodes = (
(367,79,o),
(367,165,qs),
(367,251,o),
(405,319,o),
(436,319,qs),
(467,319,o),
(505,251,o),
(505,165,qs),
(505,79,o),
(467,10,o),
(436,10,qs),
(405,10,o)
);
},
{
closed = 1;
nodes = (
(550,79,o),
(550,165,qs),
(550,251,o),
(589,319,o),
(620,319,qs),
(651,319,o),
(689,251,o),
(689,165,qs),
(689,79,o),
(651,10,o),
(620,10,qs),
(589,10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 119 values pushed */
65 51 2 10 11 1 76 16 1 4 14 1 0 7 4 0 105 8 1 7 13 1 11 10 7 11 105 0 3 3 14 77 0 5 5 1 97 0 1 1 20 77 15 1 2 2 15 77 19 12 18 3 10 10 6 97 9 17 2 6 6 21 6 78 81 80 69 68 41 40 29 28 17 16 1 0 87 85 80 91 81 91 75 73 68 79 69 79 63 61 55 53 49 47 40 67 41 67 35 33 28 39 29 39 23 20 16 27 17 26 9 7 0 15 1 15 20 7 22
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (205,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,634,o),
(159,656,qs),
(159,678,o),
(131,706,o),
(110,706,qs),
(89,706,o),
(60,678,o),
(60,656,qs),
(60,634,o),
(89,605,o),
(110,605,qs),
(131,605,o)
);
},
{
closed = 1;
nodes = (
(349,634,o),
(349,656,qs),
(349,678,o),
(321,706,o),
(300,706,qs),
(279,706,o),
(250,678,o),
(250,656,qs),
(250,634,o),
(279,605,o),
(300,605,qs),
(321,605,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (110,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,635,o),
(159,658,qs),
(159,681,o),
(131,710,o),
(110,710,qs),
(89,710,o),
(60,681,o),
(60,658,qs),
(60,635,o),
(89,605,o),
(110,605,qs),
(131,605,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (178,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,590,qs),
(299,601,o),
(283,612,qs),
(139,724,ls),
(129,732,o),
(111,740,o),
(98,740,qs),
(80,740,o),
(60,719,o),
(60,707,qs),
(60,694,o),
(73,675,o),
(91,667,qs),
(269,586,ls),
(286,579,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 8 values pushed */
0 0 0 118 38 1 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (177,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,675,o),
(294,694,o),
(294,707,qs),
(294,719,o),
(274,740,o),
(256,740,qs),
(243,740,o),
(225,732,o),
(215,724,qs),
(71,612,ls),
(55,601,o),
(62,590,qs),
(68,579,o),
(85,586,qs),
(263,667,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 8 values pushed */
0 0 0 118 39 1 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (181,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,686,o),
(204,709,qs),
(204,722,o),
(185,740,o),
(168,740,qs),
(152,740,o),
(131,723,o),
(121,704,qs),
(69,609,ls),
(61,592,o),
(70,586,qs),
(79,580,o),
(92,590,qs),
(176,662,ls)
);
},
{
closed = 1;
nodes = (
(354,686,o),
(354,709,qs),
(354,722,o),
(335,740,o),
(318,740,qs),
(302,740,o),
(281,723,o),
(271,704,qs),
(219,609,ls),
(211,592,o),
(220,586,qs),
(229,580,o),
(242,590,qs),
(326,662,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
1 1 0 0 118 44 39 2 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,690,o),
(121,720,o),
(102,720,qs),
(86,720,o),
(65,695,o),
(64,669,qs),
(60,507,ls),
(60,491,o),
(72,491,qs),
(86,491,o),
(89,503,qs),
(129,665,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 1 0 134 0 1 1 14 1 78 36 33 2 7 24
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (217,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,587,ls),
(364,578,o),
(370,588,q),
(377,596,o),
(367,607,qs),
(251,729,ls),
(240,740,o),
(226,740,qs),
(207,740,ls),
(193,740,o),
(182,729,qs),
(66,607,ls),
(56,596,o),
(63,588,qs),
(71,578,o),
(83,586,qs),
(216,677,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 12 values pushed */
16 1 0 73 0 0 0 118 54 1 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (217,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,583,o),
(251,594,qs),
(367,716,ls),
(377,727,o),
(370,735,q),
(364,745,o),
(350,736,qs),
(216,646,l),
(83,737,ls),
(71,745,o),
(63,735,qs),
(56,727,o),
(66,716,qs),
(182,594,ls),
(193,583,o),
(207,583,qs),
(226,583,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
8 1 0 74 1 1 0 0 118 1 0 0 16 1 15 2 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (204,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,650,o),
(347,712,qs),
(350,730,o),
(337,730,qs),
(326,730,o),
(323,718,qs),
(312,675,o),
(248,636,o),
(204,636,qs),
(160,636,o),
(96,675,o),
(85,718,qs),
(82,730,o),
(71,730,qs),
(58,730,o),
(61,712,qs),
(72,650,o),
(151,579,o),
(204,579,qs),
(257,579,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 97 4 1 0 2 0 81 1 0 16 14 11 9 6 4 0 19 1 19 5 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (168,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,624,o),
(275,669,qs),
(275,713,o),
(214,776,o),
(168,776,qs),
(122,776,o),
(60,713,o),
(60,669,qs),
(60,624,o),
(122,561,o),
(168,561,qs),
(214,561,o)
);
},
{
closed = 1;
nodes = (
(90,635,o),
(90,669,qs),
(90,702,o),
(134,749,o),
(168,749,qs),
(202,749,o),
(245,702,o),
(245,669,qs),
(245,635,o),
(202,588,o),
(168,588,qs),
(134,588,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (226,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,650,o),
(389,701,qs),
(392,716,o),
(379,716,qs),
(370,716,o),
(365,704,qs),
(356,678,o),
(328,653,o),
(303,653,qs),
(284,653,o),
(253,673,o),
(223,698,o),
(188,718,o),
(163,718,qs),
(126,718,o),
(73,665,o),
(63,614,qs),
(60,599,o),
(73,599,qs),
(83,599,o),
(87,611,qs),
(96,637,o),
(124,662,o),
(149,662,qs),
(170,662,o),
(200,642,o),
(228,617,o),
(263,597,o),
(289,597,qs),
(327,597,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
5 1 3 0 1 4 3 1 105 0 4 0 0 4 89 0 4 4 0 97 2 6 2 0 4 0 81 1 0 26 24 21 19 16 14 11 9 6 4 0 29 1 29 7 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (206,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,636,o),
(351,648,qs),
(351,663,ls),
(351,675,o),
(339,675,qs),
(72,675,ls),
(60,675,o),
(60,663,qs),
(60,648,ls),
(60,636,o),
(72,636,qs),
(339,636,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 7 4 0 11 1 10 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (115,510);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,603,o),
(162,623,qs),
(162,641,o),
(147,660,o),
(127,673,o),
(112,691,o),
(112,707,qs),
(112,727,o),
(134,764,o),
(163,793,qs),
(175,805,o),
(166,812,qs),
(158,818,o),
(146,808,qs),
(101,771,o),
(60,697,o),
(60,648,qs),
(60,617,o),
(89,576,o),
(114,576,qs),
(135,576,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 118 1 0 0 20 1 20 2 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
layers = (
{
anchors = (
{
name = _bottom;
pos = (114,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,-94,o),
(67,-114,qs),
(67,-132,o),
(82,-151,o),
(102,-164,o),
(117,-182,o),
(117,-198,qs),
(117,-217,o),
(95,-255,o),
(66,-284,qs),
(54,-296,o),
(63,-303,qs),
(71,-309,o),
(83,-299,qs),
(128,-261,o),
(169,-188,o),
(169,-139,qs),
(169,-108,o),
(140,-67,o),
(115,-67,qs),
(94,-67,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 118 1 0 0 20 1 20 2 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (154,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,-71,l),
(131,-82,o),
(140,-84,qs),
(167,-87,o),
(195,-116,o),
(195,-138,qs),
(195,-162,o),
(173,-195,o),
(149,-195,qs),
(130,-195,o),
(115,-176,o),
(108,-150,o),
(98,-131,o),
(83,-131,qs),
(72,-131,o),
(60,-145,o),
(60,-156,qs),
(60,-179,o),
(108,-215,o),
(147,-215,qs),
(185,-215,o),
(241,-172,o),
(241,-133,qs),
(241,-104,o),
(204,-56,o),
(164,-49,q),
(159,-49,o),
(160,-43,qs),
(170,12,l),
(147,12,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
1 1 1 3 1 76 4 1 3 1 3 133 0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 0 0 0 29 0 29 35 36 40 5 7 25
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (194,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,-199,o),
(202,-183,qs),
(213,-171,o),
(207,-162,qs),
(198,-151,o),
(187,-165,qs),
(169,-186,o),
(145,-186,qs),
(128,-186,o),
(106,-162,o),
(106,-133,qs),
(106,-95,o),
(150,-25,o),
(194,0,q),
(184,10,l),
(149,-4,o),
(93,-55,o),
(60,-115,o),
(60,-143,qs),
(60,-180,o),
(106,-216,o),
(134,-216,qs),
(156,-216,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
8 7 2 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 15 13 0 22 1 22 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0308;
}
);
width = 409;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0307;
}
);
width = 219;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = gravecomb;
}
);
width = 354;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = acutecomb;
}
);
width = 354;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni030B;
}
);
width = 414;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0302;
}
);
width = 433;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni030C;
}
);
width = 433;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0306;
}
);
width = 408;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni030A;
}
);
width = 335;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = tildecomb;
}
);
width = 452;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0304;
}
);
width = 411;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0327;
}
);
width = 301;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0328;
}
);
width = 269;
}
);
note = ogonek;
unicode = 731;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "InstrumentSerif-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Instrument Serif Regular";
}
);
}
);
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = -24;
"@MMK_R_B" = -10;
"@MMK_R_C" = -34;
"@MMK_R_N" = -10;
"@MMK_R_S" = -12;
"@MMK_R_T" = -42;
"@MMK_R_U" = -36;
"@MMK_R_W" = -68;
"@MMK_R_Y" = -68;
"@MMK_R_c" = -12;
"@MMK_R_hyphen" = -18;
"@MMK_R_quotedbl" = -80;
"@MMK_R_quotedblright" = -90;
"@MMK_R_t" = -14;
"@MMK_R_u" = -8;
"@MMK_R_w" = -44;
"@MMK_R_y" = -50;
};
"@MMK_L_AE" = {
"@MMK_R_W" = -6;
"@MMK_R_Y" = -12;
"@MMK_R_g" = -8;
"@MMK_R_w" = -24;
"@MMK_R_y" = -24;
"@MMK_R_z" = -8;
};
"@MMK_L_C" = {
"@MMK_R_A" = -12;
"@MMK_R_C" = -12;
"@MMK_R_Y" = -12;
"@MMK_R_quotedblright" = 20;
"@MMK_R_u" = -12;
"@MMK_R_w" = -20;
"@MMK_R_y" = -24;
"@MMK_R_z" = -8;
};
"@MMK_L_D" = {
"@MMK_R_A" = -24;
"@MMK_R_B" = -10;
"@MMK_R_N" = -8;
"@MMK_R_T" = -12;
"@MMK_R_U" = -8;
"@MMK_R_W" = -12;
"@MMK_R_Y" = -24;
"@MMK_R_Z" = -6;
"@MMK_R_g" = -6;
"@MMK_R_period" = -32;
"@MMK_R_quotedbl" = -30;
"@MMK_R_quotedblright" = -20;
"@MMK_R_u" = -8;
"@MMK_R_w" = -8;
"@MMK_R_y" = -8;
"@MMK_R_z" = -10;
};
"@MMK_L_G" = {
"@MMK_R_B" = -14;
"@MMK_R_U" = -14;
"@MMK_R_Y" = -12;
"@MMK_R_period" = -20;
"@MMK_R_quotedblright" = -20;
};
"@MMK_L_H" = {
"@MMK_R_A" = -16;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -12;
"@MMK_R_c" = -18;
"@MMK_R_g" = -12;
"@MMK_R_i" = -12;
"@MMK_R_j" = -12;
"@MMK_R_s" = -12;
"@MMK_R_u" = -12;
"@MMK_R_w" = -18;
"@MMK_R_y" = -18;
};
"@MMK_L_IJ" = {
"@MMK_R_A" = -18;
"@MMK_R_C" = -18;
"@MMK_R_S" = -12;
"@MMK_R_U" = -8;
"@MMK_R_Y" = -38;
"@MMK_R_a" = -18;
"@MMK_R_c" = -20;
"@MMK_R_colon" = -14;
"@MMK_R_g" = -16;
"@MMK_R_i" = -12;
"@MMK_R_m" = -18;
"@MMK_R_s" = -18;
"@MMK_R_u" = -18;
"@MMK_R_w" = -24;
"@MMK_R_y" = -24;
"@MMK_R_z" = -24;
};
"@MMK_L_K" = {
"@MMK_R_A" = -30;
"@MMK_R_B" = -12;
"@MMK_R_C" = -46;
"@MMK_R_N" = -14;
"@MMK_R_S" = -18;
"@MMK_R_T" = -18;
"@MMK_R_U" = -32;
"@MMK_R_W" = -32;
"@MMK_R_Y" = -40;
"@MMK_R_c" = -18;
"@MMK_R_g" = -12;
"@MMK_R_hyphen" = -62;
"@MMK_R_i" = -28;
"@MMK_R_j" = -24;
"@MMK_R_m" = -24;
"@MMK_R_s" = -18;
"@MMK_R_t" = -24;
"@MMK_R_u" = -24;
"@MMK_R_w" = -48;
"@MMK_R_y" = -48;
};
"@MMK_L_L" = {
"@MMK_R_C" = -14;
"@MMK_R_T" = -54;
"@MMK_R_U" = -14;
"@MMK_R_W" = -48;
"@MMK_R_Y" = -64;
"@MMK_R_quotedbl" = -40;
"@MMK_R_quotedblright" = -68;
"@MMK_R_w" = -32;
"@MMK_R_y" = -32;
};
"@MMK_L_N" = {
"@MMK_R_A" = -20;
"@MMK_R_C" = -12;
"@MMK_R_U" = -8;
"@MMK_R_W" = -12;
"@MMK_R_Y" = -22;
"@MMK_R_a" = -18;
"@MMK_R_c" = -18;
"@MMK_R_g" = -14;
"@MMK_R_hyphen" = -12;
"@MMK_R_i" = -12;
"@MMK_R_j" = -12;
"@MMK_R_m" = -12;
"@MMK_R_s" = -18;
"@MMK_R_u" = -16;
"@MMK_R_w" = -20;
"@MMK_R_y" = -20;
"@MMK_R_z" = -18;
};
"@MMK_L_R" = {
"@MMK_R_A" = -50;
"@MMK_R_B" = -12;
"@MMK_R_C" = -24;
"@MMK_R_T" = -20;
"@MMK_R_U" = -20;
"@MMK_R_W" = -24;
"@MMK_R_Y" = -28;
"@MMK_R_a" = -16;
"@MMK_R_c" = -24;
"@MMK_R_g" = -18;
"@MMK_R_h" = -14;
"@MMK_R_hyphen" = -34;
"@MMK_R_i" = -14;
"@MMK_R_j" = -14;
"@MMK_R_quotedbl" = -30;
"@MMK_R_quotedblright" = -36;
"@MMK_R_t" = -14;
"@MMK_R_u" = -14;
"@MMK_R_w" = -20;
"@MMK_R_y" = -20;
"@MMK_R_z" = -14;
};
"@MMK_L_S" = {
"@MMK_R_B" = -6;
"@MMK_R_T" = -8;
"@MMK_R_U" = -8;
"@MMK_R_W" = -6;
"@MMK_R_Y" = -7;
"@MMK_R_quotedbl" = -10;
"@MMK_R_quotedblright" = -10;
"@MMK_R_u" = -8;
"@MMK_R_w" = -20;
"@MMK_R_y" = -20;
"@MMK_R_z" = -8;
};
"@MMK_L_T" = {
"@MMK_R_A" = -42;
"@MMK_R_C" = -12;
"@MMK_R_a" = -64;
"@MMK_R_c" = -64;
"@MMK_R_f" = -24;
"@MMK_R_g" = -64;
"@MMK_R_hyphen" = -52;
"@MMK_R_m" = -48;
"@MMK_R_period" = -38;
"@MMK_R_quotedbl" = 30;
"@MMK_R_quotedblright" = 32;
"@MMK_R_s" = -44;
"@MMK_R_u" = -36;
"@MMK_R_w" = -24;
"@MMK_R_y" = -24;
"@MMK_R_z" = -32;
};
"@MMK_L_U" = {
"@MMK_R_A" = -36;
"@MMK_R_C" = -12;
"@MMK_R_S" = -10;
"@MMK_R_W" = -10;
"@MMK_R_Y" = -15;
"@MMK_R_a" = -12;
"@MMK_R_c" = -18;
"@MMK_R_g" = -18;
"@MMK_R_i" = -18;
"@MMK_R_j" = -18;
"@MMK_R_m" = -12;
"@MMK_R_s" = -18;
"@MMK_R_u" = -12;
"@MMK_R_w" = -12;
"@MMK_R_y" = -12;
"@MMK_R_z" = -14;
};
"@MMK_L_W" = {
"@MMK_R_A" = -62;
"@MMK_R_B" = -16;
"@MMK_R_C" = -18;
"@MMK_R_N" = -18;
"@MMK_R_S" = -18;
"@MMK_R_U" = -12;
"@MMK_R_Y" = -18;
"@MMK_R_a" = -54;
"@MMK_R_c" = -62;
"@MMK_R_colon" = -18;
"@MMK_R_f" = -24;
"@MMK_R_g" = -62;
"@MMK_R_hyphen" = -28;
"@MMK_R_i" = -24;
"@MMK_R_j" = -24;
"@MMK_R_m" = -48;
"@MMK_R_period" = -54;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 32;
"@MMK_R_s" = -50;
"@MMK_R_t" = -18;
"@MMK_R_u" = -40;
"@MMK_R_w" = -36;
"@MMK_R_y" = -36;
"@MMK_R_z" = -58;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -68;
"@MMK_R_B" = -34;
"@MMK_R_C" = -32;
"@MMK_R_N" = -22;
"@MMK_R_S" = -17;
"@MMK_R_U" = -20;
"@MMK_R_W" = -18;
"@MMK_R_a" = -78;
"@MMK_R_c" = -78;
"@MMK_R_colon" = -28;
"@MMK_R_f" = -38;
"@MMK_R_g" = -72;
"@MMK_R_hyphen" = -48;
"@MMK_R_i" = -24;
"@MMK_R_j" = -24;
"@MMK_R_m" = -68;
"@MMK_R_period" = -56;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 32;
"@MMK_R_s" = -74;
"@MMK_R_t" = -50;
"@MMK_R_u" = -68;
"@MMK_R_w" = -64;
"@MMK_R_y" = -64;
"@MMK_R_z" = -74;
};
"@MMK_L_Z" = {
"@MMK_R_w" = -24;
"@MMK_R_y" = -24;
};
"@MMK_L_a" = {
"@MMK_R_g" = -10;
"@MMK_R_hyphen" = -12;
"@MMK_R_quotedbl" = -40;
"@MMK_R_quotedblright" = -30;
"@MMK_R_t" = -6;
"@MMK_R_w" = -18;
"@MMK_R_y" = -18;
};
"@MMK_L_ae" = {
"@MMK_R_quotedbl" = -40;
};
"@MMK_L_b" = {
"@MMK_R_period" = -28;
"@MMK_R_quotedbl" = -40;
"@MMK_R_quotedblright" = -30;
"@MMK_R_w" = -6;
"@MMK_R_y" = -8;
};
"@MMK_L_d" = {
"@MMK_R_hyphen" = -12;
"@MMK_R_w" = -10;
"@MMK_R_y" = -10;
};
"@MMK_L_dcaron" = {
"@MMK_R_a" = -28;
"@MMK_R_c" = -24;
"@MMK_R_colon" = -24;
"@MMK_R_period" = -24;
"@MMK_R_u" = -24;
};
"@MMK_L_g" = {
"@MMK_R_a" = -10;
"@MMK_R_colon" = 18;
"@MMK_R_j" = 20;
"@MMK_R_quotedbl" = 10;
"@MMK_R_quotedblright" = 36;
"@MMK_R_u" = -12;
"@MMK_R_w" = -16;
"@MMK_R_y" = -8;
};
"@MMK_L_h" = {
"@MMK_R_h" = -6;
"@MMK_R_quotedbl" = -60;
"@MMK_R_quotedblright" = -30;
"@MMK_R_w" = -10;
"@MMK_R_y" = -10;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -18;
"@MMK_R_T" = -52;
"@MMK_R_W" = -28;
"@MMK_R_Y" = -48;
"@MMK_R_f" = -12;
"@MMK_R_w" = -14;
"@MMK_R_y" = -14;
};
"@MMK_L_k" = {
"@MMK_R_a" = -22;
"@MMK_R_c" = -32;
"@MMK_R_g" = -38;
"@MMK_R_h" = -12;
"@MMK_R_hyphen" = -52;
"@MMK_R_i" = -18;
"@MMK_R_j" = -18;
"@MMK_R_m" = -16;
"@MMK_R_quotedbl" = -10;
"@MMK_R_s" = -18;
"@MMK_R_t" = -27;
"@MMK_R_u" = -36;
"@MMK_R_w" = -42;
"@MMK_R_y" = -52;
"@MMK_R_z" = -18;
};
"@MMK_L_l" = {
"@MMK_R_w" = -8;
"@MMK_R_y" = -8;
};
"@MMK_L_period" = {
"@MMK_R_C" = -32;
"@MMK_R_T" = -38;
"@MMK_R_W" = -54;
"@MMK_R_Y" = -56;
"@MMK_R_c" = -28;
"@MMK_R_quotedblright" = -70;
"@MMK_R_w" = -52;
"@MMK_R_y" = -52;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -80;
"@MMK_R_C" = -30;
"@MMK_R_T" = 30;
"@MMK_R_W" = 20;
"@MMK_R_Y" = 20;
"@MMK_R_a" = -20;
"@MMK_R_c" = -40;
"@MMK_R_f" = -20;
"@MMK_R_g" = -60;
"@MMK_R_m" = -20;
"@MMK_R_s" = -40;
"@MMK_R_t" = 10;
"@MMK_R_w" = 20;
"@MMK_R_y" = 20;
};
"@MMK_L_quotedblleft" = {
"@MMK_R_A" = -90;
"@MMK_R_C" = -20;
"@MMK_R_T" = 32;
"@MMK_R_W" = 32;
"@MMK_R_Y" = 32;
"@MMK_R_a" = -30;
"@MMK_R_c" = -30;
"@MMK_R_g" = -40;
"@MMK_R_t" = 24;
"@MMK_R_w" = 20;
"@MMK_R_y" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_A" = -90;
"@MMK_R_C" = -30;
"@MMK_R_T" = 32;
"@MMK_R_W" = 32;
"@MMK_R_Y" = 32;
"@MMK_R_a" = -38;
"@MMK_R_c" = -40;
"@MMK_R_f" = -20;
"@MMK_R_g" = -60;
"@MMK_R_h" = 20;
"@MMK_R_i" = 10;
"@MMK_R_m" = -30;
"@MMK_R_s" = -40;
"@MMK_R_u" = -30;
};
"@MMK_L_r" = {
"@MMK_R_a" = -18;
"@MMK_R_colon" = 24;
"@MMK_R_hyphen" = -28;
"@MMK_R_period" = -36;
"@MMK_R_quotedblright" = 38;
};
"@MMK_L_s" = {
"@MMK_R_quotedbl" = -40;
"@MMK_R_w" = -6;
"@MMK_R_y" = -6;
};
"@MMK_L_t" = {
"@MMK_R_g" = -12;
"@MMK_R_quotedblright" = 24;
"@MMK_R_t" = -18;
"@MMK_R_u" = -8;
"@MMK_R_w" = -20;
"@MMK_R_y" = -20;
"@MMK_R_z" = -8;
};
"@MMK_L_tcaron" = {
"@MMK_R_h" = 50;
"@MMK_R_j" = 20;
"@MMK_R_quotedbl" = 40;
"@MMK_R_quotedblleft" = 30;
};
"@MMK_L_u" = {
"@MMK_R_g" = -6;
"@MMK_R_quotedbl" = -40;
};
"@MMK_L_w" = {
"@MMK_R_a" = -12;
"@MMK_R_c" = -12;
"@MMK_R_g" = -30;
"@MMK_R_h" = -8;
"@MMK_R_hyphen" = -14;
"@MMK_R_m" = -14;
"@MMK_R_period" = -52;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 30;
"@MMK_R_s" = -12;
"@MMK_R_u" = -8;
"@MMK_R_w" = -18;
"@MMK_R_y" = -18;
"@MMK_R_z" = -8;
};
"@MMK_L_y" = {
"@MMK_R_a" = -12;
"@MMK_R_c" = -16;
"@MMK_R_g" = -32;
"@MMK_R_h" = -8;
"@MMK_R_hyphen" = -14;
"@MMK_R_m" = -14;
"@MMK_R_period" = -52;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 30;
"@MMK_R_s" = -12;
"@MMK_R_w" = -18;
"@MMK_R_y" = -18;
"@MMK_R_z" = -14;
};
"@MMK_L_z" = {
"@MMK_R_quotedblright" = 30;
};
A = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
AE = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Aacute = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Abreve = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Acircumflex = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Adieresis = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Agrave = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Amacron = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Aogonek = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Aring = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
Atilde = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
B = {
B = -8;
D = -8;
Dcaron = -8;
Dcroat = -8;
E = -8;
Eacute = -8;
Ecaron = -8;
Ecircumflex = -8;
Edieresis = -8;
Edotaccent = -8;
Egrave = -8;
Emacron = -8;
Eogonek = -8;
Eth = -8;
F = -8;
H = -8;
Hbar = -8;
I = -8;
IJ = -8;
Iacute = -8;
Icircumflex = -8;
Idieresis = -8;
Idotaccent = -8;
Igrave = -8;
Imacron = -8;
Iogonek = -8;
K = -8;
L = -8;
Lacute = -8;
Lcaron = -8;
Lslash = -8;
P = -8;
R = -8;
Racute = -8;
Rcaron = -8;
T = -12;
Tcaron = -12;
Thorn = -8;
U = -12;
Uacute = -12;
Ubreve = -12;
Ucircumflex = -12;
Udieresis = -12;
Ugrave = -12;
Uhungarumlaut = -12;
Umacron = -12;
Uogonek = -12;
Uring = -12;
V = -12;
W = -12;
Wacute = -12;
Wcircumflex = -12;
Wdieresis = -12;
Wgrave = -12;
X = -40;
Y = -28;
Yacute = -28;
Ycircumflex = -28;
Ydieresis = -28;
Ygrave = -28;
at = 8;
c = 8;
c.ss01 = 8;
cacute = 8;
cacute.ss01 = 8;
ccaron = 8;
ccaron.ss01 = 8;
ccedilla = 8;
ccedilla.ss01 = 8;
cdotaccent = 8;
cdotaccent.ss01 = 8;
cent = 8;
d = 8;
d.ss01 = 8;
dcaron = 8;
dcaron.ss01 = 8;
dcroat = 8;
dcroat.ss01 = 8;
e = 8;
e.ss01 = 8;
eacute = 8;
eacute.ss01 = 8;
ecaron = 8;
ecaron.ss01 = 8;
ecircumflex = 8;
ecircumflex.ss01 = 8;
edieresis = 8;
edieresis.ss01 = 8;
edotaccent = 8;
edotaccent.ss01 = 8;
egrave = 8;
egrave.ss01 = 8;
emacron = 8;
emacron.ss01 = 8;
eogonek = 8;
eogonek.ss01 = 8;
eth = 8;
o = 8;
oacute = 8;
ocircumflex = 8;
odieresis = 8;
oe = 8;
ograve = 8;
ohungarumlaut = 8;
omacron = 8;
oslash = 8;
otilde = 8;
q = 8;
quotedbl = -20;
quotedblright = -20;
quoteright = -20;
quotesingle = -20;
uni0136 = -8;
uni013B = -8;
uni0156 = -8;
uni021A = -12;
v = -20;
w = -15;
wacute = -15;
wcircumflex = -15;
wdieresis = -15;
wgrave = -15;
x = -6;
y = -22;
yacute = -22;
ycircumflex = -22;
ydieresis = -22;
yen = -28;
ygrave = -22;
};
C = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
Cacute = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
Ccaron = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
Ccedilla = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
Cdotaccent = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
D = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Dcaron = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Dcroat = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
E = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Eacute = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Ecaron = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Ecircumflex = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Edieresis = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Edotaccent = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Egrave = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Emacron = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Eng = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
Eogonek = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Eth = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Euro = {
X = -22;
parenright = 40;
question = 28;
slash = 20;
v = -24;
};
F = {
A = -38;
Aacute = -38;
Abreve = -38;
Acircumflex = -38;
Adieresis = -38;
Agrave = -38;
Amacron = -38;
Aogonek = -38;
Aring = -38;
Atilde = -38;
C = -6;
Cacute = -6;
Ccaron = -6;
Ccedilla = -6;
Cdotaccent = -6;
G = -6;
Gbreve = -6;
Gdotaccent = -6;
O = -6;
OE = -6;
Oacute = -6;
Ocircumflex = -6;
Odieresis = -6;
Ograve = -6;
Ohungarumlaut = -6;
Omacron = -6;
Oslash = -6;
Otilde = -6;
Q = -6;
V = 6;
W = 6;
Wacute = 6;
Wcircumflex = 6;
Wdieresis = 6;
Wgrave = 6;
X = -28;
Y = -8;
Yacute = -8;
Ycircumflex = -8;
Ydieresis = -8;
Ygrave = -8;
a = -32;
a.ss01 = -32;
aacute = -32;
aacute.ss01 = -32;
abreve = -32;
abreve.ss01 = -32;
acircumflex = -32;
acircumflex.ss01 = -32;
adieresis = -32;
adieresis.ss01 = -32;
ae = -32;
agrave = -32;
agrave.ss01 = -32;
amacron = -32;
amacron.ss01 = -32;
aogonek = -32;
aogonek.ss01 = -32;
aring = -32;
aring.ss01 = -32;
at = -46;
atilde = -32;
atilde.ss01 = -32;
c = -46;
c.ss01 = -46;
cacute = -46;
cacute.ss01 = -46;
ccaron = -46;
ccaron.ss01 = -46;
ccedilla = -46;
ccedilla.ss01 = -46;
cdotaccent = -46;
cdotaccent.ss01 = -46;
cent = -46;
comma = -48;
d = -46;
d.ss01 = -46;
dcaron = -46;
dcaron.ss01 = -46;
dcroat = -46;
dcroat.ss01 = -46;
dotlessi = -12;
e = -46;
e.ss01 = -46;
eacute = -46;
eacute.ss01 = -46;
ecaron = -46;
ecaron.ss01 = -46;
ecircumflex = -46;
ecircumflex.ss01 = -46;
edieresis = -46;
edieresis.ss01 = -46;
edotaccent = -46;
edotaccent.ss01 = -46;
egrave = -46;
egrave.ss01 = -46;
ellipsis = -48;
emacron = -46;
emacron.ss01 = -46;
eng = -32;
eogonek = -46;
eogonek.ss01 = -46;
eth = -46;
g = -54;
g.ss01 = -54;
gbreve = -54;
gbreve.ss01 = -54;
gdotaccent = -54;
gdotaccent.ss01 = -54;
i = -12;
i.loclTRK = -12;
iacute = -12;
icircumflex = -12;
idieresis = -12;
igrave = -12;
ij = -12;
imacron = -12;
iogonek = -12;
j = -12;
m = -32;
n = -32;
nacute = -32;
ncaron = -32;
ntilde = -32;
o = -46;
oacute = -46;
ocircumflex = -46;
odieresis = -46;
oe = -46;
ograve = -46;
ohungarumlaut = -46;
omacron = -46;
oslash = -46;
otilde = -46;
p = -32;
parenright = 20;
period = -48;
q = -46;
question = 20;
quotedbl = 20;
quotedblbase = -48;
quotedblright = 20;
quoteright = 20;
quotesinglbase = -48;
quotesingle = 20;
r = -32;
racute = -32;
rcaron = -32;
s = -36;
sacute = -36;
scaron = -36;
scedilla = -36;
uni0122 = -6;
uni0123 = -54;
uni0123.ss01 = -54;
uni0146 = -32;
uni0157 = -32;
uni01CD = -38;
uni01CE = -32;
uni01CE.ss01 = -32;
uni0219 = -36;
uni0237 = -12;
v = -24;
w = -24;
wacute = -24;
wcircumflex = -24;
wdieresis = -24;
wgrave = -24;
x = -24;
y = -24;
yacute = -24;
ycircumflex = -24;
ydieresis = -24;
yen = -8;
ygrave = -24;
z = -30;
zacute = -30;
zcaron = -30;
zdotaccent = -30;
};
G = {
X = -38;
parenright = 20;
};
Gbreve = {
X = -38;
parenright = 20;
};
Gdotaccent = {
X = -38;
parenright = 20;
};
H = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Hbar = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
I = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
IJ = {
X = -38;
v = -24;
x = -24;
};
Iacute = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Icircumflex = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Idieresis = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Idotaccent = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Igrave = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Imacron = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
Iogonek = {
X = -28;
parenright = 20;
slash = 20;
v = -18;
};
J = {
X = -38;
v = -24;
x = -24;
};
K = {
M = -12;
V = -40;
X = -30;
parenright = 20;
v = -48;
x = -36;
};
L = {
V = -48;
X = -38;
slash = 20;
v = -32;
};
Lacute = {
V = -48;
X = -38;
slash = 20;
v = -32;
};
Lcaron = {
V = -48;
X = -38;
slash = 20;
v = -32;
};
Lslash = {
V = -48;
X = -38;
slash = 20;
v = -32;
};
M = {
B = -8;
C = -12;
Cacute = -12;
Ccaron = -12;
Ccedilla = -12;
Cdotaccent = -12;
D = -8;
Dcaron = -8;
Dcroat = -8;
E = -8;
Eacute = -8;
Ecaron = -8;
Ecircumflex = -8;
Edieresis = -8;
Edotaccent = -8;
Egrave = -8;
Emacron = -8;
Eogonek = -8;
Eth = -8;
F = -8;
G = -12;
Gbreve = -12;
Gdotaccent = -12;
H = -8;
Hbar = -8;
I = -8;
IJ = -8;
Iacute = -8;
Icircumflex = -8;
Idieresis = -8;
Idotaccent = -8;
Igrave = -8;
Imacron = -8;
Iogonek = -8;
K = -8;
L = -8;
Lacute = -8;
Lcaron = -8;
Lslash = -8;
O = -12;
OE = -12;
Oacute = -12;
Ocircumflex = -12;
Odieresis = -12;
Ograve = -12;
Ohungarumlaut = -12;
Omacron = -12;
Oslash = -12;
Otilde = -12;
P = -8;
Q = -12;
R = -8;
Racute = -8;
Rcaron = -8;
T = -12;
Tcaron = -12;
Thorn = -8;
U = -10;
Uacute = -10;
Ubreve = -10;
Ucircumflex = -10;
Udieresis = -10;
Ugrave = -10;
Uhungarumlaut = -10;
Umacron = -10;
Uogonek = -10;
Uring = -10;
V = -18;
W = -18;
Wacute = -18;
Wcircumflex = -18;
Wdieresis = -18;
Wgrave = -18;
X = -33;
Y = -28;
Yacute = -28;
Ycircumflex = -28;
Ydieresis = -28;
Ygrave = -28;
at = -10;
c = -10;
c.ss01 = -10;
cacute = -10;
cacute.ss01 = -10;
ccaron = -10;
ccaron.ss01 = -10;
ccedilla = -10;
ccedilla.ss01 = -10;
cdotaccent = -10;
cdotaccent.ss01 = -10;
cent = -10;
d = -10;
d.ss01 = -10;
dcaron = -10;
dcaron.ss01 = -10;
dcroat = -10;
dcroat.ss01 = -10;
dotlessi = -10;
e = -10;
e.ss01 = -10;
eacute = -10;
eacute.ss01 = -10;
ecaron = -10;
ecaron.ss01 = -10;
ecircumflex = -10;
ecircumflex.ss01 = -10;
edieresis = -10;
edieresis.ss01 = -10;
edotaccent = -10;
edotaccent.ss01 = -10;
egrave = -10;
egrave.ss01 = -10;
emacron = -10;
emacron.ss01 = -10;
emdash = -12;
endash = -12;
eogonek = -10;
eogonek.ss01 = -10;
eth = -10;
hyphen = -12;
i = -10;
i.loclTRK = -10;
iacute = -10;
icircumflex = -10;
idieresis = -10;
igrave = -10;
ij = -10;
imacron = -10;
iogonek = -10;
j = -10;
o = -10;
oacute = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
parenright = 20;
q = -10;
slash = 20;
u = -16;
uacute = -16;
ubreve = -16;
ucircumflex = -16;
udieresis = -16;
ugrave = -16;
uhungarumlaut = -16;
umacron = -16;
uni0122 = -12;
uni0136 = -8;
uni013B = -8;
uni0156 = -8;
uni021A = -12;
uni0237 = -10;
uogonek = -16;
uring = -16;
v = -24;
w = -24;
wacute = -24;
wcircumflex = -24;
wdieresis = -24;
wgrave = -24;
x = -16;
y = -24;
yacute = -24;
ycircumflex = -24;
ydieresis = -24;
yen = -28;
ygrave = -24;
};
N = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
Nacute = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
Ncaron = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
Ntilde = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
O = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
OE = {
V = -6;
X = -37;
parenright = 20;
question = 14;
slash = 10;
v = -24;
};
Oacute = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Ocircumflex = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Odieresis = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Ograve = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Ohungarumlaut = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Omacron = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Oslash = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
Otilde = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
P = {
A = -40;
Aacute = -40;
Abreve = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
T = 21;
Tcaron = 21;
X = -42;
a = -14;
a.ss01 = -14;
aacute = -14;
aacute.ss01 = -14;
abreve = -14;
abreve.ss01 = -14;
acircumflex = -14;
acircumflex.ss01 = -14;
adieresis = -14;
adieresis.ss01 = -14;
ae = -14;
agrave = -14;
agrave.ss01 = -14;
amacron = -14;
amacron.ss01 = -14;
aogonek = -14;
aogonek.ss01 = -14;
aring = -14;
aring.ss01 = -14;
at = -18;
atilde = -14;
atilde.ss01 = -14;
c = -18;
c.ss01 = -18;
cacute = -18;
cacute.ss01 = -18;
ccaron = -18;
ccaron.ss01 = -18;
ccedilla = -18;
ccedilla.ss01 = -18;
cdotaccent = -18;
cdotaccent.ss01 = -18;
cent = -18;
comma = -54;
d = -18;
d.ss01 = -18;
dcaron = -18;
dcaron.ss01 = -18;
dcroat = -18;
dcroat.ss01 = -18;
e = -18;
e.ss01 = -18;
eacute = -18;
eacute.ss01 = -18;
ecaron = -18;
ecaron.ss01 = -18;
ecircumflex = -18;
ecircumflex.ss01 = -18;
edieresis = -18;
edieresis.ss01 = -18;
edotaccent = -18;
edotaccent.ss01 = -18;
egrave = -18;
egrave.ss01 = -18;
ellipsis = -54;
emacron = -18;
emacron.ss01 = -18;
emdash = -24;
endash = -24;
eogonek = -18;
eogonek.ss01 = -18;
eth = -18;
g = -20;
g.ss01 = -20;
gbreve = -20;
gbreve.ss01 = -20;
gdotaccent = -20;
gdotaccent.ss01 = -20;
hyphen = -24;
o = -18;
oacute = -18;
ocircumflex = -18;
odieresis = -18;
oe = -18;
ograve = -18;
ohungarumlaut = -18;
omacron = -18;
oslash = -18;
otilde = -18;
parenright = 20;
period = -54;
q = -18;
quotedbl = 10;
quotedblbase = -54;
quotedblright = 18;
quoteright = 18;
quotesinglbase = -54;
quotesingle = 10;
s = -14;
sacute = -14;
scaron = -14;
scedilla = -14;
uni0123 = -20;
uni0123.ss01 = -20;
uni01CD = -40;
uni01CE = -14;
uni01CE.ss01 = -14;
uni0219 = -14;
uni021A = 21;
z = -14;
zacute = -14;
zcaron = -14;
zdotaccent = -14;
};
Q = {
V = -12;
X = -50;
question = 10;
slash = 20;
v = -8;
x = -8;
};
R = {
V = -20;
X = -56;
slash = 20;
v = -20;
x = -20;
};
Racute = {
V = -20;
X = -56;
slash = 20;
v = -20;
x = -20;
};
Rcaron = {
V = -20;
X = -56;
slash = 20;
v = -20;
x = -20;
};
S = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
Sacute = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
Scaron = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
Scedilla = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
T = {
M = -12;
X = -28;
braceright = 20;
bracketright = 20;
exclam = 10;
parenright = 20;
question = 30;
v = -24;
x = -28;
};
Tcaron = {
M = -12;
X = -28;
braceright = 20;
bracketright = 20;
exclam = 10;
parenright = 20;
question = 30;
v = -24;
x = -28;
};
U = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Uacute = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Ubreve = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Ucircumflex = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Udieresis = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Ugrave = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Uhungarumlaut = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Umacron = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Uogonek = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
Uring = {
V = -10;
X = -28;
parenright = 20;
v = -12;
x = -24;
};
V = {
A = -68;
Aacute = -68;
Abreve = -68;
Acircumflex = -68;
Adieresis = -68;
Agrave = -68;
Amacron = -68;
Aogonek = -68;
Aring = -68;
Atilde = -68;
B = -16;
C = -18;
Cacute = -18;
Ccaron = -18;
Ccedilla = -18;
Cdotaccent = -18;
D = -16;
Dcaron = -16;
Dcroat = -16;
E = -16;
Eacute = -16;
Ecaron = -16;
Ecircumflex = -16;
Edieresis = -16;
Edotaccent = -16;
Egrave = -16;
Emacron = -16;
Eng = -18;
Eogonek = -16;
Eth = -16;
F = -16;
G = -18;
Gbreve = -18;
Gdotaccent = -18;
H = -16;
Hbar = -16;
I = -16;
IJ = -16;
Iacute = -16;
Icircumflex = -16;
Idieresis = -16;
Idotaccent = -16;
Igrave = -16;
Imacron = -16;
Iogonek = -16;
K = -16;
L = -16;
Lacute = -16;
Lcaron = -16;
Lslash = -16;
M = -16;
N = -18;
Nacute = -18;
Ncaron = -18;
Ntilde = -18;
O = -18;
OE = -18;
Oacute = -18;
Ocircumflex = -18;
Odieresis = -18;
Ograve = -18;
Ohungarumlaut = -18;
Omacron = -18;
Oslash = -18;
Otilde = -18;
P = -16;
Q = -18;
R = -16;
Racute = -16;
Rcaron = -16;
S = -19;
Sacute = -19;
Scaron = -19;
Scedilla = -19;
Thorn = -16;
U = -12;
Uacute = -12;
Ubreve = -12;
Ucircumflex = -12;
Udieresis = -12;
Ugrave = -12;
Uhungarumlaut = -12;
Umacron = -12;
Uogonek = -12;
Uring = -12;
V = -24;
W = -24;
Wacute = -24;
Wcircumflex = -24;
Wdieresis = -24;
Wgrave = -24;
X = -52;
Y = -24;
Yacute = -24;
Ycircumflex = -24;
Ydieresis = -24;
Ygrave = -24;
a = -54;
a.ss01 = -54;
aacute = -54;
aacute.ss01 = -54;
abreve = -54;
abreve.ss01 = -54;
acircumflex = -54;
acircumflex.ss01 = -54;
adieresis = -54;
adieresis.ss01 = -54;
ae = -54;
agrave = -54;
agrave.ss01 = -54;
amacron = -54;
amacron.ss01 = -54;
aogonek = -54;
aogonek.ss01 = -54;
aring = -54;
aring.ss01 = -54;
at = -62;
atilde = -54;
atilde.ss01 = -54;
c = -62;
c.ss01 = -62;
cacute = -62;
cacute.ss01 = -62;
ccaron = -62;
ccaron.ss01 = -62;
ccedilla = -62;
ccedilla.ss01 = -62;
cdotaccent = -62;
cdotaccent.ss01 = -62;
cent = -62;
colon = -18;
comma = -54;
d = -62;
d.ss01 = -62;
dcaron = -62;
dcaron.ss01 = -62;
dcroat = -62;
dcroat.ss01 = -62;
dollar = -19;
dotlessi = -24;
e = -62;
e.ss01 = -62;
eacute = -62;
eacute.ss01 = -62;
ecaron = -62;
ecaron.ss01 = -62;
ecircumflex = -62;
ecircumflex.ss01 = -62;
edieresis = -62;
edieresis.ss01 = -62;
edotaccent = -62;
edotaccent.ss01 = -62;
egrave = -62;
egrave.ss01 = -62;
ellipsis = -54;
emacron = -62;
emacron.ss01 = -62;
emdash = -28;
endash = -28;
eng = -48;
eogonek = -62;
eogonek.ss01 = -62;
eth = -62;
exclam = 12;
f = -24;
f_b = -24;
f_h = -24;
f_i = -24;
f_l = -24;
g = -62;
g.ss01 = -62;
gbreve = -62;
gbreve.ss01 = -62;
gdotaccent = -62;
gdotaccent.ss01 = -62;
germandbls = -24;
hyphen = -28;
i = -24;
i.loclTRK = -24;
iacute = -24;
icircumflex = -24;
idieresis = -24;
igrave = -24;
ij = -24;
imacron = -24;
iogonek = -24;
j = -24;
m = -48;
n = -48;
nacute = -48;
ncaron = -48;
ntilde = -48;
o = -62;
oacute = -62;
ocircumflex = -62;
odieresis = -62;
oe = -62;
ograve = -62;
ohungarumlaut = -62;
omacron = -62;
oslash = -62;
otilde = -62;
p = -48;
parenright = 20;
period = -54;
q = -62;
question = 20;
quotedbl = 20;
quotedblbase = -54;
quotedblright = 32;
quoteright = 32;
quotesinglbase = -54;
quotesingle = 20;
r = -48;
racute = -48;
rcaron = -48;
s = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
semicolon = -18;
t = -18;
tcaron = -18;
u = -40;
uacute = -40;
ubreve = -40;
ucircumflex = -40;
udieresis = -40;
ugrave = -40;
uhungarumlaut = -40;
umacron = -40;
uni0122 = -18;
uni0123 = -62;
uni0123.ss01 = -62;
uni0136 = -16;
uni013B = -16;
uni0145 = -18;
uni0146 = -48;
uni0156 = -16;
uni0157 = -48;
uni01CD = -68;
uni01CE = -54;
uni01CE.ss01 = -54;
uni0218 = -19;
uni0219 = -50;
uni021B = -18;
uni0237 = -24;
uogonek = -40;
uring = -40;
v = -36;
w = -36;
wacute = -36;
wcircumflex = -36;
wdieresis = -36;
wgrave = -36;
x = -48;
y = -36;
yacute = -36;
ycircumflex = -36;
ydieresis = -36;
yen = -24;
ygrave = -36;
z = -58;
zacute = -58;
zcaron = -58;
zdotaccent = -58;
};
W = {
M = -16;
V = -24;
X = -42;
exclam = 12;
parenright = 20;
question = 20;
v = -36;
x = -48;
};
Wacute = {
M = -16;
V = -24;
X = -42;
exclam = 12;
parenright = 20;
question = 20;
v = -36;
x = -48;
};
Wcircumflex = {
M = -16;
V = -24;
X = -42;
exclam = 12;
parenright = 20;
question = 20;
v = -36;
x = -48;
};
Wdieresis = {
M = -16;
V = -24;
X = -42;
exclam = 12;
parenright = 20;
question = 20;
v = -36;
x = -48;
};
Wgrave = {
M = -16;
V = -24;
X = -42;
exclam = 12;
parenright = 20;
question = 20;
v = -36;
x = -48;
};
X = {
A = -80;
Aacute = -80;
Abreve = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Amacron = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
B = -38;
C = -64;
Cacute = -64;
Ccaron = -64;
Ccedilla = -64;
Cdotaccent = -64;
D = -38;
Dcaron = -38;
Dcroat = -38;
E = -38;
Eacute = -38;
Ecaron = -38;
Ecircumflex = -38;
Edieresis = -38;
Edotaccent = -38;
Egrave = -38;
Emacron = -38;
Eng = -38;
Eogonek = -38;
Eth = -38;
F = -38;
G = -64;
Gbreve = -64;
Gdotaccent = -64;
H = -38;
Hbar = -38;
I = -38;
IJ = -38;
Iacute = -38;
Icircumflex = -38;
Idieresis = -38;
Idotaccent = -38;
Igrave = -38;
Imacron = -38;
Iogonek = -38;
J = -30;
K = -38;
L = -38;
Lacute = -38;
Lcaron = -38;
Lslash = -38;
M = -33;
N = -38;
Nacute = -38;
Ncaron = -38;
Ntilde = -38;
O = -64;
OE = -64;
Oacute = -64;
Ocircumflex = -64;
Odieresis = -64;
Ograve = -64;
Ohungarumlaut = -64;
Omacron = -64;
Oslash = -64;
Otilde = -64;
P = -38;
Q = -64;
R = -38;
Racute = -38;
Rcaron = -38;
S = -43;
Sacute = -43;
Scaron = -43;
Scedilla = -43;
T = -36;
Tcaron = -36;
Thorn = -38;
U = -34;
Uacute = -34;
Ubreve = -34;
Ucircumflex = -34;
Udieresis = -34;
Ugrave = -34;
Uhungarumlaut = -34;
Umacron = -34;
Uogonek = -34;
Uring = -34;
V = -48;
W = -46;
Wacute = -46;
Wcircumflex = -46;
Wdieresis = -46;
Wgrave = -46;
X = -80;
Y = -50;
Yacute = -50;
Ycircumflex = -50;
Ydieresis = -50;
Ygrave = -50;
Z = -26;
Zacute = -26;
Zcaron = -26;
Zdotaccent = -26;
a = -42;
a.ss01 = -42;
aacute = -42;
aacute.ss01 = -42;
abreve = -42;
abreve.ss01 = -42;
acircumflex = -42;
acircumflex.ss01 = -42;
adieresis = -42;
adieresis.ss01 = -42;
ae = -42;
agrave = -42;
agrave.ss01 = -42;
amacron = -42;
amacron.ss01 = -42;
aogonek = -42;
aogonek.ss01 = -42;
aring = -42;
aring.ss01 = -42;
at = -54;
atilde = -42;
atilde.ss01 = -42;
b = -24;
c = -54;
c.ss01 = -54;
cacute = -54;
cacute.ss01 = -54;
ccaron = -54;
ccaron.ss01 = -54;
ccedilla = -54;
ccedilla.ss01 = -54;
cdotaccent = -54;
cdotaccent.ss01 = -54;
cent = -54;
d = -54;
d.ss01 = -54;
dcaron = -54;
dcaron.ss01 = -54;
dcroat = -54;
dcroat.ss01 = -54;
dollar = -43;
dotlessi = -52;
e = -54;
e.ss01 = -54;
eacute = -54;
eacute.ss01 = -54;
ecaron = -54;
ecaron.ss01 = -54;
ecircumflex = -54;
ecircumflex.ss01 = -54;
edieresis = -54;
edieresis.ss01 = -54;
edotaccent = -54;
edotaccent.ss01 = -54;
egrave = -54;
egrave.ss01 = -54;
emacron = -54;
emacron.ss01 = -54;
emdash = -54;
endash = -54;
eng = -36;
eogonek = -54;
eogonek.ss01 = -54;
eth = -54;
f = -52;
f_b = -52;
f_h = -52;
f_i = -52;
f_l = -52;
g = -52;
g.ss01 = -52;
gbreve = -52;
gbreve.ss01 = -52;
gdotaccent = -52;
gdotaccent.ss01 = -52;
germandbls = -52;
h = -28;
hbar = -28;
hyphen = -54;
i = -52;
i.loclTRK = -52;
iacute = -52;
icircumflex = -52;
idieresis = -52;
igrave = -52;
ij = -52;
imacron = -52;
iogonek = -52;
j = -52;
k = -28;
l = -28;
lacute = -28;
lcaron = -28;
lslash = -28;
m = -36;
n = -36;
nacute = -36;
ncaron = -36;
ntilde = -36;
o = -54;
oacute = -54;
ocircumflex = -54;
odieresis = -54;
oe = -54;
ograve = -54;
ohungarumlaut = -54;
omacron = -54;
oslash = -54;
otilde = -54;
p = -36;
parenright = 20;
q = -54;
r = -36;
racute = -36;
rcaron = -36;
s = -36;
sacute = -36;
scaron = -36;
scedilla = -36;
t = -48;
tcaron = -48;
thorn = -28;
u = -48;
uacute = -48;
ubreve = -48;
ucircumflex = -48;
udieresis = -48;
ugrave = -48;
uhungarumlaut = -48;
umacron = -48;
uni0122 = -64;
uni0123 = -52;
uni0123.ss01 = -52;
uni0136 = -38;
uni0137 = -28;
uni013B = -38;
uni013C = -28;
uni0145 = -38;
uni0146 = -36;
uni0156 = -38;
uni0157 = -36;
uni01CD = -80;
uni01CE = -42;
uni01CE.ss01 = -42;
uni0218 = -43;
uni0219 = -36;
uni021A = -36;
uni021B = -48;
uni0237 = -52;
uogonek = -48;
uring = -48;
v = -72;
w = -72;
wacute = -72;
wcircumflex = -72;
wdieresis = -72;
wgrave = -72;
x = -54;
y = -72;
yacute = -72;
ycircumflex = -72;
ydieresis = -72;
yen = -50;
ygrave = -72;
z = -48;
zacute = -48;
zcaron = -48;
zdotaccent = -48;
};
Y = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
Yacute = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
Ycircumflex = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
Ydieresis = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
Ygrave = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
Z = {
X = -26;
v = -24;
};
Zacute = {
X = -26;
v = -24;
};
Zcaron = {
X = -26;
v = -24;
};
Zdotaccent = {
X = -26;
v = -24;
};
a = {
slash = 40;
v = -18;
x = -8;
};
a.ss01 = {
slash = 40;
v = -18;
x = -8;
};
aacute = {
slash = 40;
v = -18;
x = -8;
};
aacute.ss01 = {
slash = 40;
v = -18;
x = -8;
};
abreve = {
slash = 40;
v = -18;
x = -8;
};
abreve.ss01 = {
slash = 40;
v = -18;
x = -8;
};
acircumflex = {
slash = 40;
v = -18;
x = -8;
};
acircumflex.ss01 = {
slash = 40;
v = -18;
x = -8;
};
adieresis = {
slash = 40;
v = -18;
x = -8;
};
adieresis.ss01 = {
slash = 40;
v = -18;
x = -8;
};
ae = {
slash = 40;
};
agrave = {
slash = 40;
v = -18;
x = -8;
};
agrave.ss01 = {
slash = 40;
v = -18;
x = -8;
};
amacron = {
slash = 40;
v = -18;
x = -8;
};
amacron.ss01 = {
slash = 40;
v = -18;
x = -8;
};
aogonek = {
slash = 40;
v = -18;
x = -8;
};
aogonek.ss01 = {
slash = 40;
v = -18;
x = -8;
};
aring = {
slash = 40;
v = -18;
x = -8;
};
aring.ss01 = {
slash = 40;
v = -18;
x = -8;
};
at = {
slash = 40;
v = -6;
x = -14;
};
atilde = {
slash = 40;
v = -18;
x = -8;
};
atilde.ss01 = {
slash = 40;
v = -18;
x = -8;
};
b = {
slash = 40;
v = -6;
x = -14;
};
braceleft = {
T = 20;
Tcaron = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
uni021A = 20;
yen = 20;
};
bracketleft = {
T = 20;
Tcaron = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
uni021A = 20;
yen = 20;
};
c = {
slash = 40;
};
c.ss01 = {
slash = 40;
};
cacute = {
slash = 40;
};
cacute.ss01 = {
slash = 40;
};
ccaron = {
slash = 40;
};
ccaron.ss01 = {
slash = 40;
};
ccedilla = {
slash = 40;
};
ccedilla.ss01 = {
slash = 40;
};
cdotaccent = {
slash = 40;
};
cdotaccent.ss01 = {
slash = 40;
};
cent = {
slash = 40;
};
comma = {
V = -54;
v = -52;
};
d = {
slash = 40;
v = -10;
};
d.ss01 = {
slash = 40;
v = -10;
};
dcaron = {
question = 30;
};
dcaron.ss01 = {
question = 30;
};
dcroat = {
slash = 40;
v = -10;
};
dcroat.ss01 = {
slash = 40;
v = -10;
};
dollar = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
dotlessi = {
slash = 40;
};
e = {
slash = 40;
};
e.ss01 = {
slash = 40;
};
eacute = {
slash = 40;
};
eacute.ss01 = {
slash = 40;
};
ecaron = {
slash = 40;
};
ecaron.ss01 = {
slash = 40;
};
ecircumflex = {
slash = 40;
};
ecircumflex.ss01 = {
slash = 40;
};
edieresis = {
slash = 40;
};
edieresis.ss01 = {
slash = 40;
};
edotaccent = {
slash = 40;
};
edotaccent.ss01 = {
slash = 40;
};
egrave = {
slash = 40;
};
egrave.ss01 = {
slash = 40;
};
eight = {
comma = -16;
ellipsis = -16;
period = -16;
quotedbl = -18;
quotedblbase = -16;
quotesinglbase = -16;
quotesingle = -18;
};
ellipsis = {
V = -54;
v = -52;
};
emacron = {
slash = 40;
};
emacron.ss01 = {
slash = 40;
};
emdash = {
V = -28;
X = -54;
five = -38;
seven = -28;
three = -18;
v = -14;
x = -16;
};
endash = {
V = -28;
X = -54;
five = -38;
seven = -28;
three = -18;
v = -14;
x = -16;
};
eng = {
parenright = 30;
slash = 20;
};
eogonek = {
slash = 40;
};
eogonek.ss01 = {
slash = 40;
};
eth = {
slash = 40;
v = -6;
x = -14;
};
exclamdown = {
J = 32;
T = -12;
Tcaron = -12;
V = -12;
W = -12;
Wacute = -12;
Wcircumflex = -12;
Wdieresis = -12;
Wgrave = -12;
X = -12;
Y = -12;
Yacute = -12;
Ycircumflex = -12;
Ydieresis = -12;
Ygrave = -12;
j = 32;
uni021A = -12;
uni0237 = 32;
yen = -12;
};
f = {
a = -24;
a.ss01 = -24;
aacute = -24;
aacute.ss01 = -24;
abreve = -24;
abreve.ss01 = -24;
acircumflex = -24;
acircumflex.ss01 = -24;
adieresis = -24;
adieresis.ss01 = -24;
ae = -24;
agrave = -24;
agrave.ss01 = -24;
amacron = -24;
amacron.ss01 = -24;
aogonek = -24;
aogonek.ss01 = -24;
aring = -24;
aring.ss01 = -24;
at = -30;
atilde = -24;
atilde.ss01 = -24;
c = -30;
c.ss01 = -30;
cacute = -30;
cacute.ss01 = -30;
ccaron = -30;
ccaron.ss01 = -30;
ccedilla = -30;
ccedilla.ss01 = -30;
cdotaccent = -30;
cdotaccent.ss01 = -30;
cent = -30;
comma = -20;
d = -30;
d.ss01 = -30;
dcaron = -30;
dcaron.ss01 = -30;
dcroat = -30;
dcroat.ss01 = -30;
dotlessi = -28;
e = -30;
e.ss01 = -30;
eacute = -30;
eacute.ss01 = -30;
ecaron = -30;
ecaron.ss01 = -30;
ecircumflex = -30;
ecircumflex.ss01 = -30;
edieresis = -30;
edieresis.ss01 = -30;
edotaccent = -30;
edotaccent.ss01 = -30;
egrave = -30;
egrave.ss01 = -30;
ellipsis = -20;
emacron = -30;
emacron.ss01 = -30;
emdash = -48;
endash = -48;
eng = -24;
eogonek = -30;
eogonek.ss01 = -30;
eth = -30;
exclam = 20;
g = -28;
g.ss01 = -28;
gbreve = -28;
gbreve.ss01 = -28;
gdotaccent = -28;
gdotaccent.ss01 = -28;
hyphen = -48;
i = -28;
i.loclTRK = -28;
iacute = -28;
icircumflex = -28;
idieresis = -28;
igrave = -28;
ij = -28;
imacron = -28;
iogonek = -28;
m = -24;
n = -24;
nacute = -24;
ncaron = -24;
ntilde = -24;
o = -30;
oacute = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
p = -24;
parenright = 60;
period = -20;
q = -30;
question = 60;
quotedbl = 40;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
quotesinglbase = -20;
quotesingle = 40;
r = -24;
racute = -24;
rcaron = -24;
s = -24;
sacute = -24;
scaron = -24;
scedilla = -24;
slash = 20;
t = -20;
tcaron = -20;
u = -34;
uacute = -34;
ubreve = -34;
ucircumflex = -34;
udieresis = -34;
ugrave = -34;
uhungarumlaut = -34;
umacron = -34;
uni0123 = -28;
uni0123.ss01 = -28;
uni0146 = -24;
uni0157 = -24;
uni01CE = -24;
uni01CE.ss01 = -24;
uni0219 = -24;
uni021B = -20;
uogonek = -34;
uring = -34;
v = -38;
w = -38;
wacute = -38;
wcircumflex = -38;
wdieresis = -38;
wgrave = -38;
x = -26;
y = -38;
yacute = -38;
ycircumflex = -38;
ydieresis = -38;
ygrave = -38;
z = -32;
zacute = -32;
zcaron = -32;
zdotaccent = -32;
};
f_b = {
slash = 40;
v = -6;
x = -14;
};
f_h = {
slash = 40;
v = -10;
x = -8;
};
f_i = {
slash = 40;
};
f_l = {
parenright = 20;
slash = 40;
v = -8;
x = -6;
};
five = {
comma = -32;
ellipsis = -32;
period = -32;
quotedbl = 12;
quotedblbase = -32;
quotesinglbase = -32;
quotesingle = 12;
seven = -18;
};
four = {
comma = -10;
ellipsis = -10;
period = -10;
quotedbl = -18;
quotedblbase = -10;
quotesinglbase = -10;
quotesingle = -18;
seven = -14;
};
g = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
g.ss01 = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
gbreve = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
gbreve.ss01 = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
gdotaccent = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
gdotaccent.ss01 = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
germandbls = {
slash = 30;
v = -6;
x = -8;
};
h = {
slash = 40;
v = -10;
x = -8;
};
hbar = {
slash = 40;
v = -10;
x = -8;
};
hyphen = {
V = -28;
X = -54;
five = -38;
seven = -28;
three = -18;
v = -14;
x = -16;
};
i = {
slash = 40;
};
i.loclTRK = {
slash = 40;
};
iacute = {
slash = 40;
};
icircumflex = {
slash = 40;
};
idieresis = {
slash = 40;
};
igrave = {
slash = 40;
};
ij = {
parenright = 30;
slash = 20;
};
imacron = {
slash = 40;
};
iogonek = {
slash = 40;
};
j = {
parenright = 30;
slash = 20;
};
k = {
slash = 40;
v = -58;
x = -60;
};
l = {
parenright = 20;
slash = 40;
v = -8;
x = -6;
};
lacute = {
parenright = 20;
slash = 40;
v = -8;
x = -6;
};
lcaron = {
question = 30;
};
lslash = {
parenright = 20;
slash = 40;
v = -8;
x = -6;
};
m = {
slash = 40;
v = -10;
x = -8;
};
n = {
slash = 40;
v = -10;
x = -8;
};
nacute = {
slash = 40;
v = -10;
x = -8;
};
ncaron = {
slash = 40;
v = -10;
x = -8;
};
nine = {
comma = -50;
ellipsis = -50;
five = -18;
four = -12;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
seven = -16;
two = -8;
};
ntilde = {
slash = 40;
v = -10;
x = -8;
};
o = {
slash = 40;
v = -6;
x = -14;
};
oacute = {
slash = 40;
v = -6;
x = -14;
};
ocircumflex = {
slash = 40;
v = -6;
x = -14;
};
odieresis = {
slash = 40;
v = -6;
x = -14;
};
oe = {
slash = 40;
};
ograve = {
slash = 40;
v = -6;
x = -14;
};
ohungarumlaut = {
slash = 40;
v = -6;
x = -14;
};
omacron = {
slash = 40;
v = -6;
x = -14;
};
one = {
quotedbl = -18;
quotesingle = -18;
seven = -18;
};
oslash = {
slash = 40;
v = -6;
x = -14;
};
otilde = {
slash = 40;
v = -6;
x = -14;
};
p = {
slash = 40;
v = -6;
x = -14;
};
parenleft = {
B = 20;
D = 20;
Dcaron = 20;
Dcroat = 20;
E = 20;
Eacute = 20;
Ecaron = 20;
Ecircumflex = 20;
Edieresis = 20;
Edotaccent = 20;
Egrave = 20;
Emacron = 20;
Eng = 20;
Eogonek = 20;
Eth = 20;
F = 20;
H = 20;
Hbar = 20;
I = 20;
IJ = 20;
Iacute = 20;
Icircumflex = 20;
Idieresis = 20;
Idotaccent = 20;
Igrave = 20;
Imacron = 20;
Iogonek = 20;
J = 20;
K = 20;
L = 20;
Lacute = 20;
Lcaron = 20;
Lslash = 20;
M = 20;
N = 20;
Nacute = 20;
Ncaron = 20;
Ntilde = 20;
P = 20;
R = 20;
Racute = 20;
Rcaron = 20;
T = 20;
Tcaron = 20;
Thorn = 20;
U = 20;
Uacute = 20;
Ubreve = 20;
Ucircumflex = 20;
Udieresis = 20;
Ugrave = 20;
Uhungarumlaut = 20;
Umacron = 20;
Uogonek = 20;
Uring = 20;
V = 20;
W = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
b = 20;
g = 30;
g.ss01 = 30;
gbreve = 30;
gbreve.ss01 = 30;
gdotaccent = 30;
gdotaccent.ss01 = 30;
h = 20;
hbar = 20;
j = 80;
k = 20;
l = 20;
lacute = 20;
lcaron = 20;
lslash = 20;
t = 20;
tcaron = 20;
thorn = 20;
u = 20;
uacute = 20;
ubreve = 20;
ucircumflex = 20;
udieresis = 20;
ugrave = 20;
uhungarumlaut = 20;
umacron = 20;
uni0123 = 30;
uni0123.ss01 = 30;
uni0136 = 20;
uni0137 = 20;
uni013B = 20;
uni013C = 20;
uni0145 = 20;
uni0156 = 20;
uni021A = 20;
uni021B = 20;
uni0237 = 80;
uogonek = 20;
uring = 20;
v = 20;
w = 20;
wacute = 20;
wcircumflex = 20;
wdieresis = 20;
wgrave = 20;
x = 20;
yen = 20;
z = 20;
zacute = 20;
zcaron = 20;
zdotaccent = 20;
};
period = {
V = -54;
v = -52;
};
q = {
quotedbl = -30;
quotedblright = -10;
quoteright = -10;
quotesingle = -30;
slash = 40;
v = -10;
w = -10;
wacute = -10;
wcircumflex = -10;
wdieresis = -10;
wgrave = -10;
x = -10;
y = -10;
yacute = -10;
ycircumflex = -10;
ydieresis = -10;
ygrave = -10;
};
questiondown = {
J = 70;
V = -18;
W = -18;
Wacute = -18;
Wcircumflex = -18;
Wdieresis = -18;
Wgrave = -18;
Y = -32;
Yacute = -32;
Ycircumflex = -32;
Ydieresis = -32;
Ygrave = -32;
j = 70;
uni0237 = 70;
yen = -32;
};
quotedbl = {
V = 20;
eight = -18;
five = -19;
four = -54;
v = 20;
zero = -24;
};
quotedblbase = {
V = -54;
v = -52;
};
quotedblleft = {
V = 32;
v = 20;
x = 20;
};
quotedblright = {
V = 32;
};
quoteleft = {
V = 32;
v = 20;
x = 20;
};
quoteright = {
V = 32;
};
quotesinglbase = {
V = -54;
v = -52;
};
quotesingle = {
V = 20;
eight = -18;
five = -19;
four = -54;
v = 20;
zero = -24;
};
r = {
g = -18;
};
s = {
slash = 30;
v = -6;
x = -8;
};
sacute = {
slash = 30;
v = -6;
x = -8;
};
scaron = {
slash = 30;
v = -6;
x = -8;
};
scedilla = {
slash = 30;
v = -6;
x = -8;
};
seven = {
comma = -60;
ellipsis = -60;
emdash = -22;
endash = -22;
five = -20;
four = -48;
hyphen = -22;
period = -60;
quotedbl = 12;
quotedblbase = -60;
quotesinglbase = -60;
quotesingle = 12;
six = -22;
};
six = {
comma = -12;
ellipsis = -12;
period = -12;
quotedblbase = -12;
quotesinglbase = -12;
};
slash = {
A = -20;
Aacute = -20;
Abreve = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
B = 20;
C = 20;
Cacute = 20;
Ccaron = 20;
Ccedilla = 20;
Cdotaccent = 20;
D = 20;
Dcaron = 20;
Dcroat = 20;
E = 20;
Eacute = 20;
Ecaron = 20;
Ecircumflex = 20;
Edieresis = 20;
Edotaccent = 20;
Egrave = 20;
Emacron = 20;
Eng = 20;
Eogonek = 20;
Eth = 20;
F = 20;
G = 20;
Gbreve = 20;
Gdotaccent = 20;
H = 20;
Hbar = 20;
I = 20;
IJ = 20;
Iacute = 20;
Icircumflex = 20;
Idieresis = 20;
Idotaccent = 20;
Igrave = 20;
Imacron = 20;
Iogonek = 20;
J = 20;
K = 20;
L = 20;
Lacute = 20;
Lcaron = 20;
Lslash = 20;
M = 20;
N = 20;
Nacute = 20;
Ncaron = 20;
Ntilde = 20;
O = 20;
OE = 20;
Oacute = 20;
Ocircumflex = 20;
Odieresis = 20;
Ograve = 20;
Ohungarumlaut = 20;
Omacron = 20;
Oslash = 20;
Otilde = 20;
P = 20;
Q = 20;
R = 20;
Racute = 20;
Rcaron = 20;
S = 30;
Sacute = 30;
Scaron = 30;
Scedilla = 30;
T = 60;
Tcaron = 60;
Thorn = 20;
U = 30;
Uacute = 30;
Ubreve = 30;
Ucircumflex = 30;
Udieresis = 30;
Ugrave = 30;
Uhungarumlaut = 30;
Umacron = 30;
Uogonek = 30;
Uring = 30;
V = 30;
W = 30;
Wacute = 30;
Wcircumflex = 30;
Wdieresis = 30;
Wgrave = 30;
Y = 30;
Yacute = 30;
Ycircumflex = 30;
Ydieresis = 30;
Ygrave = 30;
a = -28;
a.ss01 = -28;
aacute = -28;
aacute.ss01 = -28;
abreve = -28;
abreve.ss01 = -28;
acircumflex = -28;
acircumflex.ss01 = -28;
adieresis = -28;
adieresis.ss01 = -28;
ae = -28;
agrave = -28;
agrave.ss01 = -28;
amacron = -28;
amacron.ss01 = -28;
aogonek = -28;
aogonek.ss01 = -28;
aring = -28;
aring.ss01 = -28;
atilde = -28;
atilde.ss01 = -28;
b = 38;
dollar = 30;
eng = -10;
g = -20;
g.ss01 = -20;
gbreve = -20;
gbreve.ss01 = -20;
gdotaccent = -20;
gdotaccent.ss01 = -20;
h = 38;
hbar = 38;
k = 38;
l = 38;
lacute = 38;
lcaron = 38;
lslash = 38;
m = -10;
n = -10;
nacute = -10;
ncaron = -10;
ntilde = -10;
p = -10;
r = -10;
racute = -10;
rcaron = -10;
thorn = 38;
uni0122 = 20;
uni0123 = -20;
uni0123.ss01 = -20;
uni0136 = 20;
uni0137 = 38;
uni013B = 20;
uni013C = 38;
uni0145 = 20;
uni0146 = -10;
uni0156 = 20;
uni0157 = -10;
uni01CD = -20;
uni01CE = -28;
uni01CE.ss01 = -28;
uni0218 = 30;
uni021A = 60;
yen = 30;
};
space = {
comma = -50;
ellipsis = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
};
t = {
parenright = 20;
slash = 30;
v = -20;
x = -12;
};
tcaron = {
exclam = 40;
grave = 40;
parenright = 40;
question = 60;
};
thorn = {
slash = 40;
v = -6;
x = -14;
};
three = {
comma = -32;
ellipsis = -32;
period = -32;
quotedbl = -20;
quotedblbase = -32;
quotesinglbase = -32;
quotesingle = -20;
seven = -18;
};
u = {
parenright = 20;
};
uacute = {
parenright = 20;
};
ubreve = {
parenright = 20;
};
ucircumflex = {
parenright = 20;
};
udieresis = {
parenright = 20;
};
ugrave = {
parenright = 20;
};
uhungarumlaut = {
parenright = 20;
};
umacron = {
parenright = 20;
};
uni0122 = {
X = -38;
parenright = 20;
};
uni0123 = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
uni0123.ss01 = {
parenright = 30;
slash = 40;
v = -16;
x = -8;
};
uni0136 = {
M = -12;
V = -40;
X = -30;
parenright = 20;
v = -48;
x = -36;
};
uni0137 = {
slash = 40;
v = -58;
x = -60;
};
uni013B = {
V = -48;
X = -38;
slash = 20;
v = -32;
};
uni013C = {
parenright = 20;
slash = 40;
v = -8;
x = -6;
};
uni0145 = {
V = -12;
X = -48;
parenright = 20;
slash = 20;
v = -20;
x = -20;
};
uni0146 = {
slash = 40;
v = -10;
x = -8;
};
uni0156 = {
V = -20;
X = -56;
slash = 20;
v = -20;
x = -20;
};
uni01CD = {
J = -12;
V = -68;
X = -80;
slash = 10;
v = -48;
x = -32;
};
uni01CE = {
slash = 40;
v = -18;
x = -8;
};
uni01CE.ss01 = {
slash = 40;
v = -18;
x = -8;
};
uni0218 = {
V = -6;
X = -38;
slash = 30;
v = -20;
x = -20;
};
uni0219 = {
slash = 30;
v = -6;
x = -8;
};
uni021A = {
M = -12;
X = -28;
braceright = 20;
bracketright = 20;
exclam = 10;
parenright = 20;
question = 30;
v = -24;
x = -28;
};
uni021B = {
parenright = 20;
slash = 30;
v = -20;
x = -12;
};
uni0237 = {
parenright = 30;
slash = 20;
};
uogonek = {
parenright = 20;
};
uring = {
parenright = 20;
};
v = {
a = -12;
a.ss01 = -12;
aacute = -12;
aacute.ss01 = -12;
abreve = -12;
abreve.ss01 = -12;
acircumflex = -12;
acircumflex.ss01 = -12;
adieresis = -12;
adieresis.ss01 = -12;
ae = -12;
agrave = -12;
agrave.ss01 = -12;
amacron = -12;
amacron.ss01 = -12;
aogonek = -12;
aogonek.ss01 = -12;
aring = -12;
aring.ss01 = -12;
at = -12;
atilde = -12;
atilde.ss01 = -12;
b = -12;
c = -12;
c.ss01 = -12;
cacute = -12;
cacute.ss01 = -12;
ccaron = -12;
ccaron.ss01 = -12;
ccedilla = -12;
ccedilla.ss01 = -12;
cdotaccent = -12;
cdotaccent.ss01 = -12;
cent = -12;
comma = -52;
d = -12;
d.ss01 = -12;
dcaron = -12;
dcaron.ss01 = -12;
dcroat = -12;
dcroat.ss01 = -12;
e = -12;
e.ss01 = -12;
eacute = -12;
eacute.ss01 = -12;
ecaron = -12;
ecaron.ss01 = -12;
ecircumflex = -12;
ecircumflex.ss01 = -12;
edieresis = -12;
edieresis.ss01 = -12;
edotaccent = -12;
edotaccent.ss01 = -12;
egrave = -12;
egrave.ss01 = -12;
ellipsis = -52;
emacron = -12;
emacron.ss01 = -12;
emdash = -14;
endash = -14;
eng = -14;
eogonek = -12;
eogonek.ss01 = -12;
eth = -12;
g = -30;
g.ss01 = -30;
gbreve = -30;
gbreve.ss01 = -30;
gdotaccent = -30;
gdotaccent.ss01 = -30;
h = -8;
hbar = -8;
hyphen = -14;
k = -8;
l = -8;
lacute = -8;
lcaron = -8;
lslash = -8;
m = -14;
n = -14;
nacute = -14;
ncaron = -14;
ntilde = -14;
o = -12;
oacute = -12;
ocircumflex = -12;
odieresis = -12;
oe = -12;
ograve = -12;
ohungarumlaut = -12;
omacron = -12;
oslash = -12;
otilde = -12;
p = -14;
parenright = 20;
period = -52;
q = -12;
quotedbl = 20;
quotedblbase = -52;
quotedblright = 30;
quoteright = 30;
quotesinglbase = -52;
quotesingle = 20;
r = -14;
racute = -14;
rcaron = -14;
s = -12;
sacute = -12;
scaron = -12;
scedilla = -12;
thorn = -8;
u = -8;
uacute = -8;
ubreve = -8;
ucircumflex = -8;
udieresis = -8;
ugrave = -8;
uhungarumlaut = -8;
umacron = -8;
uni0123 = -30;
uni0123.ss01 = -30;
uni0137 = -8;
uni013C = -8;
uni0146 = -14;
uni0157 = -14;
uni01CE = -12;
uni01CE.ss01 = -12;
uni0219 = -12;
uogonek = -8;
uring = -8;
v = -18;
w = -18;
wacute = -18;
wcircumflex = -18;
wdieresis = -18;
wgrave = -18;
x = -18;
y = -18;
yacute = -18;
ycircumflex = -18;
ydieresis = -18;
ygrave = -18;
z = -16;
zacute = -16;
zcaron = -16;
zdotaccent = -16;
};
w = {
b = -12;
parenright = 20;
v = -18;
x = -18;
};
wacute = {
b = -12;
parenright = 20;
v = -18;
x = -18;
};
wcircumflex = {
b = -12;
parenright = 20;
v = -18;
x = -18;
};
wdieresis = {
b = -12;
parenright = 20;
v = -18;
x = -18;
};
wgrave = {
b = -12;
parenright = 20;
v = -18;
x = -18;
};
x = {
at = -16;
c = -16;
c.ss01 = -16;
cacute = -16;
cacute.ss01 = -16;
ccaron = -16;
ccaron.ss01 = -16;
ccedilla = -16;
ccedilla.ss01 = -16;
cdotaccent = -16;
cdotaccent.ss01 = -16;
cent = -16;
d = -16;
d.ss01 = -16;
dcaron = -16;
dcaron.ss01 = -16;
dcroat = -16;
dcroat.ss01 = -16;
e = -16;
e.ss01 = -16;
eacute = -16;
eacute.ss01 = -16;
ecaron = -16;
ecaron.ss01 = -16;
ecircumflex = -16;
ecircumflex.ss01 = -16;
edieresis = -16;
edieresis.ss01 = -16;
edotaccent = -16;
edotaccent.ss01 = -16;
egrave = -16;
egrave.ss01 = -16;
emacron = -16;
emacron.ss01 = -16;
emdash = -16;
endash = -16;
eogonek = -16;
eogonek.ss01 = -16;
eth = -16;
g = -14;
g.ss01 = -14;
gbreve = -14;
gbreve.ss01 = -14;
gdotaccent = -14;
gdotaccent.ss01 = -14;
h = -8;
hbar = -8;
hyphen = -16;
k = -8;
l = -8;
lacute = -8;
lcaron = -8;
lslash = -8;
o = -26;
oacute = -16;
ocircumflex = -16;
odieresis = -16;
oe = -16;
ograve = -16;
ohungarumlaut = -16;
omacron = -16;
oslash = -16;
otilde = -16;
parenright = 20;
q = -16;
quotedblright = 30;
quoteright = 30;
s = -14;
sacute = -14;
scaron = -14;
scedilla = -14;
thorn = -8;
uni0123 = -14;
uni0123.ss01 = -14;
uni0137 = -8;
uni013C = -8;
uni0219 = -14;
v = -18;
w = -12;
wacute = -12;
wcircumflex = -12;
wdieresis = -12;
wgrave = -12;
x = -20;
y = -18;
yacute = -18;
ycircumflex = -18;
ydieresis = -18;
ygrave = -18;
};
y = {
b = -8;
v = -18;
x = -24;
};
yacute = {
b = -8;
v = -18;
x = -24;
};
ycircumflex = {
b = -8;
v = -18;
x = -24;
};
ydieresis = {
b = -8;
v = -18;
x = -24;
};
yen = {
J = -32;
M = -32;
V = -24;
X = -48;
braceright = 20;
bracketright = 20;
exclam = 12;
parenright = 20;
question = 18;
v = -64;
x = -64;
};
ygrave = {
b = -8;
v = -18;
x = -24;
};
z = {
parenright = 20;
slash = 50;
};
zacute = {
parenright = 20;
slash = 50;
};
zcaron = {
parenright = 20;
slash = 50;
};
zdotaccent = {
parenright = 20;
slash = 50;
};
zero = {
quotedbl = -24;
quotesingle = -24;
seven = -18;
two = -6;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2022 The Instrument Serif Project Authors (https://github.com/Instrument/instrument-serif)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Rodrigo Fuenzalida";
}
);
},
{
key = designerURL;
value = www.rfuenzalida.com;
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = fragTYPE;
}
);
},
{
key = manufacturerURL;
value = www.fragtypefoundry.xyz;
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
m01 = {
};
};
};
versionMajor = 1;
versionMinor = 0;
}
